%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: the cure.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Demo%%CreationDate: 10/18/08%%BoundingBox: 0 0 428 203%%HiResBoundingBox: 0 0 427.1270 202.0982%%CropBox: 0 0 427.1270 202.0982%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-10-18T05:04:21-03:00</xap:CreateDate>
         <xap:ModifyDate>2008-10-18T05:04:21-03:00</xap:ModifyDate>
         <xap:MetadataDate>2008-10-18T05:04:21-03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>124</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAfAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6r/zkF5Y1vUfKc2uab5i&#xA;vNHGgW1xdSWdqzolyaKV5sjxkFQrAE8uv3qsb/5xgt/N2p6TL5n1TzVfajYu0tj+hrsvOiSR+myS&#xA;pNLI5FFJHFVHXrtikqv/ADl3dyQ/l7psMdy0X1jU41lt1NPVjWCVjy8QrhfppioYF+e3npLWDyJN&#xA;5a11XvLSxjluYrSYMInhEZhLmM/tNzqp/lGFAD6n0u9F9plpeheIuoY5gvh6iBqfjgV4Zc/mn+dH&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:8E29B7559E6411DD8CF0E3550A0C5492</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8E29B7569E6411DD8CF0E3550A0C5492</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -202.098 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 202.098 li427.127 202.098 li427.127 0 licpclp[1 0 0 1 0 0 ] concat40.5684 0.00195313 mo40.5645 5.3042 40.4619 7.30615 40.5684 11.959 cv41.2158 12.188 41.2915 12.2476 42.2764 12.3857 cv42.9355 12.0581 43.7373 12.3047 45.2656 12.3857 cv45.7144 11.1401 46.042 11.3838 46.5469 10.251 cv47.9312 8.28369 46.4209 5.08643 45.6929 3.84521 cv46.8906 4.02002 46.9067 4.36768 47.8276 3.84521 cv48.1489 3.38721 48.0845 3.44092 48.2549 2.56445 cv47.8276 2.13672 li46.8335 2.26221 46.77 2.32959 46.1196 2.56445 cv46.1196 1.2832 li51.2441 0.855957 li54.8101 6.66846 54.4707 14.2451 52.5254 22.208 cv51.8291 25.0571 53.4639 29.4678 52.0981 31.603 cv50.2402 33.6064 48.5215 33.6118 45.2656 33.311 cv44.8369 29.2813 46.8281 26.2178 46.9736 21.354 cv46.0811 20.8745 46.1914 20.7407 44.8389 20.4995 cv44.5332 20.4712 41.9546 21.0601 40.9956 21.7808 cv39.3032 24.1157 39.7832 32.042 40.1411 33.311 cv38.0063 33.311 li34.1626 32.0298 li32.728 28.7739 35.3018 24.958 34.1626 20.0728 cv33.9297 19.0747 32.9502 17.9077 33.3091 16.2295 cv33.6543 14.6089 34.6284 12.4438 35.0171 11.1045 cv36.356 6.48975 33.0054 3.47119 36.7251 0.855957 cv37.6758 0.0913086 38.7739 0.00292969 40.5684 0.00195313 cvcp168.68 0.00195313 mo173.282 -0.0390625 176.649 0.652832 180.637 0.855957 cv181.817 2.74561 183.01 4.23486 183.626 6.83496 cv180.777 8.99951 181.943 9.64404 180.637 13.2402 cv179.867 15.3589 177.95 15.2017 177.647 18.3647 cv178.683 19.0562 180.287 20.5186 180.637 21.7808 cv180.637 21.7808 179.486 36.4038 179.355 36.7271 cv179.054 37.4766 177.474 38.4346 177.221 39.2896 cv176.419 41.9868 179.013 42.937 179.355 44.4136 cv179.815 46.395 177.582 47.6255 178.074 49.9653 cv178.399 51.5034 179.899 52.9282 179.355 55.5166 cv178.342 60.3433 176.44 66.7422 178.502 72.5986 cv179.18 74.5264 181.042 74.6157 181.491 77.2959 cv180.191 78.6152 177.79 81.7808 177.647 84.1284 cv178.866 85.4517 180.438 92.0703 180.21 93.5229 cv177.645 93.5947 176.45 94.2788 176.366 96.9399 cv177.862 98.2148 180.054 105.134 179.355 108.043 cv178.885 110.006 177.52 110.588 177.221 113.167 cv178.333 114.279 183.407 121.014 183.199 121.281 cv182.813 121.956 181.747 122.835 181.491 123.416 cv181.063 127.259 li176.794 131.53 li175.991 133.158 176.742 134.748 175.939 136.227 cv175.102 137.772 172.651 138.216 171.669 139.644 cv170.388 143.06 li169.498 144.356 161.722 149.294 160.139 149.892 cv157.054 151.059 151.059 151.726 148.182 151.173 cv141.507 149.892 135.558 150.858 130.246 148.611 cv126.31 146.946 125.329 143.627 122.56 140.924 cv119.144 138.362 li116.154 130.249 li113.165 127.259 li113.165 122.562 li111.64 119.001 107.778 117.758 107.613 112.313 cv109.393 111.366 111.729 111.076 112.738 109.751 cv111.67 109.073 110.939 108.237 111.457 107.188 cv112.216 104.568 114.062 104.643 114.446 101.637 cv110.361 96.395 115.819 93.7808 114.446 88.8257 cv114.323 88.3823 112.668 81.939 112.738 81.5664 cv112.987 80.2227 114.587 78.6348 114.873 77.2959 cv115.368 74.9771 112.666 74.0112 113.165 71.7441 cv113.431 70.5361 115.559 69.4395 115.727 67.9014 cv115.766 67.5439 114.923 66.394 114.873 66.1929 cv114.873 59.3604 li114.625 58.5078 113.381 57.5166 113.165 56.7979 cv112.42 54.3184 114.841 52.3696 115.3 50.8193 cv116.057 48.2632 114.33 46.0249 114.873 43.5601 cv114.885 43.5049 114.873 32.0298 114.873 32.0298 cv114.14 29.7285 110.628 26.3999 111.884 23.4888 cv112.354 22.0718 113.674 21.23 114.019 20.0728 cv115.028 16.6855 111.286 15.7783 110.603 14.0942 cv111.029 9.82373 li110.462 8.0127 107.806 6.51172 108.467 4.69922 cv108.911 3.38379 108.88 3.45313 110.176 2.99121 cv113.909 -0.0263672 121.959 1.75488 128.111 1.70996 cv134.944 1.2832 li135.853 1.58838 136.96 2.646 137.506 3.41797 cv139.066 5.43018 140.253 9.82813 140.495 12.813 cv139.28 14.4014 139.125 16.2847 137.079 17.083 cv136.197 17.7568 135.315 17.623 134.944 17.9375 cv135.34 18.7549 134.509 19.6914 134.944 21.354 cv135.305 22.7339 136.692 24.7925 137.079 26.0513 cv138.106 29.3916 136.602 31.6445 136.225 33.311 cv135.898 34.7549 137.015 36.0269 137.079 38.0083 cv134.944 40.1431 li136.652 45.6948 li136.506 46.9385 134.796 47.8735 135.371 49.9653 cv136.176 52.9004 138.936 53.6011 139.214 57.6523 cv137.325 58.3857 136.543 58.6978 136.225 61.0684 cv139.072 63.9619 137.322 65.1348 137.079 69.1816 cv138.61 70.749 139.939 73.1123 140.068 76.0146 cv138.862 76.8169 138.224 77.6724 137.933 79.4312 cv138.616 80.2583 138.572 81.4785 139.214 82.4204 cv140.656 84.5371 144.075 84.2041 144.766 87.1177 cv142.979 88.4663 140.907 90.2817 139.214 91.8149 cv139.559 93.124 141.621 95.957 141.349 96.0854 cv140.034 97.9229 138.545 97.6294 138.36 100.783 cv138.006 101.492 138.259 101.887 138.36 103.345 cv140.052 104.391 142.735 106.512 143.057 108.896 cv141.661 109.58 139.913 109.984 139.214 111.459 cv138.787 111.886 li139.741 112.25 140.687 112.916 141.349 113.594 cv142.644 113.174 142.625 112.754 143.912 112.313 cv143.912 113.167 li141.119 115.003 139.719 120.775 139.641 125.124 cv142.562 127.768 143.438 129.13 144.338 134.092 cv146.249 135.053 155.759 138.978 157.15 138.362 cv159.439 137.5 157.978 136.614 159.285 134.946 cv161.672 131.9 164.672 134.006 165.69 127.687 cv160.526 120.622 167.756 116.446 168.253 111.032 cv165.264 108.043 li166.065 105.276 169.675 101.254 168.68 97.3667 cv167.546 92.9399 163.044 92.1685 162.701 87.1177 cv164.517 86.0259 166.709 84.7148 166.972 81.9932 cv165.548 81.1294 163.11 79.6294 162.701 77.7227 cv164.708 75.6987 167.88 72.1377 168.68 69.1816 cv169.448 66.3433 167.447 64.3511 166.972 62.3496 cv167.398 44.8408 li166.118 43.5601 li165.159 40.8721 167.903 39.5781 166.972 36.7271 cv166.369 34.8828 165.033 34.5425 164.836 31.603 cv166.176 30.709 166.498 30.0156 166.545 27.7593 cv161.963 23.0903 166.116 20.8257 166.118 16.2295 cv161.189 13.3101 161.651 8.84912 163.128 2.99121 cv165.264 0.855957 li166.308 0.276367 167.802 0.60791 168.68 0.00195313 cvcp9.82129 1.2832 mo10.6348 1.30176 18.7349 1.80811 19.6436 2.13672 cv22.2056 4.27246 li21.936 5.021 22.123 4.68701 21.7783 5.12598 cv21.3516 6.40723 li19.4258 6.27637 19.1274 6.13232 17.5078 6.40723 cv17.2793 7.05469 17.2197 7.13086 17.0811 8.11523 cv18.8496 10.1465 17.2285 12.9268 17.0811 15.375 cv17.5078 25.6245 li17.0757 27.6006 16.7061 29.9565 16.6543 32.8843 cv15.0405 33.9087 14.3809 34.5498 11.5293 34.5923 cv10.7017 33.2192 10.0396 32.8833 9.82129 30.7485 cv12.9043 26.3257 11.2197 12.4155 11.5293 7.26172 cv10.248 5.98047 li7.68652 6.40723 li6.95703 5.24365 6.60352 5.34033 6.40527 3.41797 cv6.79492 3.02002 6.97363 2.66895 7.25879 2.13672 cv8.4707 2.01172 9.12305 1.85303 9.82129 1.2832 cvcp76.4395 4.27246 mo78.4453 4.37256 79.6655 4.92676 81.1372 5.55371 cv81.6602 6.52783 81.8364 6.51465 81.9907 8.11523 cv80.7441 8.90088 80.7505 9.28564 78.5747 9.39648 cv77.7695 8.46143 76.9849 8.50537 75.1582 8.54297 cv74.2173 10.2168 71.8364 15.4551 73.4502 17.9375 cv74.3789 19.3657 76.7979 19.395 77.7207 20.9268 cv78.0415 21.3848 77.9775 21.3306 78.1475 22.208 cv76.2212 23.2612 73.7324 23.5815 73.4502 26.478 cv72.0352 28.5786 73.5586 32.5815 73.877 34.5923 cv74.9121 34.9785 74.5562 35.0483 75.5854 35.4458 cv76.7593 36.188 78.4199 35.5581 80.2827 35.4458 cv81.1372 36.3003 li80.8677 37.0493 81.0547 36.7148 80.71 37.1538 cv80.168 38.9141 79.5918 39.2471 77.2935 39.2896 cv75.8896 39.9438 70.5103 38.4951 68.3257 38.0083 cv67.9976 33.8838 67.79 32.9663 66.1904 29.0405 cv68.4419 28.6855 68.4404 27.7993 68.3257 25.1973 cv66.9185 23.7275 65.9717 21.8853 64.4824 20.4995 cv66.1128 18.3853 67.9038 17.666 68.7529 14.5215 cv69.2065 12.8413 68.3257 6.83496 68.3257 6.83496 cv69.2588 5.17041 74.9697 5.57422 76.4395 4.27246 cvcp235.725 157.152 mo236.06 155.318 236.939 155.691 237.433 154.589 cv237.995 153.335 237.056 153.039 237.433 152.455 cv234.871 149.465 li233.717 148.675 229.966 148.513 229.319 147.331 cv229.319 143.914 li230.964 142.107 230.659 141.275 234.443 141.352 cv236.928 139.829 239.409 140.356 241.276 138.362 cv238.287 136.227 li236.152 136.227 li235.184 135.712 230.106 129.029 228.893 127.687 cv226.922 127.745 226.51 128.15 225.049 128.54 cv224.094 127.301 223.588 127.735 223.341 125.551 cv224.617 124.732 225.883 122.701 227.185 122.135 cv229.49 121.132 231.932 122.543 233.59 121.281 cv234.228 120.587 234.252 120.417 234.443 119.146 cv233.304 118.53 232.641 118.294 230.601 118.292 cv229.879 117.804 228.51 117.836 227.185 117.864 cv227.185 117.438 li227.611 117.438 li228.74 115.479 231.519 113.83 233.163 112.313 cv233.21 107.64 231.438 107.31 231.027 103.772 cv232.537 103.449 233.833 102.916 234.443 101.637 cv234.765 101.179 234.701 101.233 234.871 100.356 cv233.59 99.9292 li232.843 99.3809 231.787 99.2104 230.601 99.0747 cv230.601 97.7935 li232.538 96.5991 234.729 94.8623 234.871 91.8149 cv232.765 90.6382 231.627 89.4233 231.454 86.2637 cv232.707 84.6768 231.201 84.1323 231.882 81.5664 cv232.843 77.9429 235.062 75.2363 235.298 70.4634 cv233.108 68.4775 229.93 64.8218 228.893 61.9229 cv229.319 61.9229 li230.487 58.1084 234.237 59.3247 234.443 54.2358 cv233.056 53.1987 231.438 52.4863 231.027 50.3926 cv232.598 48.6777 234.362 47.6206 234.443 44.4136 cv231.498 42.6245 230.633 38.8262 232.309 35.8735 cv229.77 34.249 227.979 31.9731 225.903 29.895 cv226.725 28.7388 227.308 29.019 228.465 28.1865 cv230.601 25.1973 li230.644 19.4268 228.228 16.5068 228.038 11.1045 cv229.913 9.90967 232.464 8.02734 234.017 6.40723 cv236.308 6.38867 239.683 7.0249 241.276 6.83496 cv241.68 6.78613 243.175 6.17285 244.266 6.40723 cv244.421 6.44092 246.152 7.32959 246.401 7.26172 cv247.031 7.08984 248.864 5.79199 249.817 5.55371 cv257.077 5.55371 li260.7 4.76807 268.05 4.31445 272.45 5.55371 cv273.302 5.79346 281.139 8.48389 281.845 8.96973 cv283.554 11.959 li288.678 12.813 li291.284 14.479 292.78 19.2891 294.656 21.7808 cv299.354 25.1973 li301.612 28.3105 299.897 33.6592 301.062 36.3003 cv302.916 42.5684 310.181 40.6772 312.165 44.4136 cv312.592 44.4136 li312.165 44.8408 li311.089 47.5337 309.489 46.2925 307.895 47.4028 cv301.916 53.8086 li301.346 54.8037 301.731 57.0522 301.488 58.5059 cv300.116 58.8501 299.071 59.4946 298.499 60.6416 cv298.179 61.0996 298.243 61.0454 298.072 61.9229 cv299.203 62.8789 300.512 63.7744 301.062 65.3389 cv300.635 65.3389 li298.958 66.5513 295.967 66.3096 294.229 67.4741 cv286.115 75.5879 li284.755 76.4907 282.516 76.6587 281.845 78.1499 cv281.845 83.7017 li282.759 84.3618 284.977 85.8076 285.688 86.6909 cv287.004 88.3247 287.008 90.5527 288.678 91.8149 cv291.455 93.915 295.781 93.8154 295.938 98.6479 cv294.42 99.9072 292.783 100.756 292.521 103.345 cv294.281 105.064 298.969 115.629 299.781 118.292 cv299.354 123.843 li299.688 124.665 300.999 124.946 301.488 125.979 cv294.725 133.232 307.545 143.027 307.895 152.455 cv306.641 153.731 306.407 155.188 304.478 155.871 cv300.587 158.945 288.295 157.648 284.834 155.017 cv283.262 153.821 282.358 151.343 280.991 149.892 cv281.698 148.194 282.208 147.256 282.272 144.768 cv280.829 143.667 278.604 141.482 278.001 139.644 cv277.555 138.28 278.154 136.734 277.575 135.8 cv276.166 134.501 267.487 130.834 265.191 130.676 cv262.202 132.654 259.959 131.795 260.066 137.081 cv261.121 138.871 259.341 140.635 260.066 143.06 cv260.899 145.845 262.862 147.364 263.055 151.173 cv259.212 155.017 li259.959 155.916 260.054 155.641 260.066 156.298 cv257.482 159.558 251.261 158.071 247.255 157.152 cv243.222 156.227 239.12 157.34 235.725 157.152 cvcp392.448 6.40723 mo398.012 6.45557 414.704 7.21582 418.07 9.82373 cv420.489 11.6968 418.955 13.8647 420.206 16.6563 cv421.442 19.418 423.636 18.0547 423.622 23.4888 cv422.502 24.9214 421.917 27.4551 421.487 29.4673 cv420.191 30.1128 419.976 30.5532 418.07 30.7485 cv416.317 31.9053 412.655 30.354 410.811 29.895 cv408.032 24.145 400.65 15.2925 392.875 14.9482 cv392.417 15.8008 392.005 18.6763 391.167 19.2188 cv388.263 21.0981 384.884 19.103 384.334 23.4888 cv386.527 24.8022 390.294 26.0371 392.875 26.9058 cv392.448 27.3325 li391.009 28.7959 389.156 28.7178 386.896 29.4673 cv386.771 32.1396 386.085 33.1831 386.042 36.3003 cv387.613 37.3809 387.358 38.832 388.604 40.1431 cv393.729 42.7056 li393.729 43.5601 li391.794 44.6128 388.281 44.752 387.75 47.4028 cv390.667 50.7563 384.578 55.2734 385.616 58.0791 cv386.12 61.1362 387.934 60.9248 388.178 64.4844 cv387.29 65.5107 386.718 66.6665 386.47 68.3281 cv386.813 68.7642 386.621 68.4453 386.896 69.1816 cv395.65 74.3877 395.864 66.8057 403.124 66.1929 cv407.4 72.3589 412.228 77.439 407.395 86.6909 cv406.397 88.6001 406.556 90.1665 404.405 90.9614 cv403.042 91.812 400.025 91.3076 398.854 90.5337 cv394.023 87.3472 395.845 83.3301 386.896 83.7017 cv386.186 84.6416 385.686 84.5659 385.188 85.8364 cv384.813 86.3896 384.807 86.8901 384.761 87.9722 cv386.518 89.2827 387.967 91.02 389.886 92.2427 cv389.017 94.2529 387.607 94.9941 386.896 96.9399 cv387.324 96.9399 li388.324 98.333 389.355 97.6826 389.886 98.6479 cv387.627 100.079 384.655 103.043 384.334 106.334 cv380.935 111.491 387.079 115.849 387.75 118.719 cv386.81 119.447 386.688 119.752 386.47 121.281 cv387.978 122.234 393.598 126.545 394.156 128.113 cv391.989 128.198 388.189 128.648 386.042 129.395 cv385.185 131.291 384.479 134.397 383.907 136.654 cv386.174 137.928 388.055 138.662 388.178 142.206 cv386.875 143.764 387.947 145.034 389.886 145.622 cv392.266 147.292 398.108 147.167 401.416 146.476 cv403.974 141.764 403.845 144.013 407.395 141.352 cv406.764 140.315 407.27 139.2 407.395 137.508 cv410.916 135.068 414.35 132.49 417.216 129.395 cv419.414 129.406 420.275 129.849 421.914 130.249 cv422.723 131.407 423.886 133.059 424.903 134.092 cv423.431 141.203 425.827 139.49 427.038 144.341 cv427.563 146.445 425.597 147.613 425.33 149.039 cv425.09 150.316 426.077 150.576 426.184 151.173 cv426.654 153.795 423.681 156.944 421.914 157.579 cv419.009 160.246 414.825 158.697 409.957 159.714 cv402.658 161.239 393.065 160.337 386.47 159.287 cv380.491 160.141 li378.16 159.615 374.857 158.199 372.377 157.579 cv366.215 156.039 358.283 159.461 357.004 153.309 cv357.675 152.502 357.811 152.427 357.431 151.6 cv356.388 148.612 351.497 149.011 349.744 146.476 cv351.025 146.049 li352.6 145.146 355.986 146.309 357.004 144.768 cv356.052 143.5 355.749 141.818 355.723 139.644 cv357.314 138.28 360.132 137.775 361.274 136.227 cv360.01 135.488 359.068 135.001 358.712 133.238 cv359.133 132.794 360.295 131.223 360.42 130.676 cv360.843 128.824 359.053 127.889 359.566 125.551 cv360.026 123.459 360.845 121.765 360.847 118.719 cv359.63 118.142 357.661 117.855 357.004 116.583 cv358.915 115.131 363.315 107.771 363.409 104.626 cv361.92 103.268 360.947 101.879 360.847 99.0747 cv361.638 98.3081 362.443 96.6729 362.128 96.0854 cv360.571 91.9902 354.09 93.5229 353.16 89.2529 cv354.226 88.6187 359.179 86.5669 359.566 85.8364 cv359.909 85.333 359.896 85.1187 359.993 84.1284 cv358.226 83.3892 355.703 82.7769 354.015 81.9932 cv353.588 79.0044 li355.571 77.9082 356.758 77.6187 358.285 76.4419 cv357.683 74.4189 356.552 74.1328 356.149 71.7441 cv357.12 71.1172 357.435 70.8462 357.857 69.6094 cv356.214 69.2319 355.004 68.5498 354.441 67.0469 cv356.311 66.0864 359.621 65.8159 360.42 63.6309 cv362.34 60.5669 359.335 57.9893 358.712 56.3711 cv357.981 54.4727 359.294 52.5269 359.566 51.2466 cv358.162 50.5083 356.966 50.1558 356.577 48.2573 cv358.854 46.0933 362.065 42.6226 362.128 38.4351 cv360.805 37.0034 360.879 34.3823 359.566 32.8843 cv359.049 32.2935 358.369 32.3447 357.857 31.603 cv360.231 30.481 363.352 28.2676 363.409 24.77 cv367.222 19.3804 359.493 14.1924 357.004 11.959 cv357.004 11.1045 li358.556 10.0869 360.274 8.33545 362.128 7.68848 cv364.937 6.70801 368.493 8.02881 371.096 7.68848 cv377.069 6.9082 386.065 6.021 392.448 7.26172 cv392.448 6.40723 licp261.774 19.6455 mo260.638 21.3999 258.673 22.3101 257.931 24.3433 cv258.815 24.8911 258.914 25.2305 260.066 25.6245 cv260.657 25.959 267.593 26.4702 269.46 26.478 cv269.871 25.7241 269.998 25.7603 270.315 24.77 cv270.742 24.77 li270.315 24.3433 li268.866 22.2593 265.061 19.7954 261.774 19.6455 cvcp262.628 31.1753 mo262.275 34.2705 258.71 38.6587 262.202 40.1431 cv263.944 41.3716 269.29 41.2456 270.742 40.1431 cv272.077 39.7324 272.399 39.1763 273.304 38.4351 cv273.304 37.5815 li271.923 37.1001 271.083 36.1265 270.742 34.5923 cv271.911 33.8618 272.814 33.0483 273.304 31.603 cv273.731 31.603 li273.304 31.1753 li272.68 30.0991 272.768 30.395 271.169 30.3218 cv268.978 32.0732 265.948 31.3018 262.628 31.1753 cvcp37.5786 169.963 mo37.6108 171.045 37.6304 171.55 38.0063 172.099 cv38.0225 172.152 42.7036 179.358 42.7036 179.358 cv44.8389 179.358 li47.2568 176.288 48.4092 178.824 50.8174 177.223 cv52.2373 176.278 52.2222 173.438 53.8066 172.525 cv55.186 171.731 56.917 172.193 58.0771 171.244 cv59.356 170.198 58.103 168.613 58.9307 166.974 cv59.2266 166.388 60.1084 166.529 60.6387 166.12 cv63.8457 163.649 65.1069 160.652 70.8877 160.568 cv72.6694 162.282 75.4966 164.589 76.4395 166.974 cv76.0127 172.952 li76.4736 174.418 79.1943 176.684 78.1475 178.504 cv77.166 181.589 71.8916 182.368 70.0342 184.91 cv67.9346 187.782 66.7686 191.192 64.4824 193.877 cv63.8843 194.58 62.7256 194.625 61.9199 195.159 cv57.3047 198.215 56.6704 198.425 50.3901 200.283 cv48.6167 200.808 46.0728 202.544 43.5571 201.991 cv39.4565 201.089 36.5645 198.565 33.3091 196.867 cv31.3901 195.866 26.3184 195.247 25.1948 193.451 cv26.0439 192.529 26.0786 191.496 26.0488 189.607 cv23.4453 187.897 22.353 184.771 20.0703 182.774 cv17.0811 181.066 li16.6543 177.223 li16.2813 176.47 14.7686 175.533 14.5186 174.661 cv14.9458 171.671 li13.8047 168.996 11.2231 171.48 11.1025 166.12 cv13.916 162.271 8.32764 161.612 7.25879 159.287 cv7.25879 154.589 li6.29639 150.453 5.02246 149.337 5.97852 145.195 cv4.83154 144.397 2.60205 142.736 2.13477 141.352 cv2.56152 136.227 li1.87012 134.988 0.524414 135.671 0 133.665 cv3.43652 131.761 3.85156 131.072 6.40527 128.54 cv6.09521 124.211 2.95752 121.618 1.70801 118.292 cv5.55078 114.448 li5.55078 113.594 li3.81396 112.693 2.66699 112.475 2.56152 109.751 cv8.01318 104.778 6.29053 102.757 5.12402 96.0854 cv10.3535 92.7769 6.41553 88.9478 5.55078 84.5552 cv7.55811 82.4214 8.88184 78.9985 9.39453 76.4419 cv7.57275 75.874 6.68604 74.7339 6.40527 72.5986 cv7.93506 70.9771 8.09717 68.5366 9.39453 66.6201 cv15.7998 60.6416 li16.2266 57.6523 li16.6328 56.7251 18.0562 55.6709 18.3623 54.6631 cv17.9351 49.5386 li19.9683 48.8862 25.3193 47.3022 27.3301 46.1216 cv28.5483 45.4072 29.811 43.6694 31.1733 43.1323 cv38.8599 42.7056 li40.7139 42.2339 43.5713 40.2202 45.6929 40.5708 cv49.0498 41.1245 52.1758 43.4473 55.0879 44.4136 cv58.604 45.5815 63.6631 45.7354 67.8984 47.4028 cv68.981 49.1577 70.7153 51.2188 71.3149 53.3818 cv71.3149 59.3604 li72.1963 61.5503 73.9946 62.3613 74.3042 65.7656 cv71.6553 68.6357 71.2222 73.8223 67.8984 76.0146 cv67.0151 76.7256 66.124 76.8306 64.4824 76.8687 cv63.3584 75.3643 61.3271 74.5166 60.2119 73.0254 cv58.7212 71.0317 57.6963 69.1543 55.9414 67.4741 cv53.3799 65.7656 li51.1104 62.3901 52.2959 56.1924 48.2549 54.6631 cv47.7397 54.2534 37.7969 53.6978 37.5786 53.8086 cv36.8218 54.6284 36.7695 55.1479 36.7251 56.7979 cv38.0571 57.6431 38.3647 58.0034 38.4331 60.2144 cv34.0254 63.1953 38.2734 63.9395 37.1519 67.4741 cv36.8535 68.4146 35.3784 68.5078 35.0171 69.1816 cv34.3535 70.4185 33.7793 73.9731 33.7358 75.5879 cv34.895 76.623 35.6685 77.3545 35.8706 79.4312 cv33.9053 81.2002 31.3574 83.1792 31.1733 86.6909 cv35.7437 90.2686 31.0337 91.3311 32.0278 95.231 cv32.7598 98.106 38.8198 107.223 38.0063 109.324 cv36.7451 112.578 34.2808 111.658 34.1626 117.438 cv35.5347 118.377 37.8203 120.021 38.4331 121.708 cv38.0063 121.708 li36.2651 123.263 34.6191 122.962 34.1626 125.979 cv35.4438 127.259 li38.4331 126.405 li38.4331 127.259 li38.0898 127.695 38.2813 127.376 38.0063 128.113 cv36.3062 128.697 35.019 128.628 34.5894 130.676 cv35.5576 131.7 38.4053 136.234 38.8599 137.508 cv37.46 138.628 38.4839 139.152 37.5786 140.924 cv36.3311 143.367 34.3032 140.766 34.1626 145.622 cv35.0991 146.88 34.8726 148.084 35.4438 149.892 cv36.6821 153.811 38.4834 154.542 41.8491 156.298 cv41.5801 157.047 41.7671 156.713 41.4224 157.152 cv40.6753 159.023 37.3467 161.345 35.8706 162.704 cv36.9463 165.736 40.0088 166.554 40.9956 169.963 cv40.1411 169.963 li39.2271 169.442 38.9585 169.797 37.5786 169.963 cvcp263.055 43.9868 mo262.401 45.0386 262.077 44.959 261.774 46.5493 cv263.844 47.9575 264.98 48.5654 267.752 47.4028 cv268.178 46.4517 268.404 46.188 268.607 44.8408 cv267.752 44.8408 li266.729 43.9023 265.136 43.9268 263.055 43.9868 cvcp260.066 52.5273 mo258.734 54.4204 257.253 54.4082 257.077 57.6523 cv259.481 60.1226 259.605 62.3926 264.763 62.3496 cv266.532 60.8379 268.01 61.3823 271.169 61.4951 cv271.624 60.2666 271.899 60.3579 272.023 58.5059 cv268.817 56.4614 264.294 53.23 260.066 52.5273 cvcp265.191 65.3389 mo262.628 67.4741 li262.628 67.9014 li264.387 68.499 264.601 69.1367 267.326 69.1816 cv268.595 68.2925 269.588 68.5649 270.315 67.0469 cv268.607 65.3389 li265.191 65.3389 licp260.92 92.6694 mo260.242 93.9292 260.034 95.1123 260.066 97.3667 cv258.768 98.5234 259.387 99.0884 260.066 100.356 cv258.785 101.637 li259.212 102.064 li259.886 104.259 263.694 105.891 264.763 105.053 cv266.393 104.299 267.135 103.938 267.326 101.637 cv268.535 99.6753 265.771 96.3267 265.191 93.9507 cv263.737 93.2593 263.147 92.7729 260.92 92.6694 cvcp261.774 108.043 mo261.191 108.605 260.417 108.949 259.639 109.324 cv260.066 110.605 li262.819 111.481 264.959 112.612 268.607 111.886 cv269.034 109.324 li267.752 108.896 li266.573 107.826 264.11 107.969 261.774 108.043 cvcp259.212 114.875 mo258.327 115.888 258.135 115.503 257.931 117.438 cv258.631 117.736 259.3 117.731 259.639 118.292 cv258.785 119.146 li258.785 124.271 li258.917 124.788 259.475 125.589 259.639 126.405 cv261.648 127.301 262.028 128.354 264.763 128.54 cv266.631 126.975 268.809 128.426 270.742 127.259 cv271.152 126.654 271.159 125.861 271.169 124.697 cv269.555 122.89 269.185 119.537 268.607 117.864 cv265.583 116.746 262.002 116.062 259.212 114.875 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykef%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.0%%For: (Demo) (RX)%%Title: (the cure.eps)%%CreationDate: 10/18/08 5:04 AM%AI9_DataStream%Gb!T<H!B#qf&qD]Ig6'a#:#LWP!IYCJNt=h84&+5-R""7Cid5Wr%XglcL2aT[Ns&>SaL]nIQA:3UfpNaIAr[*>]2aVDsusUf,O`r%/pgdTn5S)h]s?a&V9-j8]Am(qj->Mf))g?PR%CG/bAKaIRRLSN(&G\>cSc_$c]>J[ql&2XWO5nKNJC!0[9R$fW8?<r-J.smX6mNS%g307e=DaDhF0t2sCAmtriV*6Aj)qK7>h2%Kc,LKJIG1_#X=]e7De\(/h`O$YerH]Tg?m`A4`950F2`X$eCnc.1(C84Ho;HehJGBa%g5SVjJ/\Cdc$VOSrOcpRS(74<UOG3R?%8q=5!;m"2.!M\@Bk"F?iLS(5!O0?L8X9JGu7^U>;Ib;Y*ij&GN?.;%^j(>CB%Hi+&m1H%lKq(,Q`TK9mRG!sengu6rGPl4XfJbf.;:qoI],,"lZ[2L"ughufg4Z,p>@n"\(_En/61a1l-[9:_T-E_B<=lIfm%b]19i2+&HR6n%qKEC<A&nY*:UU&>`Ym*GdA/W][LH'$at5]@?</t.:[Nm$Nm;/!dNLfpa$Hnh6_Kf/U)c71hYk*f0,oRR\nokkoBnNj-V'G-q1kkS%EF]%CK)a"6Bt<VSXhH?='&m^I7/^e&jktg3goB7L1`c[G_McNYg?(Gij$Vk)4:D2O-hR6+PH9:a?bLC)gU'u1BB_QDENbBDT'=Wt%Zgmt#=9$Yrc)f_ZY&!-oCASg@G--5JRP"DRo!9lS;!\,:?SuPu<:?DjF8Pje"Hr[6+("uMh6cEV^ENI>jS>raleTt1%D^IEY;`(X%^WIW;NJDJ%a[b;HrFTrdqu7[H*:X:,_n&+EHR/WFcB3o:rp*%I\$JStL]>W4Dc@f"mX@'p:VZ=8dKW6f*f_MlqA>0)]NL0,kF]S?%$_ZV=O4TAH]@LJFNNneEC9r>4o2%OE]@F&Ip?le(p4Gb5$uF_1<WB,nd!1FB12Nr@Dp+cQc)84WYt[INlF0/)9[=:f)imdV\E/o]%eYa<]\,C*3h`N?<`XgUG[9;YcYY22B_I);88X:W=@AhZk0uc3=>?oD8M1'm3aV0KBp>6B+Z'X=t)ulr0O7I=*jpQaOqY\^SS1QD-%Y<LO[$`0\`4-IUki"`AA=OMRgG>E]/QNF/\Xq\r@XaL+,rHLtbr2-?@Q-Jkcq9,U8^89EPit<Wgq/'h;+S)g;?D:lm^H=ec;)GtX%CHSU\OQ<D2,`]$#=aC7Ke1,TT)b2i`U\/SfTW`ee\51r"_:H!uIUS>?dPZ:qKS+1AQetIWFYm]Pma!c;Ji9[sC2*6R.JQWLM-kHc%J4?sB2uhIP9C'M=#]o`^]hF;^X4AOarE/r@]=`95f</H;4l!IFSgDUJ][FqqHdn+h)g9EA]Y%URs*Q0,UO:R9!\#[r$q>R0dW)B]%UHMUqDo4bM!ftm_]ekFaC-=H.*H+r7VaqKc/i&pNVn7gC=anOgj.RnR0/;/Ng2jl'5->OmBp.$p:M.<\e8F`H+3Te@"tDTH2k^YU%0%&:'Lk@COg1?@>a8G_EgYf^@HK4/%n_>bs'`PnKZa9]>Zt8?O)Y*3&DN(O!)9E\j5/t>sHu;/GQhfOW-KLGaLp8h\Xh2X:LMHI=%D-;T.m\j26/q)QS2K-bt:jRtuIPtuLmdB*#];%Y`EA(Zdf4(9W0<83Q7""[Y'+'ftc/7%0h(;>GfE+3WE.9qa[,B.7.N8#k<q+Yl%>'dp;XPFYF:c*`pYD/Uf.8DDn#]],YTY8?P[H8,.]9WE4c,8?NFUrBgDsI<LD/?8"\)La+-9g58CLpt3NVcnqQeTFcr/#)A"qZ9l%af)`E([98Qf'=g-`#BdN9BQQWn&^#NANiMQs*f?oe)Nm^Wd/geg^[r([+9%ojfO$DM\5S'HgBf1):ct3f)ehUT&QC9hbO7`R]<j"%ri.k\04UM"rp!k@&AbliQ180DA46Dj>)?Vd6_RFse8#3fo0>DR`75e^_4)Z9bX'j'IE0Q00<d?$%[&t!B6pa7rq;/VIn3,o\WA5H%rjsXOQQh7CF'&CZKRUf[Z%%Y\s!MfkjhD-U%^-X<jaRaNQWmGq>3OI(@R\]7+/]L8bC@o=rdUTherP=Z(JEfg0H%5=mV`$%oAWT;%c<B:OUJ6,^^\4ES54g&2h#5KIQ7&0EWT_Lu!kU1&XoGuED>u)k5l\h'm&H;I.[oP#?E<p&]DME)#\+;#r6MN=JpUPEh>4b)P5bGV%Y9jNXp/oPR$ZXMm$L,lQn"fL/]W#mip-12/8P&fXVsmf(=)UYL)Km1YORnhFS5D`%.JC'S&<>U(R^]\/_50,ZPaC5cgAO,DS0LZ=%MD!^AD_(4eLX7mo;FUM[Vk9%EQ,dY2^=E#KUXF$Bc"?\De>fljD0TCP[8u?19'NZ^8\X:g.Gat"WKQc%(g>XdoN&<OiEp+KB%i_=%45W_;#$0N<3Tkb%b"f<Z1,6Z?18%0aB^HR3Hlu;AUXQ.+ce;\'8#+\gc!Wn:!StD*$E2nj$\1B-aEUn']-7([E3ef!C;&KFR3KC5%fLma+mIAbgkP@pH/$p[`Vjj2VndDR'Nu)]+rM?@fc#ZoYT1;;J<KrcZHagC)E&kp[NQb\eND=N"::b5sgsfOg&>ja/2!TS@RdHK#%1\X'&S*%K]E;*<;#6_Ng-1Ks_TiV)\hi6sq?2L=]6OHpY]Z:W6Voi@0!8/%)poP<@>M8KCW4+:d%o:FlNR2I3oig\W3nP,kS\[J=%ri/-BZG>cfnDN)'lF!8&=T6I21VEqS3O,Vc4p/ZKoeu[kF5D2hd9AJ1R[26oLjf<'hU\.'4AH[L^0dFOY`&>]LN5rEZ1:H\j<N;k%jePfR<4ac$1obC*>[M,=4rk\mSLsl<no9`%H"o5]<)r0Mh::8u<-,!uqiOFic/[^UKjJT&J(9tgqh^$.o;:8eGc7mSNng=BctTm0%^in'La'?K$o"2qTrqd:G/+Us6/N2X_??f@D[tQm[9F/C(7F\5I:P?PGroip9j]N=p;Xp/]NH&acb^:pYBVgms]l]$/_PHD@HSO$7%ng>h=2l#naVCCtk2.):gdms(U(c[5>4.qi:;GSE,=/=`\C->r$eaZg%J`/2@cXspZ_M3$'Fn`6!6VYIV9G#giJ^j;1(ba!ZYM-S%%CHkj@P[_9Tmr[id4Z3fm-8r%H7M!`\pWRq.:_0-9H.!4AL9]QMjQ>U;$PCau,>4j<h!lR;9i&MBc2[/E6cN>+NRhC0Y7/7rr)q-1%<<!tGYL(`%S`jG2LK`&+chDJP'RAs-iTBTFVBm-OZrI8<XZ2R^GeMdgJL0ZDrnd'a._RfPU@41:^'p3QOG:.Y]O-Cn)Zhoi)Q>Zi%9SDtBSML_*6A>#D<-`=604uW'f>-im+JE5]:M;`58nd-a&,kRBO.k]B,bJ`8kbREqjQ0i,P'=O9eAGXTY1#,_,9]I&q.G_FJCe!!%G>H.Il8a4pY;JnDDRO9s\=*@DPbr3-QA.#1)qRW-9LkE0St*a*9:RCZ7c'<8V55ui'j6TE*tju=o(GhbH4)@H.@u\PQ'WI:+73PR%8AE,6SB9@XOkqgl_jls\jR-V4:0oH`3dJErjiLSPXj<Vg`r]UkULTOLR7n_k+-K`^Tn6pR-+(]sJDt>l)gcq7[98.#7Bc;5f&jZV%HMDnW]:D!._`q58h&!i$#KF>j\FsS4naig#n(S<7PG-gP523cND)@_4eb[S/g$e8"mfsrcee[QIji^[&bh\f!IGQGJDJnfi^!u5r%S@USd1&Je'))"1tYF]#QBhS%&b'`kjq5(@mZ+[mI_qV`ZSN)((h>EsPXFsC"r9Ikif@]`Ea$4&A^OGX3c/2JI`tkgq^PjbCm?=fC%h%m*r%2Tahh]&%lH2TSaO7K>gX?=b_I[jb`[,+Ggo$go(`ba4??=2=4(=#QgNEo:tWp,f=9n#p-N*`M8[G2e13jJRAIdT<0!&$6_%<UI8ac'PQ=k19k4S[N(#bj\#0h7>\3kJiu%1GeZkc<rYk<a(r.?>e!#Ts_DVo.)n4;eA\1%\c86`plV`CX@"EbH"tt)2#[&DZ,uM%dWj-eAB1q!Dt`@hX?h%X*j1hnV[rW=lq;-Rm,BF1d*cIJrU>,ZAU3=ZgU+B6^Uu:.AIN>PRX;;S*i'<]?CYfcg=u]>8snD=f(&-3%qh9)Rq`\jnD>W@kc&=sUM92NV[C*A-BjYQ+n(Q(*kL3B1O7+X6RGPQYS>QhMr;+$?qh#qa:Nu0)nZr+4bCc*-#pldaP.Q%f]Mrh,%A'ios?*/K/?QX+.e"C<JF3r*KYI;ma/PYf?f#-HkRtj]U[+bF920kKBkk:!AT=0a/6!J,k"qM%Ne$[b4Zgm.OOZr!0nX7t81Y#/<%[/'W*T:DHTrGpRG.#l*Bo]kOXl<8I7-iQ5XG1$UQ0>;,Smp7$2Y&o'gd@2uMDgj*/VQEkQDVVqM*-CK(YdT`QBMI7W0_)\`:`;b&%r;Mm<H,"HE6A%<p*J:etGHM@(d#5l2N^9d3pF"!:kgnA_mDPZi=1%ohc_+-KfX\/mmb[t`bk4slD,>*LnOG0P;"nA`gNCQ0(r[Tj%Rs+RGG`k8S]BRZ1.V,o^%XN/'315Een!NQ;Q==QDrF0L`pJ,<V#(:B]m-f=A;?oA6g34QiqQc9>rE+E]oIF_(4mhUjoLetQqqgtu%bh2gCe3Q;NSkTesB!(aTg<@`sX?l<^cO6qkV%<EOYP*>0Ao8q6ZnrX>p@<P-+EPp,jbN*0)2!BDe\6H91XcRlS0'CY50X[d:L3:1%j*W1pd.*$4F%bbM^)@r+2Reb81$C_18o'9'V*jofIb]?o6\@#kl/YI_HMu&0o\Q)')"c.>o@W+i8_VMW-<<0S7(^4hBQ%>3Ke?F$%ro;GfiSD=)%JlsP\^IVS:RXL]HZd&T&Pd'oY(UK<AUF5)Ufa-QI*f=1::DrkV4/2pN_S,;S-p6WqmfY&^0Y"@,_N8bmhRth/PV7T%I/?bXKX#j7^E4Os[Hh=;UO@b\[B>dd)..lcDn_[86/R]FK"'FgRL`rod:8Md0rDUs+49]*VoI!<@cgTefbtB8:BSnWE\u=jr*%j$%Fh82I4mCAup>>4c$(d`2Z1n4WO&mK)VEM]mIZsa&@-libc;X='-$n8K1%"K+rce(f-YK$;oCUYcHJ2:>@bSl_`aS#]c1Z_rK\F^?%2g[Z0rWH$3G*88:p2f7SJlqd=:G7`7j?0ibcK%+DrO!M+m=s8+lcX\Lf9c4fLY5J<c'[[.:BQE$qt[@[q)+$'Q'L^6k1O3$qs!Fh%O4,))l0FpTAj:^Y@PkB_*r];kR00_UWMda9k1=*Ao,Ca"oW$U?oYnYhIIQm?eHN34V/8CCT0G&'nZ>'^^qaQB6W7sH2qMYK4V;m!%W;EZoHG&\Gp&48mBH%L)Hi7sU?JejlHM_DtUA":kF*7KCUUrKDoh9l&*5,Ki:N('AJ).hulo43=@QGJ^1.!@SmTs8HdO'um&O0Vc%ma0"Cj(eG`dA#i2Y]O?9=ICk?WUI<WbZnT>>XT!El+jDsCJ1kWT-6[S?9_bm%8)r*oClfZ_/SFeZDEa>W'(/Ck;$PoMm(O$XH+[Y%3kkQ'A.K#/-Z`,:3Br-^G93JE@3rT*RuOW%4F%MDn<'PVKAK?t9uOgTm6;T?8.983K(f3Ul!s6l!T;/f6-$I8Q-;NsqbJ/qXX(1X%8cSg^[T3D'.VI,!(O#MFd/IPOR*gIWcmbttK-'3+p\h_1Zp=dX#+ZsKX"Wsi+oH-'=-r&U0,8fZf[(8<TCo)TI;X>45``!]7GNLG%Hst/6+lPnZd_Rb--Z[D3GWY(-C3in7"(2OgCddeD$X4"DIl8)*2F:p0pInH=EEqZSYZe@frt54;$,=:lO5.R?B_^%$qDe_nnN7Tr%+=_>clg"ZFQ7!TiJ&uoM7;PbHCJ@Pns+hmm2!2Ta'tm;iI.Kj78bgk]_X"&?V-gW)rb!F.c<Qk[#OI(Dn7>P%^6mad!N>!V?J1e>%s&h<pFA+.JLQP/F[k]>MZdBRao`b9b-15jEkB.UDq<H2T45WDg"*FO?HG19MeS4>*?G(ZpT>/+'^W^"G3'CSUs$33Ki\jN8^;(NU%Om;-b(KcCc:TOGsSON;[.Fnl/H(DA258?HW;K#r;2>"#oekZ74Q'B@A=YD;C5X#5CX(DUlA,F\%jF:uF^(fZ;lr-LV.qCi\HFCPj%bU$E<<[[3i3US\*O(`st]5b+&9E6c:Eg$+FN[du%P]al]$b#\6JgrkFF7hXi]_u4]K\]<+m(R>9bNJPBl"iG6.`EKrZF%U@@?sBX%nD[K8590:sp%R,gVP,OX5D9g&\Z0$ho$>Un.=_(jGl-(Dc,B]"'Z8u`2Ws(e*g0q5c_p9YETT/n5P4K(%^>`6Z7j#S8a5mc+),%'%/-QDgrf`>`:MTj7pU79N19%E5WE7,ak*'nrh*9_lch1I)8$no&QV2N9b7"6/cNQ="Ob+A!nZ23Xm>T0cj1$>FMitQ]\6utU2d3>3%]$rU@CL]7imT7F><$oI7rG'Qkmaf6q[Y4<ATuq%AG'[k2KiuahN]srORpBl#5VIQMN3S`<h0-M7@K;]@$g]N@rnI#ug/Et(G9TeQ%"g#8Ei6@ikD*2$'^'Wt$5c*4l<4_KH*?Ktm/,L\KMsMJNV:$+55Obq)YD5_VPWigPB8^J0q)V4,Sb5g(3kE13E]RDCbp#fEkY)p9%`:Qnn9T9Zo`\<>C`H(0t=m.bKJ*q'\e((R/Zt#NiqYBN"BsOZdOj;#$X()=_l]SGZVc2^'h5#uOL+:rY0D[Mi3?FXsSTZK!7(s@h%c;\64,70i1;kiZ^<Nf.*)@NO%+g'iUQ&ansOu\g&7#ICW*>8`2EITI;Utacp3cn"g,Xo3/"d:!lg1_F*a4i\i%[.T(]Bm,sa!RGI%E,iqp>FjG`6L1-?Z4WSnAa=!@T)l6f)Sc"jdlKpQ8RiiF"EN2ldja>+V?G3%F&G@]!9'4cTI][#.Ebt'HY09BHTuk*`p26tK;'>I%b_JanqQCqQ\J&a72#0;#@V:\J+I2Y1qTjF*B0\(SWo9.MP8!Z!qfF>$W(N7V^bSC^/10lGZEaj?*@.f&D06E"n\TX!%X((_lL+%F%H@24SSn34=npCb`Mrg?C\OL'@Q`S9N\"+Fb\qd)39D7mm;L^V<ZsV0S6;'+IqKHiX`tD>8'[-IPI0^@T,En9,'T6,dYorLrO_I:_%q0c/;fNSjR%dE^2Yl%Upq4-d:lXU/*M`qH<*.L[&P9XZNp_l2XBmd8:X\(gk9<-F>"*""2*cVp)olPXl8D$)=Moj,#q%WHSX=f!i%cGYOeA7'qMQF8n<]f`u$b.nE^kMl=&l(m1@WjlqLcl;qd9CDIX;!:bM/>uM2%DVt05E&%Z/r9!,";n`N"(4D2A3rVPc%&PeQgH)S%;K^YX;aR]<RD88Xg'Z8651L5l',-rZ2EnB3gLOo;54OXK%7-_pjT5GKoX:XfA9@OV4X=Ap5D_]@\NDn0(QViP..Tuo^%t;=P(V#6%7N%WrGr@+6MPuliAFY*Mak+;_9?M\N//]Vt98FqNiX#/$YeHO`QIK*[VjsJ61isIRmJ.`65e@Dpc1M^%h(cVP,m(WIKg6MW5Ne5.%/?-9LG]\!`C)_c"-246Y5A1`aiYu/P'et'MhkUU$[f9TsUBU37_j!K#7q9GWZr>>pcs^#B=tW;q9)IgbE/k^f0Bd$O*"BT?+SNtV%,WT$Po^X/_i^C@C9T!t1=g!r>&NWU1gqs&^P1^l5BBQlAqX_$j"^lO,a@[pi8EXc#fM4#jQqPEO/9R7!0$S%7?*RIQet:?W9$CLH%^W+J=M8&XYc=^ES9mOE_j4IN7WdR>if_n\>e'"C:($qhKor,AmSqn_4B-["J@ssIjN;+6tN^UVe+'TZ?inGSFEh4r"3b9Jt?"?LD%hY@ihZRIdlLZEb`^VT`DHs'QNMUAR9iR1?brWr.Cl6Sk7p+OD3:S*$-ek>4&mc^QUBpcSBq>TISU`h)"Qm)pa=V`?knU[Oq<AR,\%0!*B<Hp=3YOh:U639kZCjqS,47$-*L[ga8J3a\X5XQ`Va^F"hWrZ]idS_[rUcr5"fF!+LOh<hWUdkLTt=btApU8K,f8nU%]TBUG<%;p$7]+!ZSGAs6;o@(L5u)emp+!b/-.9JC<_3aIkrAZg1.qq%r\cmoco"c2JRK\<f`=mt!;WPa,/MVb!^rS@Hd4=&O\6N6&)a?Xbn%Q_NQq>TYM@QD%b1T-.@e:LHRARZKJ-Jf'W@WuCS8?mGB9FNYk*0B`9.o#'/Y]R=toAuWJX^X`8UqC973Xu&/-)S5hR3iNr7^4n8T%JrVO1,W0]>'m*a3JcjTNj]Bgf9U/K)cufedW1Xf^Dtk6^r!GJF;e>_B]'_lE'm+0?JqMS"j]BgJC>XcGU!'X49@WG@;*u0!Q!-J?%)mAV'L2K2aJhH:`c;.!V/phsDP]-2;kJ1_3!aRAF$ok)noh(G%a>`E4&e$t9?E2P<jjI]b(TnM:o^o"B#7>a&2`ml7?sCZ!*M)8(%RMCNT,?\TAX;)1UI'I.bPBp(c79ubD0:TZHYR7RpNO4?TXt,'rkk`#*Q\gHBIDmP`1V#/O8fa1X4Zle+E69c#$S&]5pl5aQR]Wc?%W?j<jRDV/pW!5p!8[8%C(<6W$)g<t&@_>6t>*#Kp9a-Y_dEH(/T`b=!rg>5\.!Fno[ODq?G0A;/MZk(3ZhV+7fFZ.`6dSi5Q0[Um%([*E<Ji2/^6r^WOD=[[Nnoe[1;F.':/[qXh?(f9G:l4GEq@fo&)V2>E@-,>4%mTh1Ou1cnL?$YYe)_peGFKW<`4us8>1InAa=k:8%/>9mPBj*0tX*>Xl8']YX'dl8W*q_0OgmOP$S3<i^Y2]MYKqSbNhODTV<4$eep+P[H9Z_i=l<E*/oO-hL?`uN)?8XIVOFaaed95HK%KOHPbX[FKRZfn<nXK;8L+I5n]1H<<n66Ub1ZMQ&'IN[5#phd54l)^FY5Q@%lKOXd[0a52&nm$^t46jYFI`n>UEbSf)4%MM+,['qf%FKY4"4fE`+r(e\_k8Q/7WO#m[]j':E939)U]5n\`n"T!m.+(4#B@MlNQ-/d)6S#:o3q9"<P>2lAEU-'j0jnNmV=cV',&e6pO\;2I%ScXp7blnKt5Op(%:qCR-WCNgR4+H_lWesMaOkH,7f;EsCY<8sX`DD``A6)*8AP;WDos)^6A:Yr%eDOr:5.9(@HRHGLDLOX75r:![%2VXYfSIQ@tiOR\.f-?JC,u>o1fm90"PdG=KVNaj"R8PR@:AoHK1:,I(qXqoTVNg_o(b`Q!V9ZD/hN#T#A%Ynb+&CnK5c%2'H"8me%.'#I#IlB5'O%a8N(8jq=l+hOkS*uIg'lcC0%'<%&A!-AIhMre8%qTDl*gpP-C@D#3_)sJm%m0i%'eRa'Z.P6dH?"P[`oLU*k0$9^%c8sJ*e&fm?RP'N%LpB_.gdGMjONM"g%Hu=+`e^O:m*a#H_t<!=Tr$$+b3:KUL,NiL]B$bgBiug=oi"&?SI1mc(@5%&2t4@dOi<*e%\pj8Ddd$,GQuu#tE).i0T]>Z5]q!W@SZ4W4&kP7N?dPY(0;G\*bP(OgZ6$1<q-ueB_o8pS:I\2EP$S[NItm52ol+VjI4-!QD*?[9%eUdtjiC^eA\40:*(U$>h.cTHP1Q$Lg^^lX1L`8h$9<3ik3[J1@ol-bWMRZO6_fa[B).B(qXqQ]uXVVqA-?4L'R1n8I>8G>;4=ud2%fou-U)FKkCK*fd=b_5?9:WK^UK1's\T:md>cjM,iOF^F"-iYaG=:T`IN+WjVANRhNapGq0ALA@%4EZi2[1st)%O193p2"8O2=t#`%Pp!s-FOL93n>tiY18P%_Gh,(sG&-,gp[D]a1416DV_<K;0_\M1%!/LOl":]aO:*'s3655]geWLdnDn:eR;(79/3E4Pdn8gdX`6D`%879r*mH4k]@aQR;R:QL?ToWhf0(`G3WfIrG+tZiXWfNW:Rk=j2g5DYQI9`I'MMfnZ,H4641nolW:Eul1rD`\3kR<eYbbqhqI113A%@A2R(UM3;B"qejFU"7\?!EP9j]1V%FI&tY/S\h4BP1u1dd5/pC\.4>n.SuTq5UfsqI`m:7i<n5&,:J8`.5Zlj\D/(-5tg/\Y<q\M%e%n]9P5_^QBm1MDN,Tq@&3iB>VsnE1'B,/OfQCst#HDcF.62r.*lS1`JZ)mJ3QQ.n*G2(pT6i>WH'&!1IX]hb#L`3c?IU(ZLqGZ+%Z`C!K8>+R76&^U-LXK_2G_kQ"\&P8=ZbH`m`F\AufOFfse_%al\#lpS2<3HDi`g>:N!u'_r,mQP`]rHHnR'&gi2Z=V@gedH)u'Z)%C3hPM%@udOZN""#!3Fl%-fZ$+,qG3n/`UU!9<UF(2*R:,lrI8Jj%Ek.q,ckELICbd=cG:YqXj8'X4Zf\?Er8Rr!L%XmnY^iC/7Of%Dm+&a#//9^`EGJtGi:]@h'RU$,,X!q!k.[_`FHF+c=48@S-h=ZnE]EJ4)Na$hId73:V8Z9<8Y!!DX1/.f.sZ;h-'N%Q8p@2KDh'`%+($>_C:sN0bX%`#e!72^6-%he/q/b+i+^i4(JKAZni($$j7DYJ@eV\8qtBqic[:dDn]1Y#D<q,(B91Us+7FU)M)qT=CE8:Gi2)j(%!tCGthtD-b/P-+DDNbuT/4(&mr@aXg,rk"Np)HeFGIX3l@MXYMrTYoBKkh@--C%P^#HmXPmWD.n!&r#r9dr,%AL'4V(%f@[p<K?a%#cF#1&\8b"lRR@>>l(8s8MAlWQcSi)?gQXYe2pY7=C9Cd#)WMrE+UOp.FY?Equ4+b;pp$K/=DspRTiLQ<_JeEkoHdmXtN#`^t!O@%[<*E#)aQ>eg<sFbnI\dMV4"Og]o9+_D?Q5c",=(E&pY2AFD8.)ESpP)Wp,D5&2Hp:?%3K4ct^/[mAt2h>rgnZ\u`uoBWLCGlI5<F%HNpIH92c6TC(l?#VG$?[eC+"L=(-Vo\hrNG2"GCmZmg-f2Eue.]!PYP/kp'DC:Z7`2"'TK9f651r^AllW2f+1C?\Xa'HXQK0!20@%op'r*e+JCH8?1q&C?^J+=AQmi+(Bk(e"qaq\o03];:\"_FGUM*>.V4]fln5qmcBIDksC4hZ>-tXBSgCpUTC?9Z<g%*9pZn=)0IfB%VL07q2-h+S31;PLC:Z60PX\tRQ_m2phT'7<D#gTZeo`9Q!6Y7L4YGSC=@cL8bCk4VZ9*)r>tES2f]0c>c."@8E*lm1V9*%mQsoE`%9>f(RcglgYXm#lFe57UmH`snf;%Nn['tE_?kG2.!YH#d9;YKKu4g0/`3[N2SqDmXg#>RF<\Waql9krS`g,I3&8og<fYM5T`&W3T7%V-+W)bWWZ\5rM\nC[PYEWoU5A6X=cbFh:nPpi+""gnik7frL4;mk_elo93**\f50GM/2PMDOJW<;Y>7Y?)C+HIaMHib`Nsugd+m(%H-tHpfA,K=^(gtr^$DbZ+68qBdS,!I:lEq.(osQ0J`>8_.8''W&qKk]je8Nqp?tH;N:OXI/,(_"5AAH-`cI"B^>K0;r@loH=c"'.%+r.=FlO3Ze_npVnAgu(T1@/-H;p(fkV#C`C3Sd\2<5%RJ%%V#uAViI4#POt*!nlg.O!Di&U96tP%<_<qQaFr=I-d!J>cdL9G,E0X%0PE[l"_L[_d*M4SSALI+7KT.I]?0&t_?D^,cromLZ`pKt7.)J)SaD_jk9!3=.NijlWf)fj04JPlhDC?$b1eAqGu%33^;LK&]H$4$%_jF;X\"'#3Sn<glk"q[-##sD?Dp$70Fe:T0[dNft\n."]c.7<*Hb+ONIb2-N"'7YrY>4T[D)m:Y7AJDgcNm8Pi-pEpXdXV$\lpUr%,o%k?88QpO/^s\?+Mp42P$*?.]T%:=(A5Jl7Z?Ja]3Z?e`TrBODRf$(hWb,[\4`lMr&XHb?(Eq0%<GHSnTpr-S+6b1_aH/V8fL2`%]l(>1's.ual@upXqd.$\8+d8FE*)O.F&Y@E(Uu*/B0fS-RPWm4UUX(%%lHj23E+?$1j!0.O(0C_XOY?-1CIuVT6&!M%-,S>][kla%.-`f/dh83LCpBT1jFfBGMO6^n\U2L(XD^lB7'dAEea+VMC)_a5'D6'Hg=^j)[>ZQ4,\MBLgCaZ3l_BDq(YQRVT"-N(fnbfrfRE(c%N%#QPp8I=Mg<6fH(MJ"\N&s/kI!]<t),l#R9Je%Ya/^mZNU-H:`F=U3(o:j*SD$rd5.b^o?hYE"O;,BjDP6;:e+GG!k'asH<;a>J%0P@/98$PmMlhYn=LF,u&LUe8k]#U$t=Hn+AJ))@;UJ$KWm&K7*26Jd4hUape\T#+=+gRT"?G#)e):)C_:o6'-p[4m'-$h!*3uM84%])=THpMnGI*T,E7O^Hr=m`NtDcL2c\s*NS3O&%Fu/g]spS&qggF,uWoV!fLQdG=GQ``$."9\dNDF8b+n53nZLe/RTGA7I7EqNbFa%VerWlLDb`u'//XjbH%]g]PfoGD"eUNIlh.@p7OK/c&6Pfc6BoX5PF^#Nm]cJ0Kt"?F)(_=]SYMjQn1t$J,+&P<J5#`RX=X?mO@/n%SRm'![=8>9T3CBMg@jWGB=VH`.W+a*l0LHHct_DpGM7*"TZu'6[hCK6fi<e$Fi$>e\jp]_Dl%eZ*IB7jnO9#LrtQ5V52UOrRJu(%%7'47OV9.<`iTm`MD`45kmO)LR&o6o53Wm6qD\m"0d4#rW)gQnl_rHu_o";?OUT):oBFn*RdX+%E/RM;A/uC018Tt'YS"_?KYplN>%5B\m61X!I6[8j$e%XU"Td8Z2!deHD94UQ>oerI%7cjFSpBT!m*pQ^>r=")[k=>ablg3`o\78UiL3Lqa\AplX=UTZe^S1.Had7a"-%^g=LAUe[oTUn`<%EM$/:ZF&%tbr@g[c].="<u28;%X+-%A+'6>P`(7^_W\j#fWC99,CS=(bhq1h%LX,h(Q7;WQI[;'ZSd>uBJ1-m%@b%m('YF%BRu<eP]f!00R<(kq"ZYj'ci?buHEj&B$TcJVdOO5ul_p9>4tCMt_#"VQ3D=Sn4S)C@^22lta;LLt)K:8+2[\uYF67kV%Y:JKcbH%r)jlc*MAQObiMnq<sG:*sWmdrVa+\*VGg;s#+k<6L5%oAmPA7+'4=OP"J*:3;]HD-B<X1g2%8XkmaQQ9&f]Zp!fpXI3H%;bFP]<Djq)ZP;mt?_s8j!KjdBp!K:.Z',gX*sNT<mPU$JrB<:.Fc0!rF_tGt(\p"7pBRs0[6/jg1-KY<+N/T^VpcI#C@/+J]#o`5%[DV^\+,ht"'k#E-^g?2cA9?5^NI!&)CEHQ,7;Dm5S:?&=^nN]:V'*9':_dBc)Sj5!Qt;Ss'r_6+j\$A\oV_gB=p%m2asJ&IKk^U/%:,O\$"^&,9&2s+;<Ii1?AX<j['gpfH4MjbeHJce%MG*ba&k2-4GTVl[OA#C9YJNMM.::)SCa6ZY0:S#^nl!2"4KeRB?-3ssIK/Z1%I/16_NTsEUh"rUW\<JX,V9Y9/Or5DuT,siFI'6o*b3cjlDr@sq3puY[\<:Vq<=uakDcC@:jko?)1u#Ij]mb\+P_Qp(0A,k.S.1a)%Y?rAa6Oe%=?[RX?DtQb6V[mdN?[cFIAD@WDY@##\Srl=gpUu#)bDk?CQfV02pKkW4SLbLrkk;aB07R\fai!$%Q[c&CnJaaan+Fk2%:eZ`UFg#/Z:&1]U%sP3aI`>N6:#[i3B6W4tkA.:hhs6V/gGV9bW\h'&<@!8oTIOuc?bWKYc[m5#?G@>a;b1i2qtPoLGouBZ^XQRV%OZ2WTI)Q.:IOlqGT2?<:qgQ_^n+Fl=eIU':;;CL#P@;J5IdqJML:Pnh58;5H5D"7\6ICsr63L7Jm(Il>\I$l(^Pq)W^\kmO<,`@t%Y?uaO/%&E"J:%7Cas851ICT1LMFNAJhT%SA.3?<RHm?2R040Ph<m=M-]%=,Vh*Ye_mD/JmV*!Re>Q$TP)>IOQ%PmB1?$V7+Zp+%:%A<c'AouiCTEu)Rtme*'q^"'=4qtL@hdceE+DeLn"\^bWVqtU#nV)(kbke>ZP^T7,j]';CTB@)#(\C`"s<kf]@O+m&qbNFV6X3u;6%J!$qs,]RYiHi6k)'t`"7cr6Dpn+@X,m^9fVrUP7pCQ.C>^0[[ZdJN]n.u"jXfmU&2,%fV;0mq-GIXRfYSp@MH1eQK(Ieb&[iqN:\%W<!B0?FYRSoug-Qo!?f#^=P"=Z*%=0;U:%9i*O14rK[QAlW:m)*5T=;q7$4nSNW?[Y@#"QR,hb0hs6W4(oBb8#IrA=s&Qn)a@O&L%YrT;iKsGa?Hi<O,JMX?Bqn1N6s&Qm$Z(utQk[f*+\uTU&kd/=CIegi(Xbq1]Hi:7("-+K>DAa6$Q`ZmJDT+P$\64TSL9=ga_m(_t%nk5Qi[n#G+Z>=Nm_kjcW5--0)J+=aKp/'J[*+E@#4qM=9J6B.;)A,(n/5ap2mCJ3c;pV;^X\\8T`i/Rkaa`QT[aAp*<pM96QPVGf%PBFncRpO[Sa6"9f+3)h$ahdnuLZS4)Q.O8>o;D&+9l!u%T+#SkgNoW3?XE/83t'BTg:jom7GIk5q*mH5CXKk0-SMALmGr#)>s&"5%IB/o5f7.LIqt_E%m-3mFmF1@nVKR60s%^1B=3e4S]u@SVII;>Xqu5m8CpWqdEOsh,]<n'0`me>dH+EmM2=\'QULNT%c[KHgcc-Ra%M`j4HE4S64S=/Yam:bMGo>d+4p#a]rPVTH!:ObT3G/lh]]igm*\:$3Io&3TnSe"HpVfuo`[hbP5WSb'/o@k[?>9%G8>qShmhAmTB%\tA9PNRsNBhE?*no+0u=`"eBD:XYcHR"+dDEB+b9$k->-PkP&`jo_fo1mto*q3O#eIBBWSB\OUnD/23HNMC+/rH-5JUg\9,a8+=[%MgQ?&\C;dAD>ddU[_=Y+U2?XjA7M<rLjW605K,,37@irHXnuEe-BeLd\]aAQgl-O(f4Uhhp>FEqfZ[fI*$r%3n]sj5Wd-G0\2<jf%?sCHaRpU/tVMFD)QKXQH1UZoqQhP7^Z*E1iHhZdR\,":&ali&Zh7YtW59IY+-F^0j^Ute[^9F8O]E!^1KDYPaU0(/@f%1[d0)82n%g78`RR_]G^&+Bb];OuW(WVRod]mu^_rm-QrL$b5_9).Anr79Qs0';cU=?V"7hmf^>l.XRC3>50[;S/Kf=UlK(cUAB:X`)CdJd630%U'I1r\%`P<g9*i)86C:e'0Oq!U'L5IGEumHdb4E:4)a7+f^[%Zal(S?@e>I6C22L1'"P6RF/\%S\9[+gpXl@8V[@ju&RT7!IKr@^%o6=htrc.5qF)Nek--sCZB%4D!iKs<X)u=i]JS4<@cRjU;9=Mq+a*L2JDtZV2QAn4Jl!f]tP"+-O?i#C]**.:uA)0#tdcAU*\(MiB%^[1@*o`o]XNM0lbN[^MFXk+&`PI`n`MRr3=1m)M0B=FdBe?+/qH?j#fFR%u^NF0uCVmVS$ohS7_CAl?2[fDV)DpIh.]\FTE&u'e2%6:C\lhs'J*#]6S0Um4Gb40AQc$Rk5,Q+s?ZB8c[(!WQ\js'cLqYm[kP+Ja=kf-pfc6BAjS>n.^eE`!#@g;aZ6bQ)84J"@g@T-ad3%]Zeq"]425TWuk7W5j/*V4taR`QsndCV6.ur^4[O?&n(]3eNZSn]H@mGaILYDg+u."el@'D9-(N+g#HD&g@#pe5'CRM-\"hiiLfbg%7=tV3#3VJ\9AU''^79Ce[(sI\\iXh3`2(+O=Is0f8ZL\!gGJ(!D:n`0JgKA?G]69M3(.O4c>9$EI4AEG4We/KeaYf^m40-gNAIqa%VlKh7fNZe*lZ\HWmmpGuc?;.\hlkjZn,jfj!Og8s/9,h&._O,P:1mhc\"AEr>"[5KR#5ZaN6Y^H[=B[@7`,cWa'Vr>=Sg:saGPaR%)n2+WdDBaak53C6g?iF!P?r.P`t^;ri77*aXFn3i$^J6jJd(qll.$a^TAqi4Da$mcN?D:`:W*s%WR'jH9W\p6q<B[!i'U!>\04p:%-b@s$g5WI"^dP3iRIuaBpKlhR5/P9mh0Jou$/:c_2VPBhP<V=\k17fU+-.PAbu?lN@)&430_oJMHZ61[CBCnd:_1m.pdtg$ma)'L%P#,K\Z<Ag#SAi;RUn,RYbk&"r>:8.Qp=38aa"aOrh<-'e>`SN3'Va?Yq=O!2K.A(^UF!c=L!>N/a[7Q?@LN%\1p2H7/aJ7=o1`t*%oBs,o3il$Ug,sk7@mo#jJCWkrTHrkJ<0AjYrJ8t'_ZOc?YVt?\lgt$?`V3S[c^P142e$rBougpd7_F"A?Vk2N#a;SR6K58u`Rf>N%0-?7m0$a&Li)nEIS+e4A(3s25rDReJ"L7SOp`-JGQGJ"\+-Zi3^6e@?@lJ'2$/GQL$*at.4M&[#fZkORiT0eEFoOUAqq\<JKT3Wb%e/6BqYo)FXa2=Slj0Z#W*aIL=hn8_&@b/NMpn[gd9V-VH\\1$7$"=]Ic>!$:lM3Z=S;T9H;pYIUjW%H269Y?=Pk3=6LO/r\.-F]*%69Y?=P]MeH:sX3Io0?_Te"ZI,EjB&,l`lOD%R$5Enpaafk7cS6mkg:Lng3i1Z(<,]gYA5Zm40--nOF$1/^EhJ"#BaCqfb82=h5P:%R_j>u^_9U#>-)UT93+L,P%26RrA80_k\lpR)uNs4f?"(r&Ma`nM7tsuK\#'O6Rm23UZhR"[u/sO[(DP7:"\"K1Dbe@VLf'AAltYj%$X3LU!988im/"T=jE9*%oI`.]T_N_r(p@*;q0HcHmAku]'Gr=>HL-ofofonK]IVS1\PV,&_S<7mo\dah=Xfc-DO+!e\'%FbcO[GG%@IrpM?+mmIH<FETgXGiEqJB`S=fZtPrO]br\9WP)e_B3Io$Z76`nm;&D:WSC\$bcnU9lZ:0X2H9I^U=_^KUQLh/GOqg2614;1r#N%opplEhq.2O%mI(s/_'I:Q`KtN]/am.]N(EUgt;ROab68FTP"%F8Mo4/hu)I#h![uX^TMJRcn8?[c*ur8O+1QOmD9q)ZdHLG/ZA'#%Z'jG!JfL)"+`]o^7/9"lhs%\SVH:brdh_@)D:P%\Sn]ZpldP^&ZdRp(V=r^,]OtP(X`(2p2q30Cp<AZIO71\DmI0N,4mVe+[eJeV%G2r/\`9td?(Q\H.rF14+YZ<,BJF%Ym,B5'=q(^0@=<i"QPJR(nU:T'l?!utq8E[;OM[?c-k[pofNf-mSjG_Gm#V.URnBZo&I-^=q%0e!:WRmeK<\>X2e.Ar.AY?lYO%Ei[.IYO41T4eHI`#^1<+abC8E>q+,TSaiM""j4Sn\s@gi5,:n+h!s?nS6]7+"*RsPoJGDi6c$3%dF0if_Y[/Y^Xq+[d!+l*Qn%Rd+?f]"gLSt2LO"1,qFQIYra@P"e/'gH=(W"-rD8WCDX7i)o0G`P;H(?`4li5a[l9qok^bSESmON<%\VFAf;)j8u[?j7bI&tC;g?]3WF4A+LjOSoAqsDX$mHd7]-,jsM,?XT%Y"4Wr1o)1ZU)qe[M]DPHHdlLfl:Vem=7`=CS+b"(q0pT!%]U]XLRf.Uhk%!l!(DTjj^.7C`AtO#1K;F'T+cG(0I1>'/8[)E9IbrNWm5JqnI2-VjiDfW&4b*:iVkC&lg$2R=*G@(YLK%E,m$['o%>C)V2MZ/(tp<?M$BpEC^o=90hQqI&q?h)6E0TZ]_&V^DpOdFVg[nNdmOjiO\%uu:C?qY*@8n]X;Hk245c\P\n>C0'kJ`Y)^`E1)U%9^WkIi]hubIC%#8kM^5((5<30c+rl0]TNQHO432DWSp;*#@Dl^$3.gDI:;sgbjTb^EO,;ln6*Go:T3"Uqt$JYGDj3%r8uKqg0]^t%LgG?#&*jbdp$GL,!9B@%'X<7Ig0FP2n#ND$(Fe#3?B.?<kH74o:3oGjC#6'c(]%78`cd-,Ao)j)D*2phS>H"+B&am_ghh1U0Yd-e%FXq(Nn#@8o_WYr0NK:9EmK=$!`a"9dW\qN(*U=imUNM$7['gW--^q7-AeMp?ZC4lLnIBDaICX#b^&4T<5&Dp&bt:_3[mAWG8D@_A%b$ZJ(>a\Z1L:aWp#keesjI"5:EVOF[4=A0s4k$o8fUFj=/An:u5DE>3mUE&AqRNNq`EZ#11WsWs[,iH<!gaOBOZ4kub-=6Y:g%=O%4+t[BB>nZ'c0!@L>C7[:>0koYV7q=OV9/.bR#S`2#4WYXFop2Y<jiO"fBbj(F%@?_L!-?J>Xg"KPROh6bKr"fKB<_pD]p'/*Jh50%:p@uZnjFGBna-.[P@n%->gTg(/@<J%'b)I6m[lH8DBkPhqL*'12Q=:XngKmTUPa-oP,WA',!jkY.]ANJD*U_h5HL#X'GAgnYY&5j%oH4%,.QQH)Pk'<+-'tk!MgnhT8*D0bKcZp[SigQIT2Nea!VSt\_^`3h+;S&#e\9L6jE/+[glsL<fZ7cX\7tfe`I10M$cGb"kWN23%1d,`fp4$+80?FFQe+KcDqJG".<19>QQBPMLq$A]V=6m8dGP1q"hmI&f0B7O#rt#-P]X"]qZEc#<BP?8;0$UJ!Dsi*5)pe33g%%<U%@TQ3<c1^;U:&D(jY;ZD50;Ie0@/k=eZb0O<]`,3!6^,s$kQ?,l$Wkgm:%YH]Q.P7"kPm%!YKO:dP!#__`JeNr]r&@3I!8e1'q/V$%lMo&lD)[ok5+iaB^%XAHSkB9I[+;%FLS\BKmn6io^ZU*qO14c%Def,Mfr2EhiTTBUns<"OHqTAW5;!h><m`e:CcYnAd61KY//b<d%;+bo.c)isoXd@G0.G*Le1f&1l`N?Ym`&g^_[qqtT_;AD<K_Not\<^or\T?)9V8Y>$DQsW3E/UEhi&f\5't%0Zdr_/OI_8CU(s3-<%>[9"P2Z6^`'mF9BG_oT\c1GK$gMTH(4nNWkMIkcfVkQ;k.\jgY\jn>q72_[a/QTj1)UP5;AUNY8MkTTUh'4%E"<gLmr0D64e<@"9%CjM6$0rSmabZ5J'[,a$he-H7lZ2?%2L@V.Z<gG;T@h@:]XP@o>)T8H!W'tc4Rt7;:Nf7mjR`1q@%%a5"TcZ=6JnqqYYKc`VhDp1?%J1.\9)l4X`nXBq&gNKMSf</5ADIDM(9lj%9=V]9UY[)Roco%@uCt#\!&>g6)BY8"no.1F0)=eebQ=\EnZs'j$3cD]#=@"q-lL^5p%@gd;l/_ZJm4PCcF7GX^hQc?IF%\D^$P>e/lE-_/;9jg<VRV$g"@Ok+F3OqJX*@l/QZYX>4$Y?o^CqZQQ)eh)"KrgC`6#6,*$;FUk%8lk-f(+I92d+6c^?63O7"/;HtPY6LnSjb09'&T+1CT`dbGE3<_@a#=*M-;Gt1]/T?+]+W!`jfS^B#Sd2_CQL&C$7:YFU=._1P3$W%[;Gn8GntqsqP6b9[Um#)U4<Tep]>S:nW_7T#J'qNfaMt`hR4Go>8T@;8u?%gG:!oPjtS]F8HO8/gJtg-:]fFX#=2FK3/pA5Ht7W0%#[rQf._6g_gQ+5>>Wb>!1g,@5_/5WR.0]jug85Y^_fDhlIGCPI4'80A])8+mkq:GOaYQ:[$Fij\XFQ"lJn5RjjZ>rZE2NL]Zesq'%q)_=;K;dPuHq%j$Oq!^Kqs,*92Ke#Jg]4E5M+\CY.9hO$lpCGoC,-e$DjWrL]#.W<W(7ATAuN`e(:T[.m;K\;BR_Ud.*o1.#)&ll%d\:hH`d,q*H(OGF/5%AiK&MNiD19[uPY==[k_WJ*h6qQsRd10NEHLQ\6#/6?bHoUtA!<"*0VmJ5'A7eC'&[mJ4gm3qfR;in\$[>G%/B\VXm:[!=&<esqHF=*8RV@(3!]gN?6d$_p0l-k"W!!Q_pO_fuAD0nD7=$Y1c-]hb8N2pZX@RWL;f9S((jNmBe+aD=K"h])nsb:E%fufDaGe+FrTp$uY2WJ<1H3"2/GVH**[)%FSV?.bm%n<%b61-/<IZs8a>80%9[:lGRWWmHg%kWYM_nu,Bbl]ag'D5ERQ<UUVE)N6?%L8J:k-kVeu#Vr0`I;0uDd"p36&nqpGcj`c=1Ys<.W7-4d:7F;$3CG349"IT!h;C3f9"/Ls[-/'U8f*IP2ed=i:%=`1S+Zp@JQI.Q%:Y-qp+`\\8!@`PeCXf1UHb`jH"VVC1p^XCU"=#3h)>$),jFPc/a=82Dn=YqP3:'63)06JNDF?N2.Wo2k1+,C4Rtqji/1OBN%?jl6%BEdO6&-eVWHoe^$AX.i&"FQ&333J9cM!$2pkc!5=EuRi2J3jsGPH&#8(nWj`cg_lP"XBH]^*;89c2hrDrI\ClCGp?3JT]=,SJ36l%F^u:NSX,p9lQKkUlJRAb_-PHg/:^e\6mL,GbcV+++BG2?]lkOS1nlPQ?SKti;BQ8>Bf@_e+L\E!@aMP3JA@o8VlkmV',%eUS/d^5%B[^X5kp=7!Q:Q+D`3lRu2HklPJ1r;?A1Sjn,9;<g#X48]1)<uF7;/?:R>c55[YUSJ,T28;pl#d5dV5D^27+c$<<A^#EqQ)L&_ZDV%R[3)TMldlfSL/T7mk!<!K"_OokkWG0-aZcJmRSG$3"YTO)'Pe?"d6BQ,_Jjb(Ih#4+l5qodsZsaP(;"M.\b0DTQk.cHY`aeR*[_[%?%OlA!0'N<,kPYj:=j3V"pnXQK'a/'8T,fS#Eil<D$/hGk1O,H3WuJgJZ<Js,,T0;#qr/jNFc4NAu/4G8-X]YFeGsNq0T1V-@n-5%QC-+Y)6t/qF(l;T5!?ko=JnaFfKTq>jcLZ1HmJ!dKk>$B"Aq^;cdj>Pg>MF)%Hn*"_0S52)S4o4<XM!/,6\](Ca19$?\M4O-9/\G%U.lg`KiU\pL+pS!PJY;ocQp5:&`dV4>mC`\VEgUSSkH7Hb+^4@8dOF0%*Uh.kU8,dW'OB/80a=8'>.iF8$:2`ND0OEFqceGq9\i$%4e7,cngb+j;RAt"L7J<2A"=PuCk)s+27c3SoU@*gI^=oAQ(_6)`$&V+#VElFb/+o*&LXI=>-NJrLdltI@lRL0fi%GS_$!@g/^hS?%7kNXL(g(:=R!&_Y()13S3k,[:%9MoE?4jZ1%3YWqHDV'Vceo&kTqrERQiK)0-))tp6k?r^7)5\[l[l^c?]i8l")J:l-A&3/9ijl.%p\1-76F)caQ0nX>,\e?o=A&mrOa&&8R])AbA*H0`aB.:$BQAof0pDhj@hBco[Ut9`[1oj.-)S^6%uMT6(2YXhks=?[7VFf*Cad7:%`lslcP@QmW-rN;t_?)A$[5acYQ&YN/^6*.q]i"f?5Hr#c.0Cj4$7&S!OIND_s'T"Wlom<<5kM5(qMGGDM7JCnE<W0C(oGd!'rbrB%^C^DHqkCKfQjhIZSb*G],&BoA'bOKdFlhq#[,D-R<^3Qf;/X`Mpr=%%FO=>E@cdmQa_]NdU#q`h<gaV*0%LCD5gf>CY<A)],,?F3%NKjX+^rN!5&_9Z`H=K^]X7=,B^'#h2ZSZ.AA]Pb4Z=S;LWl.bkfGs,MO]J@n4h@^R;kM!b/JcaBjoPU[82upSdSP%5L_oPGaNU=%%J5TqImL`aQLS?hfc=NJqL(]ajAj#=qi$6#dJ'4W@R\S'7LM+.Q,-+-JTFZkkbac,#E>12Vo[9BUlG+-N't#_]TnU$O+FUddM98=b%;3kZ:BDJXID1ds-#P\ZL'+QbJ>CciF>`2;fka/LW+H.mY/*nQkQ=VIYY$jc-(l^tC<]SgT@'Kh[B_='i`@`>)?ldUJ_J_]!-@>k%%ci@YZ`Ta'**=,]-@03(#;qobpDK.gU?(`+2L%H0YEG=[5?q=Y5jg#^N]%=KHbTK8VJF"C?K!#ui`_Zu/4GgD/Fgg(1K3KmfB0^K(%YsehDp4O'+A(W!t-QU"_[rd'*[^7IsB6R,WWZ.?Q1HseC\c]%35N(!u`W@(+JK6H>6PC3,=['Tr@<I?,7oC*b&0"5N>*g#1PBb8.%W/M\nS`@;5)4naHZa$jl_#>oB32BY3'@d+:=e*ALOd$'+GLgpgYZ6K8/&iO$?>,(P"Y0s2d9nJV)hXdRg.8PI2Dc+K'9L*;*=4no%XGp>`"g&RlhfTB_UdIh/A.%WMHH`;o4?im>gONLeU_?<\Rit;-`8DC:=YseoD9NTKBo5!i!M=JPL8*Y*F,)`3A#O(Y+\`8jb"!/6%6I<0e;]q5<c^\G56qJ$U8m5oI7ViR1IbVFKbeX9h%"*^)V.`EW3LOQ<hBHcY!?"c=g^rdRDhAErGMF%:Cqs!DM*q#"oOP4*;/hKM%Pu^.%KPW8GEl?c>Z)n"*+:6UmaOCgU?r[=ZO6+LY/.kQp-!)W<KnhKndM7AjBdjN-%$(hX:1W4u.'TZufhnS>;7bDB`]FN=(N6Pf%&qQ5U6)Ar[pH/H3FCZa:mqq9T`2tR"Wdb:p2EXu)N0XRHPkdkSnW#H1?WJQBjZqQVM(^;RQ:Geh"!,[;*c69%Q>LEcikk-4fuTr?%dD@7)"q+%8Zqt*]7i0BJ-4EX/@:0HG`+[T20'QC8k)k\kZEDEO-qkBe<YsMi-;alVG$Qc`/<JgI"((bqD4ce.i^@5mZ[RQBP6IoV%>Jq383tq9%\:o@')ki&o*#7?>R<ujXCu5uRIP$pf(,k'S`5f^^3(SP=-h5HCEp0e#=1$TGF44E..F_gon:(T_o_<X=npP!2^h-po%]L)l6BC]uiQb6jodgjH#@@JK6_`mf_qPqSQVT3"c*NCo-!0trO@l&YQ>mi";C8Nhm]*&dthIY*XUg85M).9bA*mDE#cp*,jrRe1Q%GbWFo(.@jK$kSuAB2>hPYL@eA8"C+"Wrgn_lgS,SA14!S9r*I^gpr$SY&!dMh\Q"3M"e/!8mL3ueS'dLD6=+N*?9"AmN#ECKV)\/%a!(TgP!N@)%U=IkkI[DGF4$YHfZ`^<R*Uh\S7bK:"/B!-5<&)n&boXFm'`:U5Rdg9'Yecpq(WJ:h/1[(3h!uT>`Vu@[hr`$AS_1W%+++iAW8G$jMVdrkZ7kW=$V3_P("Y<"2YaEq?SZd,/o]ShVI9H</_=RaqQU1,]Ve%U5ndcEbT(fA=Y/R*"2P%hnP0cn\fcnjLg.1Q%n/W?"7Y@fRiipLY,Oo]W87leB75>A31jm<L`cbME+0p!OD!ZBlTk>6Zr(r:]Om`!ji'p;6]d44'j['37^j%$e6B"oaMr?uAK8.Q]%--s@AF;1o=Rj=Aa*I.L7[1Vi;-HeYf%Z4Q1KX&`e2#&o$G6+h^'k&)&]F-="a.s+gP-EWth')r-Z(5Sp$R^X2h"TG%Nr,KgB'056%$BP?e9*G)bL+)!J5SUf(7DRPE"5<o:,m;4iD#blLm&tBdon6*YiCM<M>*O'fE.kZ.Wdkd;75CeJ'*RbU`9X-H,(f$a\;_%)U7A;[%_F-,td63&M&5S7/%Ba'F\;kF2EW]&TD?q.sS)Hi"atgpB^`I;2qA[$QCt=]`lA0e5r"[Fs>F;3qoo!#+L9Mdp+V>\2?Z)AW_\4.V%ma*)82j")<gk7h6fk=lRNZed1%5#Lp$m*W)-\#g:@I_9JFZ.WL>&Y#iC+OIQ6YR/q-DL";Fe(N)f!"=GU5$LU4S8"j%V)`K+ld>L%_9ga>$NgBb"<s84_8]nKl?E[p5.a6(8+]i\lO"Pb%-M:0J1,Z[1^U]r3lde-=?'Ws7o@cm"-4cJ;B!3o&rIrO`9#BKCIc<;/3Us!%PN`_\LT2rijNJBrE-,1^d-8Xd1aF]o^55*<-X:7:#OkrM[_rXo7jnWM]."mtbP-ZdQSu]=(s`aJDJ=&*!t.692gq@MF$S.GI&i!J%@NrBl/FXcM5j'Jh4<i6j<"QrY--$5tfS(\<_9P(-#4f]`_Y_M.n,l7N!=U9n9SL<:cf"Y=\4LD3`5OaJJC0d=TS9L'$U,K*JrO8T%!(bb%b_T_D!W_6HMTLiFX]Rd/.[d+\:3K#e%1$+1*I,^hBKnZf!+?2R1p#Z2(Y]m;gHPAM8ipi2,'b%:RNNM>Rb?'kYW8:h#@4U[%jtRO9os/@aRA%SU'".qjUF]36Ul0B@;0U:*DfIpm/[E^MVa>e!3[$FlH&af=cg%aeJ:\FGX>:t+dY]QL0JXakG!Ggu+lItZKReWk%$k0Qa]B(8)Kt/toR3osD,W1-2gCcjWWt.1VaW;3npmpfM6]cOI1ddY9_(K'KpZM*X2)#I6;[f;V$/9:)8eB@XAcG>h/$W=fF:^,5%'Ab=m%JVG.Dt+SV_+RCS$YP18RM+dO"PX^F.1CFD'0AX7BW`]`-drAM:r*ZWo4PZ&MTCFMMhd+Sn8RmH)XNF6BIeVC!QE+7dt23<%'>YJ1.-/7`[s<6'%(b)8U%u\l=e5`4S-WGP5*QA_2B5bd-nEM!A%M^B25'AW)akSMSW*a#p0HCR:V^t2(;j2VFLYH+5W4!=WLH*<%TMgt#bJ":+fO-q#&l&?8D?a#j8-9?NU/#rX*F9d_'4)1O=GR5+Z#s*-i'hel^gPF^b(OOH[\C8NiB`18'G1EW39)gi+q9AY."nuZ%Nna'cJP3VlJ(_;CP.Y6-!8dsb(>,"GkNcRek_Mo"RmZon<"'$bp1H)^K]#?'d4ej7;NC17O"fS0I9_]jLP-c[S'^*E7/nlDPf1!.%Zl:nk9o4<ee/CbQfRMkK'!ER*64)ee.1='^D,;:XY7>f1@>gS1%9)e2e+eSc3kVJsQPjn<#hD9r*2`i<fia_#3K.T*Nl02a[P@]7%SeAUHc:olOVs7*:Cq-H4K&JfP[",35YLqlj&llp5YnSS,gLA]'1dsd<%-)n5NZ7MkGuubJba`VU?`2r+><LBeggNJ#d[)P*@(7dF%O!eU6X;2LC#[p=5,<=-qq\s+kXMPPC0m!sO^/pWi,?g!Z*Skn6#SVUi)[_E@TMAeQ^>\U8;?_C>P].dMiuOkB[Fil`mki!/U]V37%*ffKLfd8LjcKI$ba9dM?V:Ujm_:pX?.?'Wr1mof0"\m9Pig@%q?U71i718oiVMlia$iVsDl-a$].UaT=^sJ;hBn@Z^!8&F>d;s^6%+kd%X\sb6d.,12n#Ro]jShN<%;SHD%KEt$M9\6U>E<tRMOIP6FK-&4+*2,JXQoIkTM-IQ(q;5>:F=an,>PP@0!5+o`]/\dC:d/gk%j'F'f;P<,d#g\>dMB."N\fte&9e8Y*6rkqE3XbI:>BDgE&r*8D:pMsSE&gCp$ZWicnk"JYO'iU$(W[S;\L2u-ckGZ4%P(X.S94m-%Nq]fY`d8+YR`Bke5@DMfB0ArO8>B!kBE;9L2V;[-OC/Xi93==/524LKT7LGYbT]$b&Ou/4gDp^D3=_]7a@L"9BJCC^WC;FKJTMJs%e,@T\oiFQ*%[[oN%6p)tN`%PH93g^l!.$gFd5ckKqRL#jpT]*u)fBp7)A0@o7NqklR1J&MS<j=8%d9t2R1>jpiu/M$_9a;D=@gi$%=H^YV+o^UQj[p!t7pH-'7^.PV&_rY=3/^;fLFHT1M880d.TU'],X>1af'dN(`sOD+(.:7uOG-4+p<*F@!,U>jB#78WHiA5`e71!c%@:kTHYj4EISqS"&F1#Gi*;tX-ajCd!+*Jumm,eG-BU3$pZ8>?4*al5kR]f72S)%)e:[SP_/b5nr#P/sES4:XhDaIl_r[@F*;gljt%"E#\t2^lf7q+"U/I/7f_E,7"712sq2>>"VDD^4=p#i74kXFN,SrK_CfFrWX!,0$B/f8Y@'74sY_14Spj7JM?lRK2Je0HJ"aZn5_9%*XhhsGK:a.Hc(&$9i-VM.BY1]_jL<-;$3*U/GLhH:.dpe#1>2I;*T)j#Ou_qIB=JK1YMYAYWQQH`.2o9Ylik/\@<u]NK&FRkZBW)%o@Q-7_B;,sB(VXG.uD^ffhHCBU89C1JAUWR1Bps1\uF*\?,9,i,^H/=6ek@dLk)5'TFI<2#Ss0g,]>AB.(BsG02+kBmMZYAQigiG%9QT>b.pZ\?@hV$Da:cpcY=h6A&SR;cjKYp9!p,A."Ck\;5f8NloVKAUS7mPki^i2;C#;$+(9kIAe/:$/F;D-WRIZRRrREJanj?la%N#%Tl!LQY0goJe!3H$=3Wil4J7"1#?)%E+EbT.j3NYW8<AgG.]).Xag!jVhs1n\)8J.p-t=C;>QCLVUQF2IQs_n/1\ES2&eU]CSA%)."T$V85"-%\"HV$I)"UK!7'edkm%Cb2OBU2!>4)8,Eu7!c0Qnpsu!qA1Dn^e6e5]E7PE&_.^a>]-"4*OD)7u/.\?Y+DtqKFMu$P%[^[HR5&0V?M>Q(?JHca(a@TqS5`.>^/+NJ?;$bJQ-E^M<3IsQRLOn\ojWJblmI2,d'bLZc[l[)ZU"(9H81F@p+DkfO#_a1RNZ?Wn%WI^8T,M5Ffh$X,mO=YEuFGo%]=F$_I"$Vg&3b/!MiSIEN/EV@%T+j[bChLL+k"QPg\:q12g4`(QMRD,HRd^,hiO!k8WAlq7Jd!oM%I14+CIobosJs@`,YUroXc(9W`'SS5sn*SO8Q=+)e,!nLL%*]9rdkoI,4<=7-#]+i-%G)g%ook?M`Z:DNgg;i&1aMR9<h@8G0!TE>%_0<?_0f`d*Cfl60H_p3?\H:"/&2f*`O\mm0IH4,TNhdp*X=\6%en2F^@1DCVj\lTNgET_;p8hr^3L@UGb\UkcM+1%SL)&l]R:m1#%nm6u\cjr+6grD2Dk:p2LV0>L-K)L=HBJa%WYCl;.Dk'115fe^`0IK)i>8`,De@.b8(>`^_i+:.k>SS5\1dORA.qs>M0S$p%=VA@K%Z1n=/U?$R74UqQ2hsho;65!W[N#<V^&knq4#2%#5.PHl)(2BR'N5F9%oHCOiKFp%OP,!*l0SCp,9\i.?1fOP%Tf"f2)>YZ&G2$LF%'c3StO[\KT4Q3TpI%_cGY_rWd0.(ef_@\7a7V\-K+]JaWn:XtZ@sujj$!Y>um0s4N(_30@@Wc])nh1EhQW30>J],nZRJ27bJaXT#%&*$5))4`Teheu4PZ+4;Yf>.q6ppWqr!t)(HK!p)ar?5d,2R]Kn/-3'#6B-l_8UT,DrHJ%K)aA@X"XAV#6+ETY#S>QA1g8PgZqqWn%cn!@lKF+Ud7\nP]*/I7/0]$jKS8E".^7td:JP8XIiO$9VMDR:RUi?cIXrL@2D+Nq6P@g(?66]CrBU7SFT.m@'ciIa*#'_-XBji&[%1^;XSm"@`,*G:J'Ca"BfTk4;i2tDYSG_RD_j+M7#MP\PaQ_O5KdKF[3.CBGjYf@efg(J1S_8K>-aDBue6EE5b;uX.Ue14[r1-A.A%&oifi;m$^P\@`<d%B);W&ePYbp7+QACqrI:SaCH*)ms?#<#c]^,f(A\;pokT"1ERhgd,oj>'.ZJE"@<3%E)If/pE/>."Rp9mVp#Y%B8U+%-:_X(c8])jg5)DJ8*4M/mLZSm!P0K0f&?f@l3^8jf^ic!8aS3XkfS^ZaVf%VCE*?E'=<:<89Y6:_XrQS2kW-ET&Vmc_8&B2%f);+@oG+h1_%ZGE.B'%:EG>P:<`m)HOqVaVSDpPn?jP5%3B3tj^>(tU!(INTF'(F.M'NYD2bYKeVnk5t#]g%S[_jg8-s4+o8/B_J%Gjkcr0m$cTE#kRXi)'"B-m)Vdh+o1p;Tn*(I[Uqmfau9f4[=u4qs<9L^^f+hrY8B)!fBC?1g,m`FZ`CX(Ub\?f[sYbTbNRYDM/97%9A75s=L,/0c1VH3b\-E"B'TK>`/Pbt)]PXk9KZg;PFZ.A+>XVOdfpL4p:qQ-J5ST:oL)ab:rG/8'A-m<M8YMNLiOY5$N4':>LHo!%&d&8f+t41=_>:WTE-d-;rLJAM5phhhPNB(D#ng+!YB8&38$'RHr>+-[\3A<,UQkP=#ReJO,t&/W8d>A68B68V*]Q@"^0PFA.e%iV%8"/[5&t+Zb14I2Srs8qs)$e67Onof'j*6;hMJt<Pr07bd>[dS:/<.p#5E_"iZ<R+:/<22/EQUeZQuH9FJL&4N>djcEh,.EVWVMjC%A]X2Bmr[7E)jY5D,0(`4/j./?/9+c@6]74XKoptHW6R3O9W@XEW`UOcZ6G@g+McVL\,7\s"JQ#V,j0+N"&MKD\42t7d:3-iN?fX8%PMo.%D.rl8[$r9,d$K<>'/U7p2^DFt/-u,*Y5r9kq1VJ'g'.uK`tA`@\6t":\KZ<Q+skYRFdD*Y4/9.3f%dd,J2W>aT.Z#*O:]UJ%:4=E8>3?#^q#+H^3-.\5B3V[W[NksI>?Grt]LEJ?&C^@G!D^7iMC;%.L=Un-";^!;3f_CHb2Xs'c-jS'UIh:9B6WZ(Dc?3F\WY+n%KG.+Ed5epP8AYg;A)?]VS??EpCt@UnCpjoq96.Xh7];D7`X0ORB$#?#g'Cb2I`lkU^P+JZrGjPd=Rm,+Og;mHgmjmLn=4;#;u/)6%oALsi`%!=V;li4<'%Fa%VWI."iHLfc'W&cWD6CmhHCcfa["r3#;$j1dJ>C:9It$+\b`P;Z.k,ZRM2X@Z01?m.E#1Sb8PHDX6Gs0e%VL?Gb#<m&!4<gSR(67OO`T9]I@"fjR!dcfR`uWFU-"2q\<ZnEG6s4sbQRur.2^%un$M-5i'Zi$eC*ZYR^^_6l6THG#<<lE=CdID[%p*a00P,IFma_7q>mf_<X-jf#EIogZlQklKJ_2op%9BlPR72/BuRhm$gf06$U^]d7KL`Vdd,-k`(V[#VDHHMn&!0.lA$pJ.n"LtM>%TUl5I$_33tS]4K2V#pmhZnX0S5c@suQR6PPK!!FR!c-mahI7eM79R1[18=:.&'P/U\Vle.KAjC.W"tsME]nFPOXOh5TAbTh)3V0[%:W.-Y7&)_29K5g>!B;Rnr:8uh!#3h"9ZlKX8.%?5dVW^g1p5tN?.+q)gTFN;_)VtQ$luAcOr]Ho,&>]g8[*=FCCDg!Pjr]N:LsBs%M+a;iWo=pt[-.o6*+o8;(6nC/pmq[34kkF%fspU@;R-\IAAc_5Ilh1#R6cpj.7Hg5PR3!eRHX.,(A)RSYJFP_b!Fp+0,9#UDZu\K%(M,Eo(3%'8_&X(J62dFTr!7i!0<f_l'+AH0B*i&RXP!4SMPDbaOp4KF"t"XYDe4^3Knbt:*(5ZRM]CY9(LXP:%fU3NcOlF`[J8<u%:d-_hEW^e66-=7:?n'fpW)Ck2H-um\iqtqrEQ/Q9JX[GbS>d?i.)p4fWuk#LZ<S^!(N]cEROH\L`-@ApZ@);OOSOM_q.!"LV?Fue%`hbK6B!]\?:Hd.%bKA5olj0sXilY3X!1\QGobWLu,&&66!e<&aEEB)pJ@dG0@!i3_U*cVb!m<i)0)L'%f'u^U4BL^qh&H2!^/$"g%!=dGR+N7/FaGHCj@F-3$[Re2A0-M2Yn:=-3`ZgtDqe"$;=VfH[UX:8a*5cdd0I2=3nfbBUQsa?Q%JkuEB6=Pu3a)AC"4hktOI!7m%c"b>sBe<^iY_J5BN4:$T`%2S\0BCnVUP5O[$is(_&R]%.XuQ^0*].Cl-mhHo;G>/HfAj\0@;gtdnbG6$&NG^U'"=X@$r?Fir/Xrb%E8$)m35O#ETaaP6`BqGFs5L%KRA&a[I[(c'F:;?pr^5'd)>q/#A.H+I60,QW8oOtg!YG.L%O@M2Db.CE;32Y/@%A=`=$C:`8JR5\%)Y0j3][n^<KCCk7_soUuh<E>2ASmAsn6tO>>)m.,`U`KeSS6tJ>re5:JSCRsd6fmJB>Ooo-'%<^#qN;>;`CKVQGmBj+im_B'k_57%r08jZ?ns%KP_]I:*lN;>DUCFL,E.8*!r6d;7nIP2TP^0g:T+X%L@FBM$AYrjGaDl0%IGs+g'A/*%ao/lg2,[9K;)i-$mkV!+nk,_%/QCk6$mUX0!<SR[#:H>jjIf>E!<%f"2^liV70e3R;3]n2OB0[t+9[uBAtZsX/1De`;,Eo.2E;=T#C$qq%<F7"=K&"Q462AV%7ph(%aPYqj8/"K^&/5g'^D/Q(kW?[H28\g?^'dT&9JAe"7"l:'37X*HLq#?C!OXf&cW,M<WAl1T0Q_/@)+lh5;^s>+U,@"o1<9(cQlrM6%K3-UnU6IUD+oK4aMrBDE9n=Z*D9+Ie,XI.uHZ[RK*JDb_6Fr$Aq,uIW8<Vu\A6T[0OnsZi39M"c(/iZs-husr]TSb>6O!qn3o\Zs%M1EAGU'Cb2a8PL1#ma(iRZK80O#[s%o+R(e'MkaI4Xm@087g`mVD/"&^=f1?S4)LoRZ0\.9Z_'[V@e3qWGdmlZo-2_34o`>'s\-"%!NBa335`gneeX1rTZuT("_8(Zdt3U93.7Y-$X3'K[N0?GHtQ)%55639K(Eqt`@AB[N,lFL@2d8tmj=s4=WHX8JD7dQ`KaN%b:U0N%m-"^"):!ud!LqXkO986[5Zp6s(83iZdu9I,UUI*p)/[%<icOiP7Plp=:K3;8*`U&bW5J`n29>mWh@7cT=&P]HH0SYu%Pi(K@.#TD%-&4n?q7Em#SDtF54G2>ffhlo.EgmHN*59C>Kp^Hq^SMfs@2)iu%V)Ed1V$D[Ut@WJ<d7`(J]/2pYZWjA_\B=cb@Y8(&1*;*'aIr.%TjYg*8T>L^=4P+A6LS0`MqF)k1K\`J$@re"q)Ibuk33i+qqT1/XH4mPe7B9dr(mg"2X@FRqHa`"[2q.:[Yb]sfLY)0%KLL/nhP<0%^KfW*UR!9X,\KM2TF(b0'EkWdMC'FpTlg;k4Do.-1321P5iSi51i3pNRTLNS]te>nMA6@6T8dT>KFXND&Q=EunJ0r=dSYN]4A_'F%!^KR6JHjDo%\kWJOl7C4`R,G4Jmu3Qa.VR2BZ4U8?t!;C_9"oT@s,k%?3i,VM7q&D.]Pn2K`teM%:5H39uukN0#:a=f@Za\$\-+/%1Sb`LL;2bYBn0LUlc0,Z"ppn^W4T<KZF[p^6qLsM''\GtW?RkM"Qp%o3$m*aEG5P#3M%iU&:]FpT5/)MK"TK%O_5i+F\n[9cTneG%#2S@?@+0$M:`sRo-CuOL[9ZQp\K$-2-ui739G%HDD,8IHZ4XO_G&o,\=G;O[=l)fiOCMph!DsQ'rFOVZBub1CR`UuA[M8lH69*+p%%N"\/G_SkjV'F7coH`B@!^fphKC=V;R[im1,'&W6\QlJ99BqGp>WbbI%*r'Q>f^_QdQ"QF['3ECM2F8,;XsPeG+r#DL@b#J\`sYV%XQ)YHE1U28'gB0]MtB7@&jM&tJ=80G4DW]4l#7!9K'T&H[Mn`.Cn<"?aE?F\!tU-q#X*/=PRHrB%i:3Aj[c%=";'3$!jU+43*?h;%Qn.nGT,7gh.nWrU=@m4Y/[7-=TAc-8+Rl*b1<)m/"qKV!r(UgO6Q;HSQ@P0[l@FeMF(Sn="`YS0B54tt7Nk_bXHsOG'Rn.5XCHuT%5&RU!-V;1R.=og:pDi@HE]"d-P7T-IL*7F_QiZB-Kr7W4o+Z#Y5=L*uT#1P?<rj"_)a8u^:gCG\.9V&r'eB?U#@g1q>.Akt]B^Y[%**:Xa2W&Q-kG;j4Jq,3TPWU*pM<2NeiFn?1-TJLSp8BCBFgL-3;FXRV0'P`B`M39.Z$*pn?XXh+,0@#]Xu[X=8_\i%Fl"N+7,\n^%I&J)&oS9tp$7V0nP)'FBbU>9Gq*BiH<%GW!-41iM"=9H)*i[VOhFRJ]bAGE0=u>-V@]!bWoA<pkR$(9`83Msl"8DRU#!OsXT>?Vr%V<5U'GICs:SrX<QD7Y.5j5X46T,KcF0:H6r!!-c=(#h;Y_D=>0F+jEQ0h0ip<!_M$NYnjF^*6b5-PE=ZY"[HC@a.5GL;Nb#TF!76%AQ+ha&lp3G)Y5d[>r%I#Kj*I1*'R=*=ae^2N2PD3Hl8!W!-`Kmia_,hd6(H,Bb.=ZIBc./fK/&UEU[-+$t'5_(EOPu_9Efk1HJ`<%YmXmWZO7J6fs<1m/-3_)1tL7i%9*61nqdJ<XCsZ%K<Y6g7ruRr&N39%_9p)K:n+;k5$X;u$sK=u7@CtS"-ur+*^TrqM]mOneDJ't%Kc#?VL!+M4bm#DjCN6&[%O'j%99Q11p_CEgih2jpVW30H\fB3<cI?>\2uN^jf08`e.2>q9!osd'EWS;Mm)6f^mUO7X:3M1I%s@Eu%?9i[r)u_Qd1#F+_=e]'9+V3rJ3Dl=*K/e#G;3^4%ZRa+k1V$5312([\bmftp3.bQAM+IUH8bgU#[/h(e/)9S_E!.``4AX8`o+R6q%h]_/'dL'uDG_u4V55%%RJ7\E*nDcAGE>*[67g7!P"L([E4pJn2Egf*^aH')f6Iq,Fa*42fQ??t;4LSpC29kVXQ$dZr_XP-/I"hor%&k=TS,eV$m2aI=1r`"!0&^D=pEr97nOmi5(QO,')-ioM9%?g%39H#0_kseLc*:G@n$ab#HZOEM#6jTU[0js4h7A:P-?\*!H^!6%8%R@YD;`(*(GiPHQ%b>E__4NC-7XHR1sEFh-??K/gP:8J=I%;.E\"pY_tA/`&g#KRKk:hFOm"!r0/5AcWpL_`(e"=h"Hc3ERfH!Apb%*baMa.t0/S7nDYg)oE9F,D79OSI*UsNJFm>bsZjZg)s"=d<m?#5%F%\G_A]5M9O#:Gl/F.:[ih-`HH&XgVX(S$]eGI0.o59-Z%Nj%Ka64_7d[o0IDkr7Lk1]"_["!@*gC!,U*-EaqC]'KEBY&.prH3MpuceNFb=qFbD0X(LK9.G9"pMY%4[`N9+IG#VMs^F#;O-FVh0Rk%s'-Voo2>fMdiZkV-$I)n%$/ts!XsH7XVdubNDOXtO;s_*/;eYbPA,T5c(1`'ZTi_7rE9$MXPQ+iR\cXYl<gr>[9ddYX6nUS4XpDI%elqH1ZW:uBCA\GkoL\QKjQ+nNG3T#.:Nq5d~>%AI9_PrivateDataEnd