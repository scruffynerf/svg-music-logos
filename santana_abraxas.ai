%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (andreas) ()
%%Title: (santana carlos.ai)
%%CreationDate: 11/7/2009 12:01 PM
%%BoundingBox: 193 270 643 424
%%HiResBoundingBox: 193.291 270.6523 642.2578 423.1284
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 421.5 296.7754 421.5 296.7754
%AI3_TileBox: 12.105 12.0381 829.7852 583.2378
%AI3_DocumentPreview: None
%AI5_ArtSize: 841.8898 595.2756
%AI5_RulerUnits: 4
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -741.3506 718.6641 0.6667 1601 901 26 0 0 44 71 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 44 8
%%BeginData: 7386 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD1BFF7D522727202752A8FD76FF7D2727F827F827F827F8277DFD
%66FF7E7D527D527DA8FD05FFA852F82727537DFFFFFF7D5227277DFD63FF
%A82727F827F827F82752A8A8A85227F82727A8FD07FF7DF8277DFD61FFA8
%2027275252522727202727272027272752FD0AFF7D2052FD60FFA8F827F8
%7DFD04FF5227F827F827F82752FD0CFF2727FD0FFFA8FD50FF522727A8FD
%06FF7D27F827272720FD08527DFD04522727FD0452285252522752525227
%52275227FD0E527DFD19527DFD06522852527D27FD0C52FD0EFFA827F852
%FD08FF5227F827F827F827F827F827F8272727F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%272727F827F827F827F827F827F827FD0EFFA82027A8FD08FFA82027277D
%7D4C2727207DA8A87EFFA8A8A87D27272052FD05A8FFA8FF522720272727
%202727272027272720272727202727527EA8A852202727527DFD04A8A9A8
%A8FD04277DFFA8A8A8FFA8A8A852277DA8A8A8FF7DA8A8A8FD042752A884
%A8A8FD0EFF7D2727FD09FF7D27F852FFFF2727F8277DFD07FF7D27F82727
%FD08FFA8F82752A8A8A87DA87D52F8277DA87DA8A8A87D2727FFFFFF5227
%F82752FD08FF7DF827F87DFD08FF27277DFD08FF52F827F87DFD12FF7D27
%52FD09FFA827277DFFA827F8272752FD07FF27F827272752FD07FF7D2727
%FD07FF7D2752FD07FF527DFFFFFF522727F827A8FD07FF7D27F82727FD08
%FF52F8A8FD08FF2727F82727FD12FF7D27F87D52FD07FF272727FFFF7DF8
%275227F8A8FD04FFA8272752F827F8277DFD06FFA8F852FD07FF7DF852FD
%08FFA8FFFFA8F8275227F87DFD07FFA8F827F82727FD07FF52277DFD07FF
%52272752F8277DFD11FFA92727522759FD05FF522727A8FFFF27277DFF27
%2752FD04FF7D52FF52277D522052FD06FF7D2752FD07FF7D2752FD0BFF52
%2752FF522727FD07FFA827277D27277DFD06FF7D20A8FD07FF52277DFF27
%2752FD12FF52F8275227277D7D7E2727F87EFFFF7D27F8A8FF52F827A8FD
%06FF52F8A8A827F87DFD05FFA8F852FD07FF7DF852FD0AFFA827F87DFF7D
%F8277DFD06FFA8F828FF7DF827A8FD05FF52277DFD06FF7EF827A8FF5227
%F8A8FD11FFA827272752522727F82752A8FFFFFF52F853FFFFA827277DFD
%06FF52277DFF7D27F8A8FD04FFA82727FD07FF7D2752FD0AFF7D2727A8FF
%FF52F84CFD06FFA82727FFFF522752FD05FF7D2784FD06FF522727FFFFA8
%F82752FD12FF7D27F82759A87DA8A8FD04FFA8F8277DFFFFFF2727F8A8FD
%05FF52F8A8FFFF272720FD04FFA8F827A8FD06FF7DF852FD0AFF272752FF
%FFFF7D27F87DFD05FFA8F852FFFF7D27F87DFD04FF52277DFD05FFA827F8
%7DFFFFFF52F827A8FD12FF7E27202752FD07FF522727FD04FFA8272752FD
%05FF52277DFFFFA8202752FFFFFFA82727FD07FF522727FD09FF7D2727A8
%FD04FF272727FD05FF7E2727FFFFFF522720A8FFFFFF5227A8FD05FF7D27
%27FD04FFA8272752FD13FFA852F827F852A8FFFFFF7D27F87DFFFFA8FFFF
%52F827A8FFFFFFAF52F87DFFFFFF52F8277DFFFFA8F827FD07FF52F827A8
%FD07FFA827F852FFFFA8FFFF7DF8277DFD04FF7DF827A8FFFFA8F82727FF
%FFFF27277DFD04FFA8F82753FFA8FFFFFF5227F8A8FD14FF7DFD04277DFF
%7E27F827525227272752FD0427A8FFFFA8F82727FFFFFF5227F8277DFF52
%27277DFD05FFA82727F87DFD06FFA85227272752272727525227F8277DFF
%FFFF5227F87DFFFFA8FD0427FFA827F84CA8FFFFA82727F8522727204C52
%52F82727A8FD0DFFA8A85352275252592727F8275252F827F827F8272727
%F827F827F87DFFFFA827F827A8FFFFA82727F87DFF52F8277DFD05FFA827
%F82752FD06FFA8F827F827F8272727F827F827F852FFFFFF7DF82752FFFF
%FF5227F827FFA8F82727FFFFFF5927F827F827F8272727F827F82752FD0C
%FF59272727202727272027272720272727202752A8A8FFFFFF522727277D
%FFFFFF52277DFD05FF27277DFF7D2727FD07FF522727FD07FFA827272752
%A8A8FFFFFF7D27202752FFFFFFA82720FD05FF7D2727FFFF52207DFFFFFF
%7E2727207D84FFFFFFA87D2027277DFD0BFF2727F827527D7DFFA8A85227
%F827F827F8277EFD07FF5227F852A8FFFF52F87DFD05FFA8F827A8A8F852
%FD07FF7DF852FD07FF7DF82759FD07FFA827F827A8FFFFFF2727A8FD05FF
%522752FF52277DFFFFFF2727F8A8FD07FF7DF82727FD0AFF2727272884FD
%08FF7D2727F82727FD09FF272727A8FFFF52277DFD06FF52F87DA82727FD
%07FF7D2727FD07FF272753FD09FF5227F87DFFFFFF2727FD06FFA82727A8
%7D2784FFFFA827F8A8FD09FF52F8277DFD08FF5227F852A8FD0AFFA82027
%F82727FD08FF52F82727FFFF52F87DFD06FFA827F87DF827A8FD06FF7DF8
%52FD06FF7D2727FD0AFFA8F827F8A9FFFFF827A8FD06FF52F85252277DFF
%FF53F852FD0AFF5227F852AFFD06FFA8272052FD0CFFA827277D272753FD
%07FF52272727A8FF53277DFD07FF52FD0427FD07FF7D2727FD06FF5227A8
%FD0AFFA827202753FFFF2727A8FD06FFA827275227A8FFFF2727A8FD0AFF
%7D202727A8FD06FF52F8277DFD0CFF7DF87DFF27F827A8FD06FF522752F8
%52FF7DF87DFD07FFA8F827F852AFFD06FF52F852FD05FFA8F852FD0BFF7D
%F852F827A8FF2027A8FD07FF5227F8277DFF522752FD0BFF52FD0427FD05
%FFA8F82752FD0DFFF827A8FF7D27277DFD05FFA827A8A82727A852277DFD
%08FF52F82727FD07FF522727FD05FF522753FD0BFF2752FF52F87DFF27F8
%A8FD07FFA82727F8A8FF27F8A8FD0AFFA8277DFF20277DFD04FF5227F87D
%FD0CFF522727FFFFFF272727FFFFFFA87DF852FFFF27272852F87DFD08FF
%7D27F852FD07FF52F827A8FFFFFF7D27F8A8FD09FF842727A8FF7D27F87D
%20277DFD08FF52F8277D7DF827A8FD09FF7D2727FFFF52F827A8FFFFFF52
%2027A8FD0BFFA827207DFFFFFF7D2727A8FFFFFF52A8FFFFFF7DFD042752
%FD09FF272727FD07FF272720FD04FF522752FD0AFF597DFFFFFFA8202727
%2720FD09FF7D27207D272752FD09FFA87D7DFFFFFF7D27277DFFFFFFF827
%21FD08FFA8A8A87D27F82727A8A8A85227F8A8FD04FFA8A87D7DF827F827
%F8527DA87DA87DA8FFFFFF7DF8277DA87D847D7D5327F82752A87D52F827
%27FD04A8FD07FFA8A87D7D2727F827F82752A8A8A87DA8A8FFFFFF2727F8
%27F8527DA87DA8FD07FFA8A8A85227F827F8527DA8272727FD07FFA8F827
%2727F8272727F8FD05277EFFFFFF7D27F8272727F8272727F8272727F827
%28FFFFFFA827F8272727F8272727F8272727F8272727F8272727F852FD06
%FFA8272727F8272727F8272727F8272727F8A8FFFFFF7D2727F8272727F8
%2727A8FD05FFA82727F8272727F8272727F8F82727FD07FFAF84FD097DA8
%5227F8A8FD04FF7DA87DA8FD0B7DA8FD04FFA8FD057D597D7DA87D7E7D7D
%53FD087DFD07FF7DA87DA8FD0C7DA8FFFFFFA87D7D7D597D7D7D597DA8FD
%05FFA8A87DA87DA87DA87DA87DA8272727A8FD12FF7D2027A8FD66FF2727
%F87DFD12FF272727FD67FF7DF82752FD11FFA8272753FD67FFA827F8277D
%FD10FF52F8277DFD68FF52272752FD0FFFA8202727FD69FFA8F827F852FD
%0DFFA8F827F8A8FD6AFF7EF8272752A8FD0AFF84F827277DFD6CFF7DF827
%F82752FD07FF7D52F827F852FD6EFF7D272720272752527E7D59FD042720
%52FD70FFA82727F827F827F827F827F827F87DFD73FF7D52F8272727F827
%272752FD77FFA87D7D597D7DA8A8FD6EFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Linear Gradient 2)
(Linear Gradient 2) 0 7 Bd
[
<
FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDEC
ECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDB
DBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCD
CDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2
C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF
>
<
80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5
A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7
C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4
E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9
FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF
>
0
0
1 %_Br
1
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F20212223242526
2728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B
4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C
6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80
>
0
0
1 %_Br
<
80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F9090919192929393
9494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7
A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBB
BCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCF
D0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3
E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7
F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF
>
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819
191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A
3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E
5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80
>
<
40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433
333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323
222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A1919191818171716161515141413131312121111
10100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000
>
1
0
1 %_Br
0
<
807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A49484746454443424140
>
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDB
DAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBC
BCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4
A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A99999898979797969695959494949393939292
9191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A898989888888888787878787868686
86858585858584848484848383838383838282828282828282818181818181818181808080808080
808080808080808080808080808080808080
>
1
0
1 %_Br
[
0.75 1 0 0 1 50 99.7006 %_BS
%_0.75 1 0 0 1 50 99.7006 Bs
1 0.5 0 0 1 39.0625 80.5389 %_BS
%_1 0.5 0 0 1 39.0625 80.5389 Bs
1 0 0 0 1 45 62.5749 %_BS
%_1 0 0 0 1 45 62.5749 Bs
0.5 0 1 0 1 50 47.6048 %_BS
%_0.5 0 1 0 1 50 47.6048 Bs
0 0.25 1 0 1 56.1404 30.5389 %_BS
%_0 0.25 1 0 1 56.1404 30.5389 Bs
0 0.5 1 0 1 51.0204 16.4671 %_BS
%_0 0.5 1 0 1 51.0204 16.4671 Bs
0 1 1 0 1 29.0909 0 %_BS
%_0 1 1 0 1 29.0909 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 1)
(Radial Gradient 1) 1 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 2)
(Radial Gradient 2) 1 7 Bd
[
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDB
DAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBC
BCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4
A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A99999898979797969695959494949393939292
9191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A898989888888888787878787868686
86858585858584848484848383838383838282828282828282818181818181818181808080808080
808080808080808080808080808080808080
>
1
0
1 %_Br
0
<
807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A49484746454443424140
>
1
0
1 %_Br
<
0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819
191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A
3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E
5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80
>
<
40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433
333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323
222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A1919191818171716161515141413131312121111
10100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000
>
1
0
1 %_Br
<
80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F9090919192929393
9494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7
A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBB
BCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCF
D0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3
E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7
F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF
>
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
1
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F20212223242526
2728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B
4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C
6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80
>
0
0
1 %_Br
<
FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDEC
ECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDB
DBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCD
CDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2
C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF
>
<
80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5
A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7
C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4
E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9
FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF
>
0
0
1 %_Br
[
0 1 1 0 1 29.0909 0 %_BS
%_0 1 1 0 1 29.0909 0 Bs
0 0.5 1 0 1 51.0204 16.4671 %_BS
%_0 0.5 1 0 1 51.0204 16.4671 Bs
0 0.25 1 0 1 56.1404 30.5389 %_BS
%_0 0.25 1 0 1 56.1404 30.5389 Bs
0.5 0 1 0 1 50 47.6048 %_BS
%_0.5 0 1 0 1 50 47.6048 Bs
1 0 0 0 1 45 62.5749 %_BS
%_1 0 0 0 1 45 62.5749 Bs
1 0.5 0 0 1 39.0625 80.5389 %_BS
%_1 0.5 0 0 1 39.0625 80.5389 Bs
0.75 1 0 0 1 50 99.7006 %_BS
%_0.75 1 0 0 1 50 99.7006 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Offset Squares Pattern)
(Offset Squares Pattern) 0 0 55.0781 55.0801 [
%AI3_Tile
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 55.0801 L
55.0781 55.0801 L
55.0781 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0471 0.0118 0.6314 0 k
 0.0471 0.0118 0.6314 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
26.1436 52.3262 m
26.1436 29.4307 L
3.0313 29.4307 L
3.0313 52.3262 L
26.1436 52.3262 L
f
25.0264 50.123 m
5.8906 50.123 L
5.8906 32.4961 L
25.0264 32.4961 L
25.0264 50.123 L
f
*U
*u
5.8906 50.123 m
25.0264 50.123 L
25.0264 32.4961 L
5.8906 32.4961 L
5.8906 50.123 L
n
10.0313 34.2578 m
24.1338 34.2578 L
24.1338 48.3613 L
10.0313 48.3613 L
10.0313 34.2578 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0235 0.64 0.78 0.0039 k
 0.0235 0.64 0.78 0.0039 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.4082 48.793 m
8.3057 48.793 L
8.3057 34.6895 L
22.4082 34.6895 L
22.4082 48.793 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k
 0.1059 0.9294 0.8314 0.0196 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
52.6943 24.7852 m
52.6943 1.6758 L
28.9355 1.6758 L
28.9355 24.7852 L
52.6943 24.7852 L
f
47.6777 22.582 m
30.0527 22.582 L
30.0527 4.957 L
47.6777 4.957 L
47.6777 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
30.0527 22.582 m
50.6982 22.582 L
50.6982 4.957 L
30.0527 4.957 L
30.0527 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4315 0 0.8301 0 k
 0.4315 0 0.8301 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
47.4199 21.252 m
32.2393 21.252 L
32.2393 6.5029 L
47.4199 6.5029 L
47.4199 21.252 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4941 0.9412 0 0 k
 0.4941 0.9412 0 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
27.5391 27.5391 m
27.5391 0 L
0 0 L
0 27.5391 L
27.5391 27.5391 L
f
25.4316 26.1445 m
2.7529 26.1445 L
2.7529 2.1699 L
25.4316 2.1699 L
25.4316 26.1445 L
f
*U
*u
4.9561 7.4004 m
22.582 7.4004 L
22.582 25.0273 L
4.9561 25.0273 L
4.9561 7.4004 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0471 0.0118 0.6314 0 k
 0.0471 0.0118 0.6314 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
22.582 5.6738 m
4.9561 5.6738 L
4.9561 25.0273 L
22.582 25.0273 L
22.582 5.6738 L
f
20.3887 21.3281 m
7.5811 21.3281 L
7.5811 10.0313 L
20.3887 10.0313 L
20.3887 21.3281 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.9137 0 0.498 0 k
 0.9137 0 0.498 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.9355 8.7363 m
21.0371 8.7363 L
21.0371 22.8379 L
6.9355 22.8379 L
6.9355 8.7363 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8235 0 0.0039 0 k
 0.8235 0 0.0039 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
55.0781 55.0801 m
55.0781 27.5391 L
27.5391 27.5391 L
27.5391 55.0801 L
55.0781 55.0801 L
f
52.3252 50.9688 m
30.292 50.9688 L
30.292 28.9355 L
52.3252 28.9355 L
52.3252 50.9688 L
f
*U
*u
30.292 50.9688 m
52.3252 50.9688 L
52.3252 28.9355 L
30.292 28.9355 L
30.292 50.9688 L
n
32.4951 30.0527 m
50.1221 30.0527 L
50.1221 47.6777 L
32.4951 47.6777 L
32.4951 30.0527 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k
 0.0275 0.2078 0.4431 0.0039 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
50.1221 30.0527 m
32.4951 30.0527 L
32.4951 48.9727 L
50.1221 48.9727 L
50.1221 30.0527 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.8902 0 0 k
 0 0.8902 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.9063 33.749 m
49.0078 33.749 L
49.0078 47.8506 L
34.9063 47.8506 L
34.9063 33.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat 4)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7769.8833 8488.2305 m
-7678.0479 8488.2305 L
-7678.0479 8483.9512 L
-7769.8833 8483.9512 L
-7769.8833 8488.2305 L
n
0 O
0.695313 0.671875 0.636719 0.738281 k
-7769.6631 8485.5508 m
-7770 8485.6172 -7769.4814 8485.8066 -7769.8833 8485.6641 C
-7769.8379 8485.5459 -7769.7725 8485.457 -7769.6631 8485.5508 C
f
-7679.1675 8485.7168 m
-7680.2524 8486.4795 -7681.6816 8485.709 -7682.8701 8486.1953 C
-7683.0098 8486.2275 -7682.8345 8485.7773 -7683.1484 8485.8779 C
-7684.3008 8486.4707 -7686.1162 8486.1172 -7687.5195 8485.6602 C
-7687.4346 8485.542 L
-7687.7017 8485.457 -7688.0283 8485.8477 -7688.3115 8485.793 C
-7688.3135 8485.7148 -7688.2207 8485.6816 -7688.2861 8485.5732 C
-7688.3574 8485.8105 -7688.7983 8485.6836 -7688.9185 8485.8594 C
-7689.0303 8485.7676 -7689.0195 8485.5801 -7689.1641 8485.4756 C
-7689.3262 8485.7451 L
-7689.7769 8486.3848 -7690.4209 8485.7012 -7691.0361 8486.0313 C
-7691.0063 8485.9688 -7690.9453 8485.9199 -7690.9941 8485.8594 C
-7691.9814 8486.248 -7693.2168 8486.1748 -7694.3208 8486.3184 C
-7694.2769 8486.2236 -7694.2363 8486.0508 -7694.3008 8485.9434 C
-7694.3555 8486.2266 -7694.6963 8486.2979 -7694.9922 8486.3535 C
-7695.1255 8486.0625 -7695.4995 8486.6191 -7695.8467 8486.458 C
-7695.8169 8486.3945 L
-7696.0732 8486.6992 -7696.1973 8486.2188 -7696.4053 8486.584 C
-7696.5684 8486.3555 L
-7696.6807 8486.7656 -7696.9395 8486.1426 -7697.1514 8486.3516 C
-7697.1445 8486.4355 L
-7697.3442 8486.5352 -7697.4482 8486.3291 -7697.6338 8486.3984 C
-7697.6514 8486.3516 L
-7698.0854 8486.458 -7698.3379 8486.2305 -7698.3271 8486.5508 C
-7698.4795 8486.2939 -7697.9063 8486.4336 -7698.1455 8486.0596 C
-7699.5732 8486.3906 -7701.0459 8486.3252 -7702.4834 8486.332 C
-7702.6465 8486.2031 -7702.7505 8486.1641 -7702.7871 8486.042 C
-7702.9307 8486.1074 -7703.3281 8486.1016 -7703.4585 8486.2656 C
-7703.4102 8486.2588 -7703.5513 8486.1016 -7703.6274 8486.0859 C
-7703.8887 8485.9648 -7703.9131 8486.4375 -7704.2002 8486.2939 C
-7704.0859 8486.209 -7704.0469 8486.1055 -7704.0854 8485.9863 C
-7704.3301 8486.2363 -7704.6577 8486.1963 -7704.9473 8486.2773 C
-7704.9023 8486.2236 -7704.8325 8486.1914 -7704.8433 8486.0908 C
-7705.1602 8486.374 -7705.4209 8486.0313 -7705.6982 8486.21 C
-7705.5947 8486.0254 L
-7706.0415 8485.8008 -7705.7266 8486.4121 -7706.1128 8486.2793 C
-7706.02 8486.2207 -7706.0527 8486.1484 -7706.0361 8486.0732 C
-7706.3965 8486.4092 -7706.9795 8486.2979 -7707.3389 8486.4121 C
-7707.3174 8486.3867 -7707.3232 8486.3359 Y
-7707.7148 8486.3779 -7708.1245 8486.2734 -7708.5552 8486.4199 C
-7708.7119 8486.3379 -7708.5039 8485.9688 -7708.9185 8486.0371 C
-7708.9033 8486.4082 -7709.6221 8486.1895 -7709.3779 8486.6094 C
-7709.7319 8486.5488 -7710.2925 8486.4092 -7710.5283 8486.5352 C
-7710.3691 8486.3945 -7710.7007 8486.082 -7710.4063 8486.0508 C
-7710.6289 8485.8252 L
-7710.5957 8485.6738 -7710.3999 8485.877 -7710.4707 8485.6855 C
-7710.6182 8485.7012 -7711.0479 8485.8477 -7711.1797 8485.7871 C
-7711.4531 8486.0146 -7711.7041 8486.4395 -7712.1465 8486.4863 C
-7711.9385 8486.3418 -7712.2646 8486.0771 -7712.1235 8486.0137 C
-7712.7407 8486.7236 L
-7712.8877 8486.7412 -7712.7725 8486.4316 -7712.9854 8486.5283 C
-7712.9746 8486.626 -7713.0674 8486.6875 -7713.1318 8486.7676 C
-7713.1875 8486.7236 -7713.7441 8486.8594 -7713.8081 8486.4932 C
-7713.8735 8486.3516 -7713.5684 8486.418 -7713.7314 8486.2871 C
-7714.0029 8486.29 -7714.0151 8486.416 -7714.2871 8486.4219 C
-7714.2925 8486.373 L
-7714.4717 8486.3184 -7714.8213 8486.5283 -7714.6265 8486.7305 C
-7714.5015 8486.7412 -7714.6738 8486.5107 -7714.4888 8486.6172 C
-7714.6152 8486.8291 -7714.9312 8486.8887 -7715.2031 8486.8916 C
-7715.1104 8486.834 -7715.1216 8486.7363 -7715.0845 8486.6328 C
-7715.4497 8486.9199 -7715.8369 8487.0107 -7716.2451 8487.1309 C
-7716.2515 8487.3047 -7716.0928 8486.8145 -7716.0327 8486.9063 C
-7716.5557 8486.665 -7717.1128 8487.248 -7717.5479 8486.8955 C
-7717.4766 8486.8652 -7717.5098 8487.1426 -7717.5146 8487.0938 C
-7717.7666 8487.0723 -7717.7549 8486.8203 -7717.9189 8486.9131 C
-7717.9355 8486.7656 -7718.1255 8486.9609 -7718.2944 8487.0059 C
-7718.3818 8487.1123 -7718.3384 8486.9336 -7718.1914 8486.918 C
-7718.4268 8487.042 -7719.3691 8487.2695 -7719.9131 8487.0547 C
-7719.9023 8487.1523 -7720.2471 8487.4131 -7720.3721 8487.4023 C
-7720.3232 8487.1738 L
-7720.4375 8487.0371 -7720.7422 8487.1934 -7720.7632 8486.998 C
-7721.0303 8487.2754 -7719.7344 8486.7617 -7720.0957 8486.9756 C
-7720.1895 8486.7852 -7720.5991 8487.3398 -7720.5215 8487.0283 C
-7720.7725 8487.0371 -7721.0161 8487.2939 -7721.2559 8487.0801 C
-7721.1865 8487.1172 -7721.0522 8486.7627 -7721.2549 8486.7793 C
-7721.6123 8486.8203 -7721.3564 8486.8887 -7721.6465 8486.9648 C
-7721.8281 8487.0586 L
-7721.8398 8487.2813 -7722.1475 8487.0283 -7722.0146 8487.2773 C
-7722.0586 8487.0938 -7722.5337 8487.3906 -7722.4971 8487.0215 C
-7722.4473 8486.7305 L
-7722.6016 8486.752 -7722.7002 8487.0371 -7722.8213 8487.165 C
-7722.8418 8487.1387 -7722.8823 8487.0801 -7722.8745 8487.0332 C
-7722.8994 8487.4785 -7723.2432 8486.9961 -7723.4268 8487.3398 C
-7723.7505 8487.1855 -7724.2495 8487.3252 -7724.4023 8487.0488 C
-7724.6514 8487.1836 -7724.8784 8487.3428 -7725.1621 8487.248 C
-7725.1055 8487.2061 -7725.0283 8487.1934 -7725.0122 8487.0977 C
-7725.1904 8486.9668 -7725.2344 8487.084 -7725.3975 8487.1563 C
-7725.3608 8487.0898 -7725.7539 8486.8955 -7725.9521 8486.7383 C
-7726.1992 8486.8711 -7726.1143 8487.1113 -7726.1392 8487.2578 C
-7726.3652 8486.8184 -7726.8379 8487.541 -7727.1211 8487.1426 C
-7727.0352 8487.082 -7726.7598 8486.9268 -7726.9658 8486.8164 C
-7727.1919 8486.3779 -7727.4219 8487.1396 -7727.7861 8486.9297 C
-7727.6968 8487.2939 L
-7727.8594 8487.0684 -7728.2334 8487.5059 -7728.1963 8487.1348 C
-7728.3184 8487.2656 -7728.6265 8487.0137 -7728.5859 8487.3691 C
-7729.1846 8487.0684 -7730.0425 8487.5508 -7730.4102 8486.9131 C
-7730.4961 8486.9727 -7730.7104 8486.9121 -7730.6665 8487.0947 C
-7730.5239 8487.293 -7730.4673 8486.9531 -7730.4141 8487.0879 C
-7730.4912 8487.0986 -7730.5078 8487.1963 -7730.5161 8487.2451 C
-7730.7021 8487.1641 -7730.8486 8487.1387 -7730.6729 8486.8428 C
-7731.0869 8486.623 -7731.1001 8487.4473 -7731.6274 8487.3076 C
-7731.6035 8487.1611 -7731.6436 8487.1055 -7731.7979 8487.1289 C
-7732.0903 8487.3809 L
-7732.4312 8487.3223 -7732.2842 8487.0459 -7732.2925 8486.7969 C
-7732.4746 8486.8398 -7732.6973 8486.8281 -7732.7803 8487.0137 C
-7733.0015 8486.7012 L
-7732.8398 8486.9268 -7733.1514 8486.8516 -7733.2368 8486.9121 C
-7733.1514 8486.8516 L
-7733.1846 8486.7451 -7733.3955 8486.8105 -7733.5024 8486.8418 C
-7733.4766 8486.9961 -7733.2617 8487.0586 -7733.1445 8487.1035 C
-7733.2373 8487.2129 -7733.3823 8487.1875 -7733.5059 8487.3164 C
-7733.4648 8487.0723 -7733.8027 8487.1426 -7733.9473 8487.1172 C
-7734.1133 8487.0645 -7734.1348 8487.3359 -7734.1831 8487.3281 C
-7734.1875 8487.2012 -7734.4541 8487.3066 -7734.3247 8487.1289 C
-7734.2681 8487.0879 -7734.1953 8487.252 -7734.1016 8487.1396 C
-7734.2109 8487.0459 -7734.1982 8486.8252 -7734.4258 8486.9863 C
-7734.5967 8487.1074 -7734.3818 8487.4688 -7734.7061 8487.3145 C
-7734.6211 8487.2539 -7734.6055 8487.1563 -7734.5391 8487.0684 C
-7734.8433 8486.9414 L
-7734.8564 8487.1641 L
-7734.8975 8487.1074 -7734.8691 8487.0879 -7734.8877 8487.0586 C
-7734.9785 8487.293 -7735.3521 8487.1309 -7735.4209 8487.3945 C
-7735.5742 8487.418 -7735.7441 8487.2402 -7735.8906 8487.2148 C
-7735.8623 8487.1953 L
-7736.0415 8487.0645 -7736.2793 8487.1504 -7736.4297 8487.3008 C
-7736.4219 8487.252 L
-7736.5195 8487.2344 -7736.7505 8487.2695 -7736.8735 8487.4004 C
-7737.1201 8487.2324 -7736.9561 8486.5596 -7737.2295 8486.8398 C
-7737.48 8486.8477 -7737.6221 8487.248 -7737.5215 8487.3906 C
-7737.9717 8487.2402 -7738.4834 8487.6035 -7738.9009 8487.2578 C
-7738.9658 8487.3477 -7738.9248 8487.4043 -7739.0586 8487.457 C
-7739.7197 8487.3691 -7740.4551 8487.7207 -7740.9814 8487.2832 C
-7740.79 8487.1895 -7740.9688 8487.0596 -7740.9727 8486.9336 C
-7741.1309 8487.1328 -7741.1631 8486.7266 -7741.2197 8487.0684 C
-7741.2041 8487.2695 -7741.2197 8487.3672 -7741.0337 8487.4482 C
-7741.4282 8487.5566 -7742.0283 8487.5566 -7742.2471 8487.3691 C
-7742.1377 8487.4619 -7742.2227 8487.5234 -7742.3086 8487.584 C
-7742.2803 8487.2627 -7742.5713 8487.2148 -7742.7915 8487.3281 C
-7742.8223 8487.5234 L
-7742.9658 8487.3223 L
-7743.0503 8487.3848 -7743.0591 8487.7324 -7743.2773 8487.5449 C
-7743.2891 8487.4688 -7743.3018 8487.3916 -7743.3418 8487.3359 C
-7743.5693 8487.4961 -7743.8906 8487.7676 -7744.1377 8487.6016 C
-7744.3398 8487.3164 L
-7744.4453 8487.3477 -7744.6235 8487.5195 -7744.4375 8487.6016 C
-7744.8594 8487.4297 -7745.1309 8487.4082 -7745.2646 8487.1611 C
-7745.9912 8487.7627 -7747.0459 8487.7871 -7747.8906 8487.7441 C
-7747.8652 8487.5977 L
-7748.0923 8487.4609 -7747.9834 8487.8535 -7748.1416 8487.752 C
-7748.0684 8487.6123 -7748.3145 8487.4482 -7748.1362 8487.2773 C
-7748.4609 8487.123 -7748.5547 8487.5313 -7748.7656 8487.5977 C
-7748.7979 8487.79 -7748.5957 8487.4746 -7748.6367 8487.7188 C
-7748.6729 8487.7871 -7749.0859 8487.5684 -7749.1362 8487.8594 C
-7749.2178 8487.7451 -7749.1543 8487.5313 -7749.1104 8487.4131 C
-7749.3086 8487.5547 L
-7749.5513 8487.2148 -7748.7559 8486.9473 -7749.0107 8486.5283 C
-7749.1934 8486.5732 L
-7749.3682 8486.2695 -7748.71 8486.2305 -7749.1689 8486.126 C
-7749.3682 8486.2695 -7749.5381 8486.6914 -7749.3608 8486.8203 C
-7749.7754 8486.9004 -7749.5527 8487.5137 -7749.9985 8487.4893 C
-7750.1201 8487.3184 -7749.6416 8487.4482 -7749.7275 8487.209 C
-7749.9375 8486.9746 -7750.1484 8487.3398 -7750.3354 8487.2578 C
-7750.1279 8487.3672 -7750.3032 8487.6611 -7750.4375 8487.7148 C
-7750.6641 8487.5771 -7750.29 8487.4395 -7750.6113 8487.4092 C
-7750.6641 8487.5771 -7750.9595 8487.7031 -7750.7041 8487.8203 C
-7750.8203 8488.2012 -7751.0381 8487.7148 -7751.2129 8488.0098 C
-7751.3174 8487.7412 -7750.8823 8487.3906 -7751.2354 8487.2568 C
-7751.1792 8487.5146 -7751.6704 8487.6074 -7751.4839 8487.9893 C
-7751.6221 8487.916 -7751.6367 8487.7129 -7751.5361 8487.5547 C
-7751.7334 8487.3955 -7752.0151 8488.0254 -7752.0801 8487.5137 C
-7752.1479 8487.7773 L
-7752.21 8487.6914 -7752.2983 8487.626 -7752.3994 8487.4844 C
-7752.5732 8487.4795 -7752.96 8487.8418 -7752.9443 8487.4434 C
-7753 8487.4844 -7753.3975 8487.4668 -7753.2441 8487.7412 C
-7752.9971 8487.9092 -7752.96 8487.541 -7752.8223 8487.9131 C
-7752.9971 8487.6094 -7753.1787 8487.9531 -7753.3213 8488.0547 C
-7753.3447 8487.9004 L
-7753.4297 8487.9609 -7753.6255 8487.9268 -7753.6787 8488.0938 C
-7753.6133 8488.0059 -7753.6475 8487.9004 -7753.7148 8487.8633 C
-7753.8042 8488.0977 L
-7754.1494 8488.2148 -7753.8857 8487.6855 -7754.2217 8487.7539 C
-7753.9663 8487.5723 L
-7754.0225 8487.6113 -7754.1367 8487.3916 -7754.2979 8487.4648 C
-7754.3604 8487.6787 -7754.4775 8487.9355 -7754.5313 8488.1016 C
-7754.7207 8488.1953 -7754.6162 8487.8604 -7754.8027 8488.0801 C
-7754.5586 8487.8223 L
-7754.5215 8487.752 -7754.7231 8487.4688 -7754.9761 8487.4746 C
-7755.1377 8487.5488 -7755.3887 8487.8574 -7755.1338 8487.9746 C
-7755.2607 8487.9785 -7755.4385 8487.8477 -7755.3379 8487.6914 C
-7755.6255 8487.7656 -7755.2998 8487.9219 -7755.5479 8488.0547 C
-7755.6494 8487.9121 -7755.9658 8487.709 -7756.1563 8487.502 C
-7755.8975 8487.1436 L
-7756.0693 8487.1396 L
-7755.8467 8486.8535 -7756.1826 8486.9219 -7756.0566 8486.6191 C
-7756.1743 8486.5723 -7756.3169 8486.6748 -7756.4307 8486.7539 C
-7756.0864 8487.2383 -7756.8159 8487.416 -7756.7158 8487.8574 C
-7757.1875 8487.9785 -7757.0107 8486.7832 -7757.5024 8487.4746 C
-7757.4219 8487.5898 -7757.6533 8487.9258 -7757.3564 8487.7979 C
-7757.6494 8487.75 -7757.5557 8488.2412 -7757.9014 8488.0586 C
-7757.6455 8487.877 -7758.1763 8487.6113 -7757.8066 8487.3477 C
-7757.8311 8487.4932 -7757.6001 8487.458 -7757.5435 8487.418 C
-7757.6641 8487.248 -7757.5186 8486.9727 -7757.8184 8486.9727 C
-7758.0015 8487.0146 -7758.2524 8487.0234 -7758.2158 8487.2539 C
-7758.2085 8487.5068 -7757.9365 8487.2266 -7758.0537 8487.4824 C
-7758.4185 8487.5703 -7758.4795 8487.1855 -7758.6304 8487.6348 C
-7758.3999 8487.5986 -7758.3423 8487.8594 -7758.3467 8488.0332 C
-7758.6143 8488.1387 L
-7758.5625 8487.9707 L
-7758.9922 8487.8496 -7758.6895 8488.2754 -7759.1055 8488.2305 C
-7759.3008 8487.8984 L
-7759.2017 8487.6123 -7758.6953 8488.0254 -7758.7695 8487.5596 C
-7759.04 8487.541 -7759.1299 8487.7773 -7759.3848 8487.6572 C
-7759.3281 8487.6172 -7759.2505 8487.6055 -7759.1943 8487.5645 C
-7759.2915 8487.5488 -7759.3877 8486.9316 -7759.7734 8487.293 C
-7759.9727 8487.4336 -7759.8262 8487.458 -7759.8311 8487.6328 C
-7760.2656 8487.6855 -7760.3955 8487.8633 -7760.6753 8487.8906 C
-7760.6177 8487.5508 -7761.1699 8487.8574 -7760.8608 8487.5098 C
-7760.7188 8487.709 -7760.0903 8487.6895 -7759.9365 8487.3652 C
-7760.0947 8486.9619 -7759.5952 8487.4219 -7759.5024 8487.0137 C
-7759.8506 8487.0039 -7759.8335 8486.6074 -7759.8896 8486.3477 C
-7759.9863 8486.3291 -7760.0801 8486.4395 -7760.1377 8486.4795 C
-7760.1787 8486.7236 -7760.0522 8486.7207 -7760.0449 8486.9727 C
-7760.4336 8486.9063 -7760.8081 8487.042 -7761.0225 8487.2813 C
-7761.1523 8487.1602 -7761.1113 8486.916 -7760.9575 8486.8916 C
-7761.4199 8486.9648 -7761.9141 8486.9316 -7762.3535 8486.8574 C
-7762.0693 8487.2568 -7762.8433 8486.9512 -7762.6494 8487.2832 C
-7762.4141 8487.373 -7762.2119 8487.6572 -7762.3418 8487.8359 C
-7762.4888 8487.8105 -7762.3369 8487.6611 -7762.3984 8487.5762 C
-7762.5859 8487.7939 -7762.6895 8487.2266 -7762.8735 8487.5703 C
-7762.4512 8487.4414 -7762.7915 8487.084 -7762.7139 8486.7715 C
-7763.0186 8486.9473 -7762.7007 8486.5488 -7763.0024 8486.5488 C
-7763.3057 8486.7227 -7763.6787 8486.8594 -7764.0161 8486.9268 C
-7764.4399 8486.6309 -7765.0898 8486.9219 -7765.4683 8486.9336 C
-7765.6665 8486.7754 -7765.5322 8486.4219 -7765.7471 8486.3604 C
-7765.9995 8486.3672 -7765.5601 8486.7412 -7765.9336 8486.5801 C
-7765.8975 8486.5098 L
-7766.0107 8486.5908 -7766.5825 8486.2695 -7766.6929 8486.7773 C
-7766.5776 8486.3945 L
-7766.6475 8486.3594 -7766.7119 8486.4473 -7766.7695 8486.4883 C
-7766.7725 8486.3633 -7766.8535 8486.25 -7766.7402 8486.168 C
-7766.9707 8485.9043 -7767.2241 8486.21 -7767.4746 8486.2207 C
-7767.3135 8486.4473 L
-7767.7422 8486.625 -7768.0293 8486.4004 -7768.4443 8486.4795 C
-7768.4316 8486.2578 L
-7768.6787 8486.3906 L
-7768.6182 8486.1748 -7768.8447 8486.0371 -7768.9751 8486.2168 C
-7768.3335 8485.6738 L
-7768.1553 8485.8047 -7768.5283 8485.9414 -7768.4165 8486.1602 C
-7768.3213 8486.3516 -7767.9375 8486.29 -7767.8755 8486.0771 C
-7768.0225 8486.0527 -7768.0293 8486.1016 -7768.1436 8486.1816 C
-7768.1919 8485.873 -7767.9688 8485.8848 -7767.8584 8485.6787 C
-7767.9355 8485.6914 -7768.0449 8485.5977 -7768.0615 8485.6953 C
-7767.9102 8485.5449 -7767.7578 8485.5215 -7767.5059 8485.5137 C
-7767.6763 8485.6348 -7767.4131 8485.7051 -7767.4775 8485.793 C
-7767.4575 8485.5215 -7767.2168 8485.4375 -7766.9053 8485.5137 C
-7766.6831 8485.8281 -7766.3208 8485.3115 -7765.96 8485.3984 C
-7766.1064 8485.6738 -7766.2935 8485.8945 -7766.5127 8486.0059 C
-7766.2861 8486.1436 -7766.2607 8485.998 -7766.0337 8486.1367 C
-7765.9238 8485.9316 -7765.8457 8485.6172 -7765.5503 8485.4922 C
-7765.5342 8485.6953 L
-7765.2666 8485.5908 -7765.2666 8485.29 -7764.9258 8485.3477 C
-7764.3418 8485.4473 -7763.7407 8485.4473 -7763.2949 8485.4727 C
-7763.2783 8485.6748 L
-7763.0303 8485.2412 -7762.4521 8485.5146 -7762.1182 8485.3223 C
-7761.5503 8485.5176 -7760.8848 8485.1289 -7760.5938 8485.4785 C
-7759.5913 8485.3223 -7758.7148 8485.1699 -7757.6768 8485.2441 C
-7757.8516 8485.5391 L
-7757.6655 8485.3223 -7757.7305 8485.709 -7757.5479 8485.665 C
-7757.7578 8485.4297 -7757.2949 8485.3594 -7757.1665 8485.1787 C
-7756.7041 8485.4082 -7756.1104 8485.1572 -7755.7007 8484.9512 C
-7755.6846 8485.1543 L
-7755.2705 8484.7734 -7754.7759 8485.1074 -7754.2598 8485.1699 C
-7754.2007 8485.2539 -7754.1074 8485.4443 -7753.9536 8485.4219 C
-7753.6738 8485.0938 -7753.5273 8485.1172 -7753.1167 8484.9121 C
-7752.8169 8484.9121 -7752.3301 8484.9932 -7752.0254 8485.1211 C
-7750.8975 8484.6602 -7749.7456 8484.9551 -7748.5732 8484.6777 C
-7748.4888 8484.916 L
-7747.3521 8484.4063 -7745.9541 8484.8691 -7744.9839 8484.6074 C
-7745.0776 8485.0146 L
-7744.7734 8485.1396 -7744.3843 8484.9082 -7744.4619 8484.6191 C
-7744.1567 8484.7441 -7743.7007 8484.4219 -7743.5068 8484.7568 C
-7743.1953 8484.832 -7743.1255 8484.5684 -7742.8662 8484.5137 C
-7742.2422 8484.668 -7742.0107 8484.6328 -7741.4224 8484.5566 C
-7741.5684 8484.5313 L
-7741.6328 8484.6211 -7741.6387 8484.7939 -7741.4922 8484.8203 C
-7741.2725 8484.7061 -7740.6846 8484.9297 -7740.9033 8484.4434 C
-7740.2754 8484.7236 -7739.4385 8484.2148 -7738.8271 8484.5938 C
-7738.8789 8484.4609 -7738.7246 8484.4355 -7738.6602 8484.3457 C
-7738.1089 8484.3398 -7737.5293 8484.6113 -7737.0898 8484.3848 C
-7737.0024 8484.4512 -7737.2295 8484.6113 -7737.0049 8484.625 C
-7736.8721 8484.5732 -7737.0024 8484.4512 -7736.8384 8484.377 C
-7735.9453 8484.1289 -7735.0303 8484.6328 -7734.2188 8484.5684 C
-7732.7754 8484.3115 -7731.2695 8484.4414 -7729.8867 8484.3984 C
-7729.9023 8484.4961 L
-7729.4395 8484.123 -7728.8159 8484.8779 -7728.4463 8484.3164 C
-7728.3369 8484.4092 -7728.0283 8484.3604 -7728.1094 8484.5488 C
-7727.7407 8484.2852 -7727.0771 8484.7969 -7726.5439 8484.4619 C
-7726.5928 8484.4531 -7726.6211 8484.4727 -7726.6777 8484.5146 C
-7726.1392 8484.7305 -7725.6641 8484.4355 -7725.0957 8484.6309 C
-7725.1533 8484.6729 -7725.2583 8484.7031 -7725.2754 8484.8008 C
-7725.0557 8484.9883 -7724.7549 8484.3887 -7724.6348 8484.8594 C
-7724.5088 8484.8555 -7724.5449 8484.623 -7724.6221 8484.6367 C
-7723.3779 8484.8203 -7722.0498 8484.5195 -7720.7549 8484.4121 C
-7719.8271 8484.6934 -7720.6982 8485.2051 -7719.9663 8484.8535 C
-7719.9063 8484.9443 -7719.9229 8484.6738 -7719.9131 8484.7715 C
-7719.6299 8484.6396 -7719.4717 8485.2969 -7719.2754 8485.0508 C
-7719.3564 8484.7617 -7719.1445 8484.8887 -7719.1387 8484.7129 C
-7718.5713 8484.9004 -7718.4575 8485.1611 -7718.0098 8484.9414 C
-7718.0435 8485.0938 L
-7717.5186 8484.6641 -7716.9102 8484.8945 -7716.4673 8484.3984 C
-7713.5728 8484.3076 -7710.7983 8484.0332 -7707.9761 8483.9756 C
-7705.1865 8484.0703 -7702.4551 8483.8477 -7699.6221 8484.1113 C
-7698.9585 8484.5107 -7698.9087 8484.5 -7698.1797 8484.3379 C
-7698.2095 8484.4023 -7698.2549 8484.418 -7698.2061 8484.4785 C
-7698.1699 8484.1504 -7697.6929 8484.4473 -7697.6235 8484.1348 C
-7696.5762 8484.1953 -7695.6113 8484.1055 -7694.5337 8484.1035 C
-7694.7041 8484.1387 -7694.7896 8484.4063 -7694.5869 8484.3848 C
-7694.3755 8484.1748 L
-7694.3408 8484.2676 L
-7694.2021 8484.2188 -7694.0513 8484.0566 -7694.1943 8483.9512 C
-7691.4873 8483.668 -7688.8242 8484.3252 -7686.1729 8484.2451 C
-7685.5435 8484.3818 -7684.6475 8484.2568 -7683.9629 8484.1895 C
-7681.9355 8484.626 -7680.1079 8484.9795 -7678.0479 8484.6738 C
-7678.3169 8485.5215 -7679.1675 8485.7168 V
f
-7769.2578 8485.5176 m
-7769.1855 8485.6816 -7768.9497 8485.7715 -7769.1377 8485.9893 C
-7769.1611 8485.8359 -7769.2822 8485.6641 -7769.2578 8485.5176 C
f
-7762.9619 8487.2051 m
-7762.9536 8487.1563 -7762.8721 8487.2715 -7762.8521 8487.2979 C
-7762.9297 8487.3105 -7763.0024 8487.4482 -7763.0645 8487.3633 C
-7762.9854 8487.3516 -7762.9976 8487.2734 -7762.9619 8487.2051 C
f
-7761.3521 8487.3027 m
-7761.3765 8487.4482 -7761.7207 8487.5645 -7761.9238 8487.582 C
-7761.3521 8487.3027 L
f
-7759.8521 8487.9043 m
-7759.7227 8488.0273 -7759.7583 8488.0947 -7759.9326 8488.0908 C
-7759.9453 8488.0137 -7759.8877 8487.9746 -7759.8521 8487.9043 C
f
-7759.7456 8487.5723 m
-7759.6211 8487.5684 -7759.5591 8487.6543 -7759.4985 8487.7383 C
-7759.5029 8487.6123 -7759.7871 8487.8164 -7759.7456 8487.5723 C
f
-7756.4893 8487.9961 m
-7756.4111 8487.9844 -7756.2417 8487.8633 -7756.1689 8488.0254 C
-7756.2505 8487.9121 -7756.5498 8488.21 -7756.4893 8487.9961 C
f
-7754.9761 8487.7754 m
-7754.9272 8487.7852 -7754.9072 8487.8115 -7754.8506 8487.7715 C
-7754.7607 8487.8379 -7754.8555 8487.9443 -7754.9312 8487.958 C
-7754.9761 8487.7754 L
f
-7727.4287 8487.1895 m
-7727.5923 8487.2617 L
-7727.5684 8487.1172 L
-7727.4287 8487.1895 L
f
-7715.3574 8487.1816 m
-7715.1943 8487.0898 -7715.2441 8487.3184 -7715.2168 8487.3398 C
-7715.3643 8487.3555 -7715.1621 8487.1602 -7715.3574 8487.1816 C
f
-7708.8486 8486.4531 m
-7708.8984 8486.457 L
-7708.8818 8486.1572 L
-7708.8486 8486.4531 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -
(ush Tool/ Charcoal/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 k
(White)
Pc
0 0 0 1 k
(Black)
Pc
0 1 1 0 k
(CMYK Red)
Pc
0 0 1 0 k
(CMYK Yellow)
Pc
1 0 1 0 k
(CMYK Green)
Pc
1 0 0 0 k
(CMYK Cyan)
Pc
1 1 0 0 k
(CMYK Blue)
Pc
0 1 0 0 k
(CMYK Magenta)
Pc
0.15 1 0.9 0.1 k
(C=15 M=100 Y=90 K=10)
Pc
0 0.9 0.85 0 k
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.95 0 k
(C=0 M=80 Y=95 K=0)
Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0)
Pc
0 0.35 0.85 0 k
(C=0 M=35 Y=85 K=0)
Pc
0.05 0 0.9 0 k
(C=5 M=0 Y=90 K=0)
Pc
0.2 0 1 0 k
(C=20 M=0 Y=100 K=0)
Pc
0.5 0 1 0 k
(C=50 M=0 Y=100 K=0)
Pc
0.75 0 1 0 k
(C=75 M=0 Y=100 K=0)
Pc
0.85 0.1 1 0.1 k
(C=85 M=10 Y=100 K=10)
Pc
0.9 0.3 0.95 0.3 k
(C=90 M=30 Y=95 K=30)
Pc
0.75 0 0.75 0 k
(C=75 M=0 Y=75 K=0)
Pc
0.8 0.1 0.45 0 k
(C=80 M=10 Y=45 K=0)
Pc
0.7 0.15 0 0 k
(C=70 M=15 Y=0 K=0)
Pc
0.85 0.5 0 0 k
(C=85 M=50 Y=0 K=0)
Pc
1 0.95 0.05 0 k
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.25 0.25 k
(C=100 M=100 Y=25 K=25)
Pc
0.75 1 0 0 k
(C=75 M=100 Y=0 K=0)
Pc
0.5 1 0 0 k
(C=50 M=100 Y=0 K=0)
Pc
0.35 1 0.35 0.1 k
(C=35 M=100 Y=35 K=10)
Pc
0.1 1 0.5 0 k
(C=10 M=100 Y=50 K=0)
Pc
0 0.95 0.2 0 k
(C=0 M=95 Y=20 K=0)
Pc
0.25 0.25 0.4 0 k
(C=25 M=25 Y=40 K=0)
Pc
0.4 0.45 0.5 0.05 k
(C=40 M=45 Y=50 K=5)
Pc
0.5 0.5 0.6 0.25 k
(C=50 M=50 Y=60 K=25)
Pc
0.55 0.6 0.65 0.4 k
(C=55 M=60 Y=65 K=40)
Pc
0.25 0.4 0.65 0 k
(C=25 M=40 Y=65 K=0)
Pc
0.3 0.5 0.75 0.1 k
(C=30 M=50 Y=75 K=10)
Pc
0.35 0.6 0.8 0.25 k
(C=35 M=60 Y=80 K=25)
Pc
0.4 0.65 0.9 0.35 k
(C=40 M=65 Y=90 K=35)
Pc
0.4 0.7 1 0.5 k
(C=40 M=70 Y=100 K=50)
Pc
0.5 0.7 0.8 0.7 k
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 1)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 1)
Pc
Bb
2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 2)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 2)
Pc
(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Offset Squares Pattern)
Pc
0 g
(K=100)
Pc
0.100006 g
(K=90)
Pc
0.200012 g
(K=80)
Pc
0.300003 g
(K=70)
Pc
0.400009 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.600006 g
(K=40)
Pc
0.700012 g
(K=30)
Pc
0.800003 g
(K=20)
Pc
0.900009 g
(K=10)
Pc
0.950012 g
(K=5)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
*u
0 O
0 0 0 1 k
0 R
0 0 0 1 K
0 J 0 j 0.25 w 4 M []0 d0 XR
483.333 401.1094 m
487.083 401.1094 487.208 394.6719 483.333 394.6719 c
481.0811 394.6719 480.8643 394.5889 473.916 394.5889 c
466.541 394.5889 468.791 391.2764 470.791 385.7764 c
472.791 380.2764 483.1094 359.5137 y
486.4785 358.4639 486.8594 356.5137 v
487.292 354.2969 486.5791 353.0596 487.041 350.7139 c
487.1494 350.1621 498.416 323.9639 502.5 321.0264 c
505.2734 319.0303 507.25 318.2764 511.3604 318.2764 c
513.583 318.2764 513.8604 313.5264 511.3604 313.5264 c
509.125 313.5264 508.416 313.5293 503.3594 313.5264 c
498.3027 313.5234 481.4209 313.5186 475.1094 313.5264 c
473.5 313.5283 473.249 318.2764 475.1094 318.2764 c
480.1094 318.2764 481.8232 318.1836 482.833 318.2754 c
486.5 318.6084 490.416 320.8594 490.666 322.0254 c
491.3848 325.375 487.4707 334.0254 486.416 334.0254 c
484.333 334.0254 483.0332 329.6992 481.5 327.8594 c
479 324.8594 475.833 322.9424 473.5 322.9004 c
472.6201 322.8848 470.3467 323.4775 470.416 324.2764 c
470.499 325.2344 470.666 324.6924 474.332 326.4424 c
478.2793 328.3262 481.25 332.9424 479.916 341.0264 c
479.084 346.0742 475.916 351.2764 470.3594 352.7637 c
464.8027 354.251 453.041 353.9014 446.791 347.5264 C
439.791 342.0264 434.9629 326.0293 434.666 321.2764 c
434.3691 316.5234 441.4404 318.8193 447.416 318.2764 c
448.791 318.1514 449.2129 314.0293 447.416 313.5264 c
445.6191 313.0234 417.416 313.5264 414.916 313.5264 c
412.416 313.5264 412.916 318.2764 414.916 318.2764 c
416.916 318.2764 420.2368 317.9102 421.041 318.2764 c
427.082 321.0264 437.2285 348.0264 438.1191 350.5137 c
439.0098 353.001 437.8535 356.4014 438.1191 357.2637 C
438.1348 357.6885 442.916 361.1514 443.3691 361.7637 c
443.8223 362.376 449.916 377.2764 453.416 385.7764 c
456.916 394.2764 453.0244 394.457 450.916 394.5889 c
448.916 394.7139 448.666 394.5889 444.166 394.5889 c
440.666 394.5889 440.166 401.1094 444.166 401.1094 c
448.166 401.1094 479.583 401.1094 483.333 401.1094 c
b
1 D
461.541 385.2764 m
460.041 385.4014 449.666 359.1514 450.416 358.7764 c
451.166 358.4014 456.917 359.9199 461.666 359.7764 c
465.791 359.6514 471.5459 358.3545 474.25 358.1094 c
475.166 358.0264 463.041 385.1514 461.541 385.2764 c
b
*U
*u
0 D
304.166 401.1094 m
307.916 401.1094 308.041 394.5889 304.166 394.5889 c
301.9136 394.5889 304.3643 394.5889 297.416 394.5889 c
290.041 394.5889 292.291 391.2764 294.291 385.7764 c
296.291 380.2764 306.6094 359.5137 y
309.9785 358.4639 310.3594 356.5137 v
310.792 354.2969 310.0791 353.0596 310.541 350.7139 c
310.6494 350.1621 321.916 323.9639 325.9995 321.0264 c
328.7739 319.0303 330.7505 318.2764 334.8604 318.2764 c
337.083 318.2764 337.3604 313.5264 334.8604 313.5264 c
332.6245 313.5264 331.916 313.5293 326.8594 313.5264 c
321.8027 313.5234 304.9209 313.5186 298.6094 313.5264 c
296.9995 313.5283 296.7495 318.2764 298.6094 318.2764 c
303.6094 318.2764 305.3232 318.1836 306.333 318.2754 c
310 318.6084 313.916 320.8594 314.166 322.0254 c
314.8843 325.375 310.9702 334.0254 309.916 334.0254 c
307.833 334.0254 306.5327 329.6992 304.9995 327.8594 c
302.4995 324.8594 299.333 322.9424 296.9995 322.9004 c
296.1206 322.8848 293.8462 323.4775 293.916 324.2764 c
293.9995 325.2344 294.166 324.6924 297.8325 326.4424 c
301.7793 328.3262 304.7495 332.9424 303.416 341.0264 c
302.5835 346.0742 299.416 351.2764 293.8594 352.7637 c
288.3027 354.251 276.541 353.9014 270.291 347.5264 C
263.291 342.0264 258.4629 326.0293 258.166 321.2764 c
257.8691 316.5234 264.9404 318.8193 270.916 318.2764 c
272.291 318.1514 272.7129 314.0293 270.916 313.5264 c
269.1191 313.0234 235.916 313.5264 233.416 313.5264 c
230.916 313.5264 231.416 318.2764 233.416 318.2764 c
235.416 318.2764 243.7368 317.9102 244.541 318.2764 c
250.5825 321.0264 260.7285 348.0264 261.6191 350.5137 c
262.5098 353.001 261.3535 356.4014 261.6191 357.2637 C
261.6348 357.6885 266.416 361.1514 266.8691 361.7637 c
267.3223 362.376 273.416 377.2764 276.916 385.7764 c
280.416 394.2764 276.5244 394.457 274.416 394.5889 c
272.416 394.7139 276.916 394.5889 272.416 394.5889 c
268.916 394.5889 268.416 401.1094 272.416 401.1094 c
276.416 401.1094 300.416 401.1094 304.166 401.1094 c
b
1 D
285.041 385.2764 m
283.541 385.4014 273.166 359.1514 273.916 358.7764 c
274.666 358.4014 280.4165 359.9199 285.166 359.7764 c
289.291 359.6514 295.0459 358.3545 297.7495 358.1094 c
298.666 358.0264 286.541 385.1514 285.041 385.2764 c
b
*U
*u
0 D
610.665 401.1094 m
614.415 401.1094 614.54 394.5889 610.665 394.5889 c
608.4131 394.5889 609.8643 394.5889 602.915 394.5889 c
595.54 394.5889 597.79 391.2764 599.79 385.7764 c
601.79 380.2764 612.1084 359.5137 y
615.4775 358.4639 615.8584 356.5137 v
616.292 354.2969 615.5791 353.0596 616.04 350.7139 c
616.1494 350.1621 627.415 323.9639 631.499 321.0264 c
634.2725 319.0303 636.249 318.2764 640.3604 318.2764 c
642.583 318.2764 642.8604 313.5264 640.3604 313.5264 c
638.124 313.5264 637.415 313.5293 632.3584 313.5264 c
627.3018 313.5234 610.4209 313.5186 604.1084 313.5264 c
602.499 313.5283 602.249 318.2764 604.1084 318.2764 c
609.1084 318.2764 610.8232 318.1836 611.833 318.2754 c
615.499 318.6084 619.415 320.8594 619.665 322.0254 c
620.3838 325.375 616.4697 334.0254 615.415 334.0254 c
613.333 334.0254 612.0322 329.6992 610.499 327.8594 c
607.999 324.8594 604.833 322.9424 602.499 322.9004 c
601.6201 322.8848 599.3447 323.4775 599.415 324.2764 c
599.499 325.2344 599.665 324.6924 603.3311 326.4424 c
607.2783 328.3262 610.249 332.9424 608.915 341.0264 c
608.083 346.0742 604.915 351.2764 599.3584 352.7637 c
593.8018 354.251 582.04 353.9014 575.79 347.5264 C
568.79 342.0264 563.9619 326.0293 563.665 321.2764 c
563.3682 316.5234 572.4404 318.8193 578.415 318.2764 c
579.79 318.1514 580.2119 314.0293 578.415 313.5264 c
576.6182 313.0234 550.415 313.5264 547.915 313.5264 c
545.415 313.5264 545.915 318.2764 547.915 318.2764 c
549.915 318.2764 549.2354 317.9102 550.04 318.2764 c
556.0811 321.0264 566.2275 348.0264 567.1182 350.5137 c
568.0088 353.001 566.8525 356.4014 567.1182 357.2637 C
567.1338 357.6885 571.915 361.1514 572.3682 361.7637 c
572.8213 362.376 578.915 377.2764 582.415 385.7764 c
585.915 394.2764 582.0244 394.457 579.915 394.5889 c
577.915 394.7139 573.749 394.5264 569.249 394.5264 c
565.749 394.5264 565.249 401.1094 569.249 401.1094 c
573.249 401.1094 606.915 401.1094 610.665 401.1094 c
b
1 D
590.54 385.2764 m
589.04 385.4014 578.665 359.1514 579.415 358.7764 c
580.165 358.4014 585.915 359.9199 590.665 359.7764 c
594.79 359.6514 600.5459 358.3545 603.249 358.1094 c
604.165 358.0264 592.04 385.1514 590.54 385.2764 c
b
*U
0 D
563.165 401.1094 m
559.415 401.1094 538.749 401.1094 534.749 401.1094 c
530.749 401.1094 531.249 394.6094 534.749 394.6094 c
539.249 394.6094 544.374 395.2344 544.749 393.6719 c
545.165 391.9434 546.249 364.8594 544.749 360.2764 c
544.6025 359.8301 543.9092 359.0283 543.165 356.9434 c
542.749 355.7764 545.249 352.7764 545.249 351.1094 c
545.249 342.8262 546.3779 335.0996 545.665 335.0264 c
544.9521 334.9531 536.4854 351.5908 536.415 351.9434 c
535.9541 354.2891 537.3486 355.2266 536.915 357.4434 c
536.5342 359.3936 533.749 360.6094 Y
517.4424 383.3359 514.583 388.4434 v
509.915 396.7764 516.79 394.8389 524.165 394.8389 c
525.1787 394.8389 527.9014 394.8389 528.4131 394.8389 c
528.4248 394.8389 528.5635 394.8389 528.915 394.8389 c
532.79 394.8389 532.665 401.1094 528.915 401.1094 c
525.165 401.1094 493.166 401.1094 489.166 401.1094 c
485.166 401.1094 485.666 394.8389 489.166 394.8389 c
493.666 394.8389 495.1631 394.7793 497.166 394.8389 c
503.416 395.0264 501.7236 362.9307 500.833 360.4434 c
500.6748 360.001 500.2852 359.5488 499.541 357.4639 c
499.124 356.2969 501.999 352.9434 501.999 351.2764 c
501.999 329.7705 502.8691 320.6133 498.833 318.7764 c
498.0283 318.4102 494.166 318.5264 492.166 318.5264 c
490.166 318.5264 489.666 313.5264 492.166 313.5264 c
494.666 313.5264 527.8682 313.0234 529.665 313.5264 c
531.4619 314.0293 531.165 318.5264 529.665 318.5264 c
523.8311 318.5264 510.249 317.7764 509.833 318.7764 c
508.5615 321.8242 509.1904 330.7773 508.999 338.9434 c
508.874 344.3174 508.4111 348.7695 509.083 351.8594 c
509.3076 352.8896 510.249 355.1719 510.666 356.0264 c
511.583 358.0264 508.7949 359.0518 508.499 362.1094 c
507.624 371.1768 508.6982 382.1475 509.416 381.6094 c
512.415 379.3594 520.083 367.9424 522.665 361.1924 c
523.2979 359.54 523.1123 357.2412 523.249 355.6924 c
523.3936 354.0742 527.2236 353.4883 527.915 352.6094 c
537.54 340.3594 545.915 313.9014 547.54 313.5264 c
548.1904 313.377 549.1338 313.5098 550.3389 313.5264 C
550.3643 313.5254 550.3896 313.5264 550.415 313.5264 c
552.915 313.5264 572.1182 313.0234 573.915 313.5264 c
575.7119 314.0293 575.415 318.3594 573.915 318.3594 c
572.0771 318.3594 569.3701 318.2852 566.5107 318.2139 C
566.2588 318.4043 565.9619 318.5264 565.6104 318.5264 c
561.7998 318.5264 555.085 317.8877 552.6631 320.1826 C
551.9697 324.0996 552.4131 331.7266 552.249 338.7764 c
552.126 344.0127 551.8447 349.0635 552.749 352.6934 c
553.083 354.0313 554.2178 355.1064 554.665 356.0264 c
555.583 358.0264 552.4717 358.708 552.333 361.7764 c
551.915 370.9434 551.9229 392.3164 552.165 393.6934 c
552.415 395.1094 560.9131 394.6719 563.165 394.6719 c
567.04 394.6719 566.915 401.1094 563.165 401.1094 c
b
u
372.5664 401.1104 m
369.1465 401.1104 369.7324 384.5273 372.2744 384.5273 c
374.5244 384.5273 375.334 388.3281 376.3994 389.4863 c
377.3574 390.5273 378.9395 391.4229 379.7744 391.4229 c
382.0269 391.4229 401.2744 391.2773 402.0244 389.4229 C
402.3896 362.5137 401.499 360.0264 v
401.3408 359.584 400.2432 358.8613 399.499 356.7764 c
399.0825 355.6094 401.999 352.5264 401.999 350.8594 c
401.999 345.0127 402.749 329.8184 400.2075 319.9434 C
400.3301 317.9785 383.999 318.0684 382.4155 318.0684 C
380.2075 318.0684 380.4155 313.5264 382.4155 313.5264 C
383.249 313.5264 403.9155 313.5264 Y
404.5649 313.377 405.8833 313.5098 407.0894 313.5264 C
407.1147 313.5254 407.1401 313.5264 407.1655 313.5264 c
409.6655 313.5264 428.8691 313.0234 430.666 313.5264 c
432.4629 314.0293 432.166 318.1094 430.666 318.1094 c
428.8271 318.1094 422.7119 317.9639 422.3594 317.9639 c
418.5503 317.9639 412.728 318.1514 411.4131 319.9326 C
410.603 325.0889 410.1636 331.4766 409.999 338.5264 c
409.8999 342.7813 409.9043 347.9492 410.499 351.2764 c
410.9063 353.5527 411.7383 354.3887 412.4155 355.7764 c
413.3325 357.7764 410.7944 358.6348 410.499 361.6924 c
409.6235 370.7598 409.1416 388.126 409.6655 389.4219 c
410.4155 391.2764 429.6631 391.4219 431.916 391.4219 c
432.75 391.4219 434.332 390.5264 435.291 389.4854 c
436.3555 388.3271 437.166 384.5264 439.416 384.5264 c
441.957 384.5264 442.543 401.1094 439.123 401.1094 c
435.541 401.1094 378.1655 401.1094 374.1655 401.1094 C
372.5664 401.1104 L
b
U
385.916 401.1094 m
382.166 401.1094 361.5 401.1094 357.5 401.1094 c
353.5 401.1094 354 394.6094 357.5 394.6094 c
362 394.6094 367.124 395.2344 367.5 393.6719 c
367.916 391.9434 369 364.8594 367.5 360.2764 c
367.3535 359.8301 366.6602 359.0283 365.916 356.9434 c
365.499 355.7764 368 352.7764 368 351.1094 c
368 342.8262 369.1289 335.0996 368.416 335.0264 c
367.7031 334.9531 359.2354 351.5908 359.166 351.9434 c
358.7041 354.2891 360.0986 355.2266 359.666 357.4434 c
359.2852 359.3936 356.499 360.6094 Y
340.1924 383.3359 337.333 388.4434 v
332.665 396.7764 339.541 394.8389 346.916 394.8389 c
347.9297 394.8389 350.6514 394.8389 351.1631 394.8389 c
351.1748 394.8389 351.3145 394.8389 351.666 394.8389 c
355.541 394.8389 355.416 401.1094 351.666 401.1094 c
347.916 401.1094 314.416 401.1094 310.416 401.1094 c
306.416 401.1094 306.916 394.8389 310.416 394.8389 c
314.916 394.8389 317.9131 394.7793 319.916 394.8389 c
326.166 395.0264 324.4736 362.9307 323.583 360.4434 c
323.4248 360.001 323.0352 359.5488 322.291 357.4639 c
321.8745 356.2969 324.7495 352.9434 324.7495 351.2764 c
324.7495 329.7705 325.6191 320.6133 321.5825 318.7764 c
320.7783 318.4102 316.916 318.5264 314.916 318.5264 c
312.916 318.5264 312.416 313.5264 314.916 313.5264 c
317.416 313.5264 350.6191 313.0234 352.416 313.5264 c
354.2129 314.0293 353.916 318.5264 352.416 318.5264 c
346.582 318.5264 332.9995 317.7764 332.5825 318.7764 c
331.3115 321.8242 331.9399 330.7773 331.7495 338.9434 c
331.6245 344.3174 331.1616 348.7695 331.833 351.8594 c
332.0571 352.8896 332.999 355.1719 333.416 356.0264 c
334.333 358.0264 331.5449 359.0518 331.2495 362.1094 c
330.374 371.1768 331.4478 382.1475 332.166 381.6094 c
335.166 379.3594 342.833 367.9424 345.416 361.1924 c
346.0488 359.54 345.8623 357.2412 346 355.6924 c
346.1445 354.0742 349.9746 353.4883 350.666 352.6094 c
360.291 340.3594 368.666 313.9014 370.291 313.5264 c
370.9404 313.377 371.8838 313.5098 373.0898 313.5264 C
373.1152 313.5254 373.1406 313.5264 373.166 313.5264 c
375.666 313.5264 394.8691 313.0234 396.666 313.5264 c
398.4629 314.0293 398.166 318.3594 396.666 318.3594 c
394.8281 318.3594 392.1201 318.2852 389.2607 318.2139 C
389.0098 318.4043 388.7129 318.5264 388.3604 318.5264 c
384.5508 318.5264 377.8359 317.8877 375.4141 320.1826 C
374.7207 324.0996 375.1641 331.7266 375 338.7764 c
374.877 344.0127 374.5947 349.0635 375.5 352.6934 c
375.834 354.0313 376.9678 355.1064 377.416 356.0264 c
378.333 358.0264 375.2227 358.708 375.083 361.7764 c
374.666 370.9434 374.6729 392.3164 374.916 393.6934 c
375.166 395.1094 383.6641 394.6719 385.916 394.6719 c
389.791 394.6719 389.666 401.1094 385.916 401.1094 c
b
261.9995 336.4434 m
262.666 336.9434 259.9995 351.5537 236.2495 355.0537 c
229.6851 356.0215 217.7495 354.4434 210.7495 349.9434 c
203.9014 345.541 193.416 330.8672 193.416 315.6094 c
193.416 290.9336 213.4912 270.7773 238.1665 270.7773 c
262.8413 270.7773 281.4692 291.7129 281.7495 316.3867 c
282.0835 345.8037 245.291 362.7764 241.916 365.0264 c
239.9536 366.335 230.7495 371.7764 227.541 377.4014 c
225.7803 380.4883 223.9141 386.04 224.2495 388.3867 c
225.2495 395.3867 229.7495 407.3867 242.9995 406.8867 c
251.5542 406.5635 259.416 398.8369 259.416 390.2764 c
259.416 381.7158 252.4644 374.3184 243.916 374.7764 c
232.2598 375.4014 231.5806 382.9375 230.166 383.0264 c
229.666 383.0576 227.8535 382.8389 227.8848 380.9014 c
227.8955 380.2383 229.4087 377.9707 229.916 377.2764 c
230.5098 376.4639 234.7998 370.7012 243.166 369.9434 c
254.666 368.9014 263.7729 376.249 267.3701 385.0781 C
268.4102 386.791 270.3506 391.6582 271.291 393.9014 c
274.0088 400.3828 286.041 411.9014 294.291 414.5264 c
302.541 417.1514 308.7109 417.0234 313.041 414.4014 c
323.2495 408.2197 324.583 405.0537 323.7495 398.5537 c
323.1133 393.5908 322.2212 388.4238 319.416 385.1514 c
318.291 383.8389 313.5176 380.0107 313.6035 379.8389 c
314.0273 378.9893 314.7285 378.2764 316.3535 378.2139 c
316.5259 378.207 319.4331 379.708 320.666 380.7139 c
325.7495 384.8594 330.416 399.4014 329.166 406.1514 c
328.4009 410.2832 322.041 421.2764 304.041 422.9014 c
293.8491 423.8213 283.916 418.2764 280.5825 415.6094 c
277.249 412.9424 271.0825 409.2764 267.416 409.1094 c
265.563 409.0254 262.9473 408.8389 260.291 409.9014 C
255.8765 413.0742 249.397 414.8857 243.291 414.7764 c
220.041 414.3594 216.7495 395.1094 216.166 388.2764 c
215.481 380.251 220.416 366.1514 244.708 354.6514 c
254.7378 349.9033 261.4556 344.9346 266.3525 335.8555 c
271.2495 326.7764 272.916 323.1162 272.916 315.5264 c
272.916 296.335 257.3579 280.7764 238.166 280.7764 c
218.9741 280.7764 203.2002 296.3359 203.416 315.5264 c
203.666 337.7764 219.8799 349.9277 234.9995 349.5117 c
252.166 349.0391 261.333 335.9434 261.9995 336.4434 c
b
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
