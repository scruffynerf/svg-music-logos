%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: Cheap Trick.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Tony Hartt%%CreationDate: 4/18/06%%BoundingBox: 0 0 253 250%%HiResBoundingBox: 0 0 252.2691 249.2974%%CropBox: 0 0 252.2691 249.2974%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2006-04-18T14:41:28-07:00</xap:CreateDate>
         <xap:ModifyDate>2006-04-18T14:41:28-07:00</xap:ModifyDate>
         <xap:MetadataDate>2006-04-18T14:41:28-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8b/N/wD5yN0fyTeP&#xA;omkW66tr6AfWAX429sTuFlK/Ez0/YWlO57Yqwny1/wA5jnjKvmfQatQmGXTH2LUNFaOdtgTT4g/0&#xA;YqmUf/OYuhDQPrMmgzNrnrlP0cswWEw0JWX6wUbfoCvDriqaflZ/zk/ZebfMNr5e1nSf0Ze3zGO0&#xA;uoZTLC8nVY2VlVk5AUBqd/DFXumKuxV2KuxV2KvnL/nK/wA2z6PrnklbK4P1rTriXVZLX4gpaKSH&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:BFE71B25D07B11DAA853FAF781B8B471</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:BFE71B26D07B11DAA853FAF781B8B471</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1B4E7BD6584411DA9421915DEDBB16B2</stRef:instanceID>
            <stRef:documentID>uuid:1B4E7BD5584411DA9421915DEDBB16B2</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -249.297 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 249.297 li252.269 249.297 li252.269 0 licpclp[1 0 0 1 0 0 ] concat80.0986 111.967 mo78.9487 111.667 79.4155 110.484 78.6152 109.784 cv78.3154 110.384 76.7988 110.517 76.2485 110.517 cv75.5986 111.217 74.0986 111.417 74.3486 112.667 cv75.8984 115.067 78.6484 114.067 80.8486 113.617 cv82.1484 112.117 85.6484 112.417 84.4487 109.567 cv81.4985 107.517 82.3984 112.117 80.0986 111.967 cvcp37.3984 104.767 mo36.6484 105.967 34.9487 106.967 35.9487 108.617 cv34.7988 109.567 35.4487 111.217 34.2485 112.217 cv33.4487 115.317 37.0986 114.667 38.3486 116.267 cv40.6152 114.284 42.6318 114.833 43.7822 113.284 cv43.2822 110.333 44.3486 107.101 42.9487 103.95 cv42.1987 101.25 38.9487 104.217 37.3984 104.767 cvcp90.6484 102.817 mo89.0488 105.667 90.7485 108.767 90.1987 111.967 cv91.4985 112.217 92.3984 110.417 94.0488 110.767 cv94.5488 111.417 95.3984 111.967 95.6987 112.667 cv95.0488 115.117 96.8486 117.167 96.8984 119.617 cv97.4487 120.167 98.0986 120.117 98.5986 119.417 cv99.2988 114.367 99.1318 109.3 98.9487 103.95 cv97.0986 101.25 93.3486 103.417 90.6484 102.817 cvcp108.898 102.617 mo106.999 102.317 104.849 103.817 103.849 105.467 cv103.148 108.317 103.398 111.067 104.599 113.867 cv106.249 114.067 107.749 115.317 109.398 114.817 cv112.799 113.417 113.615 111.284 113.249 106.667 cv112.499 105.017 110.999 102.117 108.898 102.617 cvcp58.7485 101.867 mo57.7988 103.217 55.7319 104.3 56.2822 105.95 cv59.5322 105 62.9155 106.517 65.6152 104.617 cv65.2822 100.784 61.2485 101.867 58.7485 101.867 cvcp82.9985 101.617 mo81.4487 101.517 79.0488 100.667 77.9487 102.367 cv77.3486 103.217 76.4985 105.017 77.6987 105.467 cv79.6484 105.167 81.6484 105.117 83.4487 104.517 cv83.6987 103.867 85.082 103.583 84.7822 102.784 cv84.7319 102.083 83.3984 101.917 82.9985 101.617 cvcp22.0488 88.667 mo23.7485 88.8672 24.7485 92.8169 26.3486 89.6172 cv28.6987 88.6172 31.5986 88.3672 33.7988 89.8672 cv37.1484 92.2173 33.3486 96.417 35.2485 99.2173 cv36.6987 97.2671 39.2485 97.2173 40.9985 96.6172 cv42.3486 95.8169 43.4155 97.4673 44.1152 95.6172 cv44.2651 95.0171 44.2988 94.0171 45.0986 93.7173 cv45.6987 93.5171 46.1484 93.9673 46.2988 94.417 cv46.8486 95.7671 45.2485 96.2173 45.7988 97.5669 cv48.1484 99.4673 48.1484 102.367 49.3984 104.767 cv50.3486 105.017 51.0488 104.467 51.5488 103.817 cv51.5488 98.8672 56.5986 97.7173 60.1987 96.3672 cv64.2485 95.5669 67.5488 97.5171 70.0488 100.417 cv69.6484 103.417 74.1987 107.217 69.7988 109.067 cv66.4985 108.367 63.2485 110.517 59.9487 109.067 cv58.2988 108.767 56.8984 109.317 55.8984 110.767 cv55.8984 113.017 58.4487 113.167 59.7485 114.367 cv63.8486 115.367 66.4487 112.567 69.3486 110.517 cv71.5986 110.267 72.7485 107.217 74.5986 105.967 cv72.9985 104.167 70.6987 102.367 71.9487 99.7173 cv72.9985 98.7671 73.6987 96.8169 75.3486 96.3672 cv78.0488 97.417 81.4487 95.2671 84.6987 96.3672 cv86.5488 96.3672 87.9985 99.3169 89.4985 98.2671 cv89.5986 96.7173 88.9985 94.6172 90.9487 93.9673 cv92.4487 94.2671 92.5986 95.7671 93.3486 97.0669 cv93.5488 95.8169 93.6484 94.3672 94.7485 93.4673 cv95.0488 93.5171 95.5488 93.3169 95.7485 93.7173 cv96.0488 92.917 96.7988 93.3672 97.3984 93.2173 cv98.4487 93.7671 99.1987 94.8169 99.3486 95.8672 cv101.199 96.417 102.799 98.2671 104.849 97.5669 cv106.949 96.417 110.049 95.7671 112.299 97.0669 cv114.199 97.0171 115.398 99.1172 116.849 99.7173 cv119.449 102.717 120.049 107.117 118.999 111.017 cv116.898 113.517 117.648 117.667 113.949 119.167 cv110.749 119.917 107.299 119.467 104.148 118.917 cv103.049 119.467 104.148 120.317 103.898 121.067 cv105.699 123.217 110.782 122.617 109.648 126.817 cv107.898 129.417 103.599 129.017 101.499 129.017 cv99.1484 128.467 96.2485 129.317 94.5488 127.317 cv94.1484 125.017 91.0986 123.017 92.5986 120.817 cv92.7485 120.017 92.4985 119.167 91.6484 118.917 cv88.5986 119.717 86.5986 116.317 83.7485 118.217 cv79.9985 119.867 75.9985 119.417 72.4487 117.017 cv71.0488 114.367 69.8486 117.817 68.3486 117.717 cv65.6484 119.617 61.6484 121.217 58.5488 119.167 cv55.6484 118.667 54.1987 116.417 52.7485 114.117 cv51.0488 114.067 49.5488 110.117 47.9487 112.917 cv48.5488 115.667 52.5488 115.117 52.9985 118.217 cv50.9487 121.717 46.5986 119.467 42.9487 120.117 cv40.9487 120.617 39.6484 117.067 37.8984 119.617 cv37.1484 120.367 li33.3984 119.017 26.4985 123.517 25.6484 117.017 cv25.4487 115.967 26.6484 115.317 27.3486 114.817 cv31.1152 114.117 29.5488 107.317 30.6987 103.567 cv28.2988 100.817 33.0986 95.7671 28.0488 95.167 cv27.2485 94.3169 25.9487 94.1172 25.3984 93.2173 cv22.4487 96.167 26.0488 99.9673 24.1987 103.317 cv23.5986 104.117 22.6484 103.867 21.5488 103.817 cv19.9487 102.217 20.8984 99.167 18.9487 97.5669 cv19.3984 95.8672 17.4985 96.1172 16.7485 95.417 cv12.9487 95.417 li10.0488 96.8169 8.19873 99.3169 8.34863 102.617 cv7.89844 103.067 li7.99854 106.967 7.04883 112.817 11.4985 114.367 cv12.9487 114.967 15.1484 115.367 16.9985 114.817 cv21.1484 114.067 20.3486 103.067 24.9487 110.517 cv24.7485 114.517 22.7485 118.317 19.3984 120.617 cv18.2485 120.817 17.1987 121.067 16.0488 121.317 cv15.4985 120.317 14.5986 121.267 13.8984 121.317 cv10.4487 120.517 7.24854 118.667 5.74854 115.317 cv6.19873 114.317 4.94873 113.917 4.74854 113.167 cv4.99854 112.917 li3.64844 111.767 4.69873 109.567 4.04883 108.117 cv2.89844 105.767 4.24854 103.017 3.79883 100.667 cv4.44873 95.6172 7.44873 90.1172 12.6987 88.417 cv16.3984 87.0669 18.9487 92.2173 22.0488 88.667 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykf2.5 lw0 lc0 lj4 ml[] 0 dshtrue sadj80.0986 111.967 mo78.9487 111.667 79.4155 110.484 78.6152 109.784 cv78.3154 110.384 76.7988 110.517 76.2485 110.517 cv75.5986 111.217 74.0986 111.417 74.3486 112.667 cv75.8984 115.067 78.6484 114.067 80.8486 113.617 cv82.1484 112.117 85.6484 112.417 84.4487 109.567 cv81.4985 107.517 82.3984 112.117 80.0986 111.967 cvcp37.3984 104.767 mo36.6484 105.967 34.9487 106.967 35.9487 108.617 cv34.7988 109.567 35.4487 111.217 34.2485 112.217 cv33.4487 115.317 37.0986 114.667 38.3486 116.267 cv40.6152 114.284 42.6318 114.833 43.7822 113.284 cv43.2822 110.333 44.3486 107.101 42.9487 103.95 cv42.1987 101.25 38.9487 104.217 37.3984 104.767 cvcp90.6484 102.817 mo89.0488 105.667 90.7485 108.767 90.1987 111.967 cv91.4985 112.217 92.3984 110.417 94.0488 110.767 cv94.5488 111.417 95.3984 111.967 95.6987 112.667 cv95.0488 115.117 96.8486 117.167 96.8984 119.617 cv97.4487 120.167 98.0986 120.117 98.5986 119.417 cv99.2988 114.367 99.1318 109.3 98.9487 103.95 cv97.0986 101.25 93.3486 103.417 90.6484 102.817 cvcp108.898 102.617 mo106.999 102.317 104.849 103.817 103.849 105.467 cv103.148 108.317 103.398 111.067 104.599 113.867 cv106.249 114.067 107.749 115.317 109.398 114.817 cv112.799 113.417 113.615 111.284 113.249 106.667 cv112.499 105.017 110.999 102.117 108.898 102.617 cvcp58.7485 101.867 mo57.7988 103.217 55.7319 104.3 56.2822 105.95 cv59.5322 105 62.9155 106.517 65.6152 104.617 cv65.2822 100.784 61.2485 101.867 58.7485 101.867 cvcp82.9985 101.617 mo81.4487 101.517 79.0488 100.667 77.9487 102.367 cv77.3486 103.217 76.4985 105.017 77.6987 105.467 cv79.6484 105.167 81.6484 105.117 83.4487 104.517 cv83.6987 103.867 85.082 103.583 84.7822 102.784 cv84.7319 102.083 83.3984 101.917 82.9985 101.617 cvcp22.0488 88.667 mo23.7485 88.8672 24.7485 92.8169 26.3486 89.6172 cv28.6987 88.6172 31.5986 88.3672 33.7988 89.8672 cv37.1484 92.2173 33.3486 96.417 35.2485 99.2173 cv36.6987 97.2671 39.2485 97.2173 40.9985 96.6172 cv42.3486 95.8169 43.4155 97.4673 44.1152 95.6172 cv44.2651 95.0171 44.2988 94.0171 45.0986 93.7173 cv45.6987 93.5171 46.1484 93.9673 46.2988 94.417 cv46.8486 95.7671 45.2485 96.2173 45.7988 97.5669 cv48.1484 99.4673 48.1484 102.367 49.3984 104.767 cv50.3486 105.017 51.0488 104.467 51.5488 103.817 cv51.5488 98.8672 56.5986 97.7173 60.1987 96.3672 cv64.2485 95.5669 67.5488 97.5171 70.0488 100.417 cv69.6484 103.417 74.1987 107.217 69.7988 109.067 cv66.4985 108.367 63.2485 110.517 59.9487 109.067 cv58.2988 108.767 56.8984 109.317 55.8984 110.767 cv55.8984 113.017 58.4487 113.167 59.7485 114.367 cv63.8486 115.367 66.4487 112.567 69.3486 110.517 cv71.5986 110.267 72.7485 107.217 74.5986 105.967 cv72.9985 104.167 70.6987 102.367 71.9487 99.7173 cv72.9985 98.7671 73.6987 96.8169 75.3486 96.3672 cv78.0488 97.417 81.4487 95.2671 84.6987 96.3672 cv86.5488 96.3672 87.9985 99.3169 89.4985 98.2671 cv89.5986 96.7173 88.9985 94.6172 90.9487 93.9673 cv92.4487 94.2671 92.5986 95.7671 93.3486 97.0669 cv93.5488 95.8169 93.6484 94.3672 94.7485 93.4673 cv95.0488 93.5171 95.5488 93.3169 95.7485 93.7173 cv96.0488 92.917 96.7988 93.3672 97.3984 93.2173 cv98.4487 93.7671 99.1987 94.8169 99.3486 95.8672 cv101.199 96.417 102.799 98.2671 104.849 97.5669 cv106.949 96.417 110.049 95.7671 112.299 97.0669 cv114.199 97.0171 115.398 99.1172 116.849 99.7173 cv119.449 102.717 120.049 107.117 118.999 111.017 cv116.898 113.517 117.648 117.667 113.949 119.167 cv110.749 119.917 107.299 119.467 104.148 118.917 cv103.049 119.467 104.148 120.317 103.898 121.067 cv105.699 123.217 110.782 122.617 109.648 126.817 cv107.898 129.417 103.599 129.017 101.499 129.017 cv99.1484 128.467 96.2485 129.317 94.5488 127.317 cv94.1484 125.017 91.0986 123.017 92.5986 120.817 cv92.7485 120.017 92.4985 119.167 91.6484 118.917 cv88.5986 119.717 86.5986 116.317 83.7485 118.217 cv79.9985 119.867 75.9985 119.417 72.4487 117.017 cv71.0488 114.367 69.8486 117.817 68.3486 117.717 cv65.6484 119.617 61.6484 121.217 58.5488 119.167 cv55.6484 118.667 54.1987 116.417 52.7485 114.117 cv51.0488 114.067 49.5488 110.117 47.9487 112.917 cv48.5488 115.667 52.5488 115.117 52.9985 118.217 cv50.9487 121.717 46.5986 119.467 42.9487 120.117 cv40.9487 120.617 39.6484 117.067 37.8984 119.617 cv37.1484 120.367 li33.3984 119.017 26.4985 123.517 25.6484 117.017 cv25.4487 115.967 26.6484 115.317 27.3486 114.817 cv31.1152 114.117 29.5488 107.317 30.6987 103.567 cv28.2988 100.817 33.0986 95.7671 28.0488 95.167 cv27.2485 94.3169 25.9487 94.1172 25.3984 93.2173 cv22.4487 96.167 26.0488 99.9673 24.1987 103.317 cv23.5986 104.117 22.6484 103.867 21.5488 103.817 cv19.9487 102.217 20.8984 99.167 18.9487 97.5669 cv19.3984 95.8672 17.4985 96.1172 16.7485 95.417 cv12.9487 95.417 li10.0488 96.8169 8.19873 99.3169 8.34863 102.617 cv7.89844 103.067 li7.99854 106.967 7.04883 112.817 11.4985 114.367 cv12.9487 114.967 15.1484 115.367 16.9985 114.817 cv21.1484 114.067 20.3486 103.067 24.9487 110.517 cv24.7485 114.517 22.7485 118.317 19.3984 120.617 cv18.2485 120.817 17.1987 121.067 16.0488 121.317 cv15.4985 120.317 14.5986 121.267 13.8984 121.317 cv10.4487 120.517 7.24854 118.667 5.74854 115.317 cv6.19873 114.317 4.94873 113.917 4.74854 113.167 cv4.99854 112.917 li3.64844 111.767 4.69873 109.567 4.04883 108.117 cv2.89844 105.767 4.24854 103.017 3.79883 100.667 cv4.44873 95.6172 7.44873 90.1172 12.6987 88.417 cv16.3984 87.0669 18.9487 92.2173 22.0488 88.667 cvcp@143.845 94.6377 mo145.678 94.1377 148.011 95.1377 149.011 95.8047 cv150.178 99.6377 147.648 101.353 149.511 102.471 cv152.011 103.971 152.669 102.025 155.678 102.471 cv160.178 103.138 157.344 105.971 157.678 108.305 cv158.011 110.638 159.178 112.805 158.011 113.471 cv156.845 114.138 153.345 114.805 152.011 116.138 cv149.511 114.305 154.753 113.853 153.678 111.971 cv153.011 110.805 151.844 109.805 150.178 110.138 cv148.511 110.471 146.845 111.971 146.845 111.971 cv146.845 111.971 147.511 113.971 146.345 114.305 cv145.178 114.638 144.178 115.138 144.178 112.138 cv144.178 109.138 144.178 104.805 143.845 102.805 cv143.511 100.805 143.845 94.6377 143.845 94.6377 cvcp221.678 110.805 mo225.011 109.638 224.344 113.471 224.344 113.471 cv223.511 115.471 218.344 111.971 221.678 110.805 cvcp153.643 95.145 mo153.442 95.7954 154.561 89.1045 153.661 89.5044 cv153.011 89.6548 152.511 89.2544 152.011 89.0044 cv144.961 87.1548 138.511 89.5547 131.361 88.7544 cv127.411 89.9546 129.911 94.0547 129.211 96.7046 cv129.511 99.1045 129.361 101.604 131.111 103.405 cv137.811 104.104 132.111 96.7046 136.161 94.5044 cv136.911 94.7046 138.061 94.1045 138.561 95.0044 cv139.861 100.104 139.011 107.305 139.261 113.504 cv138.211 115.354 135.811 113.905 134.211 114.705 cv132.911 115.604 131.461 116.854 132.061 118.754 cv134.311 121.104 137.211 120.254 140.011 120.455 cv141.261 120.004 142.861 120.405 143.811 119.254 cv144.911 119.004 145.561 119.705 146.461 119.955 cv147.711 119.905 149.461 119.504 150.561 118.305 cv152.311 117.754 152.361 119.504 153.661 119.955 cv154.611 120.455 155.761 119.905 156.811 119.705 cv161.161 119.305 167.911 121.604 170.211 117.104 cv170.911 114.754 168.811 113.504 167.811 111.805 cv166.611 110.655 165.211 111.905 164.211 112.754 cv163.411 112.055 162.711 111.254 163.011 110.104 cv164.911 108.254 162.061 105.405 164.711 103.905 cv168.511 99.5044 168.261 107.205 171.911 106.504 cv173.961 106.055 174.811 103.805 176.211 102.455 cv180.061 102.455 li181.112 102.555 182.961 103.905 182.211 105.104 cv182.411 107.604 183.011 111.104 181.761 113.004 cv179.661 112.754 177.362 114.104 175.761 115.155 cv175.612 116.854 174.711 118.705 176.961 119.504 cv188.711 120.455 li190.411 119.405 192.862 119.405 194.711 119.504 cv196.411 119.205 194.811 118.305 195.661 117.305 cv196.761 116.705 197.961 117.754 198.561 118.504 cv201.362 117.854 202.761 120.754 205.761 119.705 cv207.661 119.305 209.961 116.405 211.511 118.504 cv213.311 121.092 219.011 120.471 224.178 120.638 cv228.377 119.838 235.344 122.638 236.211 119.504 cv237.561 117.555 238.862 115.354 236.961 113.254 cv235.411 113.104 233.661 113.555 232.411 112.754 cv230.811 110.805 227.461 108.104 228.811 105.104 cv230.811 102.455 235.028 103.538 237.178 101.638 cv237.528 99.8877 237.112 96.9048 236.011 95.2544 cv233.711 95.2544 231.862 94.2046 229.761 94.7544 cv226.811 95.5547 224.661 98.7046 224.011 101.504 cv222.811 102.155 222.811 104.205 221.112 103.405 cv220.561 102.205 220.678 100.871 221.178 99.4712 cv220.578 95.4214 222.961 90.8545 219.911 87.5547 cv216.862 86.6548 213.811 86.4048 210.311 85.9048 cv207.311 87.1548 210.411 89.5044 209.612 91.4048 cv210.061 94.5044 213.112 94.3545 215.112 95.9546 cv215.661 99.5044 215.061 103.155 215.612 107.004 cv215.511 108.405 213.961 108.254 213.211 108.905 cv208.911 108.455 208.261 114.555 203.362 113.004 cv201.261 111.754 198.711 110.905 198.061 108.205 cv197.461 106.455 198.061 104.555 199.011 103.155 cv200.811 102.455 202.161 100.455 204.561 101.254 cv205.811 102.104 206.061 103.805 206.211 105.305 cv207.011 106.604 208.511 107.905 210.061 107.004 cv211.612 105.905 211.862 104.504 212.711 102.905 cv212.311 101.955 212.511 100.705 212.461 99.5547 cv211.612 97.3545 209.661 95.8545 207.411 95.2544 cv206.112 93.5044 204.061 94.6045 201.911 94.3047 cv198.261 94.3047 195.911 98.5547 194.211 100.754 cv191.011 104.971 194.794 109.205 193.844 113.305 cv192.645 112.905 189.511 114.004 188.711 111.805 cv188.511 107.305 189.011 103.138 188.211 98.3545 cv187.761 97.2046 186.711 96.3047 186.811 95.0044 cv187.461 93.2544 189.112 91.2046 188.461 89.0044 cv187.862 87.0044 185.811 86.5547 183.911 86.8545 cv182.311 87.1548 181.411 88.9048 180.811 90.2046 cv179.511 92.2046 183.261 93.5547 181.261 95.2544 cv179.161 95.9546 176.661 95.6045 175.011 97.4048 cv173.211 96.4546 171.061 95.5044 169.261 95.2544 cv166.761 95.5044 165.311 99.1045 162.311 97.4048 cv161.511 96.7046 157.143 97.2954 156.143 96.645 cv153.643 95.145 licp192.311 94.3047 mo191.261 94.0547 190.311 94.5044 189.911 95.5044 cv190.161 96.5044 189.112 97.6045 190.161 98.3545 cv190.961 99.7046 191.862 97.9546 192.561 98.1045 cv193.311 97.4546 193.362 96.5044 193.311 95.5044 cv192.911 95.1045 192.511 94.7544 192.311 94.3047 cvcpf143.845 94.6377 mo145.678 94.1377 148.011 95.1377 149.011 95.8047 cv150.178 99.6377 147.648 101.353 149.511 102.471 cv152.011 103.971 152.669 102.025 155.678 102.471 cv160.178 103.138 157.344 105.971 157.678 108.305 cv158.011 110.638 159.178 112.805 158.011 113.471 cv156.845 114.138 153.345 114.805 152.011 116.138 cv149.511 114.305 154.753 113.853 153.678 111.971 cv153.011 110.805 151.844 109.805 150.178 110.138 cv148.511 110.471 146.845 111.971 146.845 111.971 cv146.845 111.971 147.511 113.971 146.345 114.305 cv145.178 114.638 144.178 115.138 144.178 112.138 cv144.178 109.138 144.178 104.805 143.845 102.805 cv143.511 100.805 143.845 94.6377 143.845 94.6377 cvcp221.678 110.805 mo225.011 109.638 224.344 113.471 224.344 113.471 cv223.511 115.471 218.344 111.971 221.678 110.805 cvcp153.643 95.145 mo153.442 95.7954 154.561 89.1045 153.661 89.5044 cv153.011 89.6548 152.511 89.2544 152.011 89.0044 cv144.961 87.1548 138.511 89.5547 131.361 88.7544 cv127.411 89.9546 129.911 94.0547 129.211 96.7046 cv129.511 99.1045 129.361 101.604 131.111 103.405 cv137.811 104.104 132.111 96.7046 136.161 94.5044 cv136.911 94.7046 138.061 94.1045 138.561 95.0044 cv139.861 100.104 139.011 107.305 139.261 113.504 cv138.211 115.354 135.811 113.905 134.211 114.705 cv132.911 115.604 131.461 116.854 132.061 118.754 cv134.311 121.104 137.211 120.254 140.011 120.455 cv141.261 120.004 142.861 120.405 143.811 119.254 cv144.911 119.004 145.561 119.705 146.461 119.955 cv147.711 119.905 149.461 119.504 150.561 118.305 cv152.311 117.754 152.361 119.504 153.661 119.955 cv154.611 120.455 155.761 119.905 156.811 119.705 cv161.161 119.305 167.911 121.604 170.211 117.104 cv170.911 114.754 168.811 113.504 167.811 111.805 cv166.611 110.655 165.211 111.905 164.211 112.754 cv163.411 112.055 162.711 111.254 163.011 110.104 cv164.911 108.254 162.061 105.405 164.711 103.905 cv168.511 99.5044 168.261 107.205 171.911 106.504 cv173.961 106.055 174.811 103.805 176.211 102.455 cv180.061 102.455 li181.112 102.555 182.961 103.905 182.211 105.104 cv182.411 107.604 183.011 111.104 181.761 113.004 cv179.661 112.754 177.362 114.104 175.761 115.155 cv175.612 116.854 174.711 118.705 176.961 119.504 cv188.711 120.455 li190.411 119.405 192.862 119.405 194.711 119.504 cv196.411 119.205 194.811 118.305 195.661 117.305 cv196.761 116.705 197.961 117.754 198.561 118.504 cv201.362 117.854 202.761 120.754 205.761 119.705 cv207.661 119.305 209.961 116.405 211.511 118.504 cv213.311 121.092 219.011 120.471 224.178 120.638 cv228.377 119.838 235.344 122.638 236.211 119.504 cv237.561 117.555 238.862 115.354 236.961 113.254 cv235.411 113.104 233.661 113.555 232.411 112.754 cv230.811 110.805 227.461 108.104 228.811 105.104 cv230.811 102.455 235.028 103.538 237.178 101.638 cv237.528 99.8877 237.112 96.9048 236.011 95.2544 cv233.711 95.2544 231.862 94.2046 229.761 94.7544 cv226.811 95.5547 224.661 98.7046 224.011 101.504 cv222.811 102.155 222.811 104.205 221.112 103.405 cv220.561 102.205 220.678 100.871 221.178 99.4712 cv220.578 95.4214 222.961 90.8545 219.911 87.5547 cv216.862 86.6548 213.811 86.4048 210.311 85.9048 cv207.311 87.1548 210.411 89.5044 209.612 91.4048 cv210.061 94.5044 213.112 94.3545 215.112 95.9546 cv215.661 99.5044 215.061 103.155 215.612 107.004 cv215.511 108.405 213.961 108.254 213.211 108.905 cv208.911 108.455 208.261 114.555 203.362 113.004 cv201.261 111.754 198.711 110.905 198.061 108.205 cv197.461 106.455 198.061 104.555 199.011 103.155 cv200.811 102.455 202.161 100.455 204.561 101.254 cv205.811 102.104 206.061 103.805 206.211 105.305 cv207.011 106.604 208.511 107.905 210.061 107.004 cv211.612 105.905 211.862 104.504 212.711 102.905 cv212.311 101.955 212.511 100.705 212.461 99.5547 cv211.612 97.3545 209.661 95.8545 207.411 95.2544 cv206.112 93.5044 204.061 94.6045 201.911 94.3047 cv198.261 94.3047 195.911 98.5547 194.211 100.754 cv191.011 104.971 194.794 109.205 193.844 113.305 cv192.645 112.905 189.511 114.004 188.711 111.805 cv188.511 107.305 189.011 103.138 188.211 98.3545 cv187.761 97.2046 186.711 96.3047 186.811 95.0044 cv187.461 93.2544 189.112 91.2046 188.461 89.0044 cv187.862 87.0044 185.811 86.5547 183.911 86.8545 cv182.311 87.1548 181.411 88.9048 180.811 90.2046 cv179.511 92.2046 183.261 93.5547 181.261 95.2544 cv179.161 95.9546 176.661 95.6045 175.011 97.4048 cv173.211 96.4546 171.061 95.5044 169.261 95.2544 cv166.761 95.5044 165.311 99.1045 162.311 97.4048 cv161.511 96.7046 157.143 97.2954 156.143 96.645 cv153.643 95.145 licp192.311 94.3047 mo191.261 94.0547 190.311 94.5044 189.911 95.5044 cv190.161 96.5044 189.112 97.6045 190.161 98.3545 cv190.961 99.7046 191.862 97.9546 192.561 98.1045 cv193.311 97.4546 193.362 96.5044 193.311 95.5044 cv192.911 95.1045 192.511 94.7544 192.311 94.3047 cvcp@214.612 111.305 mo213.911 111.905 212.112 112.905 212.711 113.955 cv214.511 114.638 li215.362 114.038 215.911 113.405 215.362 111.805 cv215.112 111.604 215.011 111.205 214.612 111.305 cvcp0 0 0 0 cmykf214.612 111.305 mo213.911 111.905 212.112 112.905 212.711 113.955 cv214.511 114.638 li215.362 114.038 215.911 113.405 215.362 111.805 cv215.112 111.604 215.011 111.205 214.612 111.305 cvcp0 0 0 1 cmyk@156.368 88.1953 mo158.118 89.6953 159.724 87.8452 159.724 87.8452 cv159.724 83.7954 159.224 79.895 160.424 76.0454 cv159.474 74.645 159.624 71.6953 157.074 71.9951 cv154.474 72.4453 155.074 75.5454 154.674 77.4951 cv154.924 78.395 153.474 79.1953 154.674 79.895 cv154.474 80.5454 155.074 81.4453 154.174 81.8452 cv154.174 81.8452 154.618 86.6953 156.368 88.1953 cvcpf0.5 lw156.368 88.1953 mo158.118 89.6953 159.724 87.8452 159.724 87.8452 cv159.724 83.7954 159.224 79.895 160.424 76.0454 cv159.474 74.645 159.624 71.6953 157.074 71.9951 cv154.474 72.4453 155.074 75.5454 154.674 77.4951 cv154.924 78.395 153.474 79.1953 154.674 79.895 cv154.474 80.5454 155.074 81.4453 154.174 81.8452 cv154.174 81.8452 154.618 86.6953 156.368 88.1953 cvcp@82.6299 27.0576 mo81.48 26.7578 81.9468 25.5742 81.1465 24.8745 cv80.8467 25.4746 79.3301 25.6079 78.7798 25.6079 cv78.1299 26.3076 76.6299 26.5078 76.8799 27.7578 cv78.4302 30.1577 81.1802 29.1577 83.3799 28.7075 cv84.6802 27.2075 88.1802 27.5078 86.98 24.6577 cv84.0298 22.6079 84.9302 27.2075 82.6299 27.0576 cvcp39.9302 19.8579 mo39.1802 21.0576 37.48 22.0576 38.48 23.7075 cv37.3301 24.6577 37.98 26.3076 36.7798 27.3076 cv35.98 30.4077 39.6299 29.7578 40.8799 31.3579 cv43.1465 29.3745 45.1631 29.9243 46.3135 28.3745 cv45.8135 25.4243 46.8799 22.1909 45.48 19.041 cv44.73 16.3413 41.48 19.3076 39.9302 19.8579 cvcp93.1802 17.9077 mo91.5801 20.7578 93.2798 23.8579 92.73 27.0576 cv94.0298 27.3076 94.9302 25.5078 96.5801 25.8579 cv97.0801 26.5078 97.9302 27.0576 98.23 27.7578 cv97.5801 30.2075 99.3799 32.2578 99.4302 34.7075 cv99.98 35.2578 100.63 35.2075 101.13 34.5078 cv101.83 29.4575 101.663 24.3911 101.48 19.041 cv99.6299 16.3413 95.8799 18.5078 93.1802 17.9077 cvcp111.43 17.7075 mo109.53 17.4077 107.38 18.9077 106.38 20.5576 cv105.68 23.4077 105.93 26.1577 107.13 28.9575 cv108.78 29.1577 110.28 30.4077 111.93 29.9077 cv115.33 28.5078 116.146 26.3745 115.78 21.7578 cv115.03 20.1079 113.53 17.2075 111.43 17.7075 cvcp61.2798 16.9575 mo60.3301 18.3076 58.2632 19.3911 58.8135 21.041 cv62.0635 20.0913 65.4468 21.6079 68.1465 19.7075 cv67.8135 15.8745 63.7798 16.9575 61.2798 16.9575 cvcp85.5298 16.7075 mo83.98 16.6079 81.5801 15.7578 80.48 17.4575 cv79.8799 18.3076 79.0298 20.1079 80.23 20.5576 cv82.1802 20.2578 84.1802 20.2075 85.98 19.6079 cv86.23 18.9575 87.6133 18.6743 87.3135 17.8745 cv87.2632 17.1743 85.9302 17.0078 85.5298 16.7075 cvcp24.5801 3.75781 mo26.2798 3.95752 27.2798 7.90771 28.8799 4.70752 cv31.23 3.70752 34.1299 3.45752 36.3301 4.95752 cv39.6802 7.30762 35.8799 11.5078 37.7798 14.3076 cv39.23 12.3579 41.7798 12.3076 43.5298 11.7075 cv44.8799 10.9077 45.9468 12.5576 46.6465 10.7075 cv46.7964 10.1079 46.8301 9.10791 47.6299 8.80762 cv48.23 8.60791 48.6802 9.05762 48.8301 9.50781 cv49.3799 10.8579 47.7798 11.3076 48.3301 12.6577 cv50.6802 14.5576 50.6802 17.4575 51.9302 19.8579 cv52.8799 20.1079 53.5801 19.5576 54.0801 18.9077 cv54.0801 13.9575 59.1299 12.8076 62.73 11.4575 cv66.7798 10.6577 70.0801 12.6079 72.5801 15.5078 cv72.1802 18.5078 76.73 22.3076 72.3301 24.1577 cv69.0298 23.4575 65.7798 25.6079 62.48 24.1577 cv60.8301 23.8579 59.4302 24.4077 58.4302 25.8579 cv58.4302 28.1079 60.98 28.2578 62.2798 29.4575 cv66.3799 30.4575 68.98 27.6577 71.8799 25.6079 cv74.1299 25.3579 75.2798 22.3076 77.1299 21.0576 cv75.5298 19.2578 73.23 17.4575 74.48 14.8076 cv75.5298 13.8579 76.23 11.9077 77.8799 11.4575 cv80.5801 12.5078 83.98 10.3579 87.23 11.4575 cv89.0801 11.4575 90.5298 14.4077 92.0298 13.3579 cv92.1299 11.8076 91.5298 9.70752 93.48 9.05762 cv94.98 9.35791 95.1299 10.8579 95.8799 12.1577 cv96.0801 10.9077 96.1802 9.45752 97.2798 8.55762 cv97.5801 8.60791 98.0801 8.40771 98.2798 8.80762 cv98.5801 8.00781 99.3301 8.45752 99.9302 8.30762 cv100.98 8.85791 101.73 9.90771 101.88 10.9575 cv103.73 11.5078 105.33 13.3579 107.38 12.6577 cv109.48 11.5078 112.58 10.8579 114.83 12.1577 cv116.73 12.1079 117.93 14.2075 119.38 14.8076 cv121.98 17.8076 122.58 22.2075 121.53 26.1079 cv119.43 28.6079 120.18 32.7578 116.48 34.2578 cv113.28 35.0078 109.83 34.5576 106.68 34.0078 cv105.58 34.5576 106.68 35.4077 106.43 36.1577 cv108.23 38.3076 113.313 37.7075 112.18 41.9077 cv110.43 44.5078 106.13 44.1079 104.03 44.1079 cv101.68 43.5576 98.7798 44.4077 97.0801 42.4077 cv96.6802 40.1079 93.6299 38.1079 95.1299 35.9077 cv95.2798 35.1079 95.0298 34.2578 94.1802 34.0078 cv91.1299 34.8076 89.1299 31.4077 86.2798 33.3076 cv82.5298 34.9575 78.5298 34.5078 74.98 32.1079 cv73.5801 29.4575 72.3799 32.9077 70.8799 32.8076 cv68.1802 34.7075 64.1802 36.3076 61.0801 34.2578 cv58.1802 33.7578 56.73 31.5078 55.2798 29.2075 cv53.5801 29.1577 52.0801 25.2075 50.48 28.0078 cv51.0801 30.7578 55.0801 30.2075 55.5298 33.3076 cv53.48 36.8076 49.1299 34.5576 45.48 35.2075 cv43.48 35.7075 42.1802 32.1577 40.4302 34.7075 cv39.6802 35.4575 li35.9302 34.1079 29.0298 38.6079 28.1802 32.1079 cv27.98 31.0576 29.1802 30.4077 29.8799 29.9077 cv33.6465 29.2075 32.0801 22.4077 33.23 18.6577 cv30.8301 15.9077 35.6299 10.8579 30.5801 10.2578 cv29.7798 9.40771 28.48 9.20752 27.9302 8.30762 cv24.98 11.2578 28.5801 15.0576 26.73 18.4077 cv26.1299 19.2075 25.1802 18.9575 24.0801 18.9077 cv22.48 17.3076 23.4302 14.2578 21.48 12.6577 cv21.9302 10.9575 20.0298 11.2075 19.2798 10.5078 cv15.48 10.5078 li12.5801 11.9077 10.73 14.4077 10.8799 17.7075 cv10.4302 18.1577 li10.5298 22.0576 9.58008 27.9077 14.0298 29.4575 cv15.48 30.0576 17.6802 30.4575 19.5298 29.9077 cv23.6802 29.1577 22.8799 18.1577 27.48 25.6079 cv27.2798 29.6079 25.2798 33.4077 21.9302 35.7075 cv20.7798 35.9077 19.73 36.1577 18.5801 36.4077 cv18.0298 35.4077 17.1299 36.3579 16.4302 36.4077 cv12.98 35.6079 9.77979 33.7578 8.27979 30.4077 cv8.72998 29.4077 7.47998 29.0078 7.27979 28.2578 cv7.52979 28.0078 li6.18018 26.8579 7.22998 24.6577 6.58008 23.2075 cv5.43018 20.8579 6.77979 18.1079 6.33008 15.7578 cv6.97998 10.7075 9.97998 5.20752 15.23 3.50781 cv18.9302 2.15771 21.48 7.30762 24.5801 3.75781 cvcpf0 lw82.6299 27.0576 mo81.48 26.7578 81.9468 25.5742 81.1465 24.8745 cv80.8467 25.4746 79.3301 25.6079 78.7798 25.6079 cv78.1299 26.3076 76.6299 26.5078 76.8799 27.7578 cv78.4302 30.1577 81.1802 29.1577 83.3799 28.7075 cv84.6802 27.2075 88.1802 27.5078 86.98 24.6577 cv84.0298 22.6079 84.9302 27.2075 82.6299 27.0576 cvcp39.9302 19.8579 mo39.1802 21.0576 37.48 22.0576 38.48 23.7075 cv37.3301 24.6577 37.98 26.3076 36.7798 27.3076 cv35.98 30.4077 39.6299 29.7578 40.8799 31.3579 cv43.1465 29.3745 45.1631 29.9243 46.3135 28.3745 cv45.8135 25.4243 46.8799 22.1909 45.48 19.041 cv44.73 16.3413 41.48 19.3076 39.9302 19.8579 cvcp93.1802 17.9077 mo91.5801 20.7578 93.2798 23.8579 92.73 27.0576 cv94.0298 27.3076 94.9302 25.5078 96.5801 25.8579 cv97.0801 26.5078 97.9302 27.0576 98.23 27.7578 cv97.5801 30.2075 99.3799 32.2578 99.4302 34.7075 cv99.98 35.2578 100.63 35.2075 101.13 34.5078 cv101.83 29.4575 101.663 24.3911 101.48 19.041 cv99.6299 16.3413 95.8799 18.5078 93.1802 17.9077 cvcp111.43 17.7075 mo109.53 17.4077 107.38 18.9077 106.38 20.5576 cv105.68 23.4077 105.93 26.1577 107.13 28.9575 cv108.78 29.1577 110.28 30.4077 111.93 29.9077 cv115.33 28.5078 116.146 26.3745 115.78 21.7578 cv115.03 20.1079 113.53 17.2075 111.43 17.7075 cvcp61.2798 16.9575 mo60.3301 18.3076 58.2632 19.3911 58.8135 21.041 cv62.0635 20.0913 65.4468 21.6079 68.1465 19.7075 cv67.8135 15.8745 63.7798 16.9575 61.2798 16.9575 cvcp85.5298 16.7075 mo83.98 16.6079 81.5801 15.7578 80.48 17.4575 cv79.8799 18.3076 79.0298 20.1079 80.23 20.5576 cv82.1802 20.2578 84.1802 20.2075 85.98 19.6079 cv86.23 18.9575 87.6133 18.6743 87.3135 17.8745 cv87.2632 17.1743 85.9302 17.0078 85.5298 16.7075 cvcp24.5801 3.75781 mo26.2798 3.95752 27.2798 7.90771 28.8799 4.70752 cv31.23 3.70752 34.1299 3.45752 36.3301 4.95752 cv39.6802 7.30762 35.8799 11.5078 37.7798 14.3076 cv39.23 12.3579 41.7798 12.3076 43.5298 11.7075 cv44.8799 10.9077 45.9468 12.5576 46.6465 10.7075 cv46.7964 10.1079 46.8301 9.10791 47.6299 8.80762 cv48.23 8.60791 48.6802 9.05762 48.8301 9.50781 cv49.3799 10.8579 47.7798 11.3076 48.3301 12.6577 cv50.6802 14.5576 50.6802 17.4575 51.9302 19.8579 cv52.8799 20.1079 53.5801 19.5576 54.0801 18.9077 cv54.0801 13.9575 59.1299 12.8076 62.73 11.4575 cv66.7798 10.6577 70.0801 12.6079 72.5801 15.5078 cv72.1802 18.5078 76.73 22.3076 72.3301 24.1577 cv69.0298 23.4575 65.7798 25.6079 62.48 24.1577 cv60.8301 23.8579 59.4302 24.4077 58.4302 25.8579 cv58.4302 28.1079 60.98 28.2578 62.2798 29.4575 cv66.3799 30.4575 68.98 27.6577 71.8799 25.6079 cv74.1299 25.3579 75.2798 22.3076 77.1299 21.0576 cv75.5298 19.2578 73.23 17.4575 74.48 14.8076 cv75.5298 13.8579 76.23 11.9077 77.8799 11.4575 cv80.5801 12.5078 83.98 10.3579 87.23 11.4575 cv89.0801 11.4575 90.5298 14.4077 92.0298 13.3579 cv92.1299 11.8076 91.5298 9.70752 93.48 9.05762 cv94.98 9.35791 95.1299 10.8579 95.8799 12.1577 cv96.0801 10.9077 96.1802 9.45752 97.2798 8.55762 cv97.5801 8.60791 98.0801 8.40771 98.2798 8.80762 cv98.5801 8.00781 99.3301 8.45752 99.9302 8.30762 cv100.98 8.85791 101.73 9.90771 101.88 10.9575 cv103.73 11.5078 105.33 13.3579 107.38 12.6577 cv109.48 11.5078 112.58 10.8579 114.83 12.1577 cv116.73 12.1079 117.93 14.2075 119.38 14.8076 cv121.98 17.8076 122.58 22.2075 121.53 26.1079 cv119.43 28.6079 120.18 32.7578 116.48 34.2578 cv113.28 35.0078 109.83 34.5576 106.68 34.0078 cv105.58 34.5576 106.68 35.4077 106.43 36.1577 cv108.23 38.3076 113.313 37.7075 112.18 41.9077 cv110.43 44.5078 106.13 44.1079 104.03 44.1079 cv101.68 43.5576 98.7798 44.4077 97.0801 42.4077 cv96.6802 40.1079 93.6299 38.1079 95.1299 35.9077 cv95.2798 35.1079 95.0298 34.2578 94.1802 34.0078 cv91.1299 34.8076 89.1299 31.4077 86.2798 33.3076 cv82.5298 34.9575 78.5298 34.5078 74.98 32.1079 cv73.5801 29.4575 72.3799 32.9077 70.8799 32.8076 cv68.1802 34.7075 64.1802 36.3076 61.0801 34.2578 cv58.1802 33.7578 56.73 31.5078 55.2798 29.2075 cv53.5801 29.1577 52.0801 25.2075 50.48 28.0078 cv51.0801 30.7578 55.0801 30.2075 55.5298 33.3076 cv53.48 36.8076 49.1299 34.5576 45.48 35.2075 cv43.48 35.7075 42.1802 32.1577 40.4302 34.7075 cv39.6802 35.4575 li35.9302 34.1079 29.0298 38.6079 28.1802 32.1079 cv27.98 31.0576 29.1802 30.4077 29.8799 29.9077 cv33.6465 29.2075 32.0801 22.4077 33.23 18.6577 cv30.8301 15.9077 35.6299 10.8579 30.5801 10.2578 cv29.7798 9.40771 28.48 9.20752 27.9302 8.30762 cv24.98 11.2578 28.5801 15.0576 26.73 18.4077 cv26.1299 19.2075 25.1802 18.9575 24.0801 18.9077 cv22.48 17.3076 23.4302 14.2578 21.48 12.6577 cv21.9302 10.9575 20.0298 11.2075 19.2798 10.5078 cv15.48 10.5078 li12.5801 11.9077 10.73 14.4077 10.8799 17.7075 cv10.4302 18.1577 li10.5298 22.0576 9.58008 27.9077 14.0298 29.4575 cv15.48 30.0576 17.6802 30.4575 19.5298 29.9077 cv23.6802 29.1577 22.8799 18.1577 27.48 25.6079 cv27.2798 29.6079 25.2798 33.4077 21.9302 35.7075 cv20.7798 35.9077 19.73 36.1577 18.5801 36.4077 cv18.0298 35.4077 17.1299 36.3579 16.4302 36.4077 cv12.98 35.6079 9.77979 33.7578 8.27979 30.4077 cv8.72998 29.4077 7.47998 29.0078 7.27979 28.2578 cv7.52979 28.0078 li6.18018 26.8579 7.22998 24.6577 6.58008 23.2075 cv5.43018 20.8579 6.77979 18.1079 6.33008 15.7578 cv6.97998 10.7075 9.97998 5.20752 15.23 3.50781 cv18.9302 2.15771 21.48 7.30762 24.5801 3.75781 cvcp@146.376 9.72852 mo148.209 9.22852 150.542 10.2285 151.542 10.895 cv152.709 14.7285 150.179 16.4438 152.042 17.562 cv154.542 19.062 155.201 17.1162 158.209 17.562 cv162.709 18.2285 159.875 21.062 160.209 23.395 cv160.542 25.7285 161.709 27.895 160.542 28.562 cv159.376 29.2285 155.876 29.895 154.542 31.2285 cv152.042 29.395 157.284 28.9429 156.209 27.062 cv155.542 25.895 154.375 24.895 152.709 25.2285 cv151.042 25.562 149.376 27.062 149.376 27.062 cv149.376 27.062 150.042 29.062 148.876 29.395 cv147.709 29.7285 146.709 30.2285 146.709 27.2285 cv146.709 24.2285 146.709 19.895 146.376 17.895 cv146.042 15.895 146.376 9.72852 146.376 9.72852 cvcp224.208 25.895 mo227.542 24.7285 226.875 28.562 226.875 28.562 cv226.042 30.562 220.875 27.062 224.208 25.895 cvcp156.174 10.2358 mo155.974 10.8857 157.092 4.19531 156.192 4.59521 cv155.542 4.74512 155.042 4.34521 154.542 4.09521 cv147.493 2.24512 141.042 4.64502 133.893 3.84521 cv129.942 5.04541 132.442 9.14502 131.743 11.7954 cv132.042 14.1953 131.893 16.6953 133.643 18.4951 cv140.342 19.1953 134.643 11.7954 138.692 9.59521 cv139.442 9.79541 140.592 9.19531 141.092 10.0952 cv142.393 15.1953 141.542 22.395 141.792 28.5952 cv140.743 30.4453 138.342 28.9951 136.743 29.7954 cv135.442 30.6953 133.993 31.9453 134.592 33.8452 cv136.842 36.1953 139.743 35.3452 142.542 35.5454 cv143.792 35.0952 145.393 35.4951 146.342 34.3452 cv147.442 34.0952 148.092 34.7954 148.993 35.0454 cv150.243 34.9951 151.993 34.5952 153.092 33.395 cv154.842 32.8452 154.893 34.5952 156.192 35.0454 cv157.143 35.5454 158.292 34.9951 159.342 34.7954 cv163.692 34.395 170.442 36.6953 172.743 32.1953 cv173.442 29.8452 171.342 28.5952 170.342 26.895 cv169.143 25.7451 167.743 26.9951 166.743 27.8452 cv165.942 27.145 165.243 26.3452 165.542 25.1953 cv167.442 23.3452 164.592 20.4951 167.243 18.9951 cv171.042 14.5952 170.792 22.2954 174.442 21.5952 cv176.493 21.145 177.342 18.895 178.743 17.5454 cv182.592 17.5454 li183.642 17.645 185.493 18.9951 184.743 20.1953 cv184.942 22.6953 185.542 26.1953 184.292 28.0952 cv182.192 27.8452 179.892 29.1953 178.292 30.2451 cv178.142 31.9453 177.243 33.7954 179.493 34.5952 cv191.243 35.5454 li192.942 34.4951 195.392 34.4951 197.243 34.5952 cv198.942 34.2954 197.342 33.395 198.192 32.395 cv199.292 31.7954 200.493 32.8452 201.092 33.5952 cv203.892 32.9453 205.292 35.8452 208.292 34.7954 cv210.192 34.395 212.493 31.4951 214.042 33.5952 cv215.842 36.1826 221.542 35.562 226.708 35.7285 cv230.909 34.9287 237.875 37.7285 238.743 34.5952 cv240.092 32.645 241.392 30.4453 239.493 28.3452 cv237.942 28.1953 236.192 28.645 234.942 27.8452 cv233.342 25.895 229.993 23.1953 231.342 20.1953 cv233.342 17.5454 237.559 18.6284 239.708 16.7285 cv240.059 14.9785 239.642 11.9951 238.542 10.3452 cv236.243 10.3452 234.392 9.29541 232.292 9.84521 cv229.342 10.645 227.192 13.7954 226.542 16.5952 cv225.342 17.2451 225.342 19.2954 223.642 18.4951 cv223.092 17.2954 223.208 15.9619 223.708 14.562 cv223.109 10.5117 225.493 5.94531 222.442 2.64502 cv219.392 1.74512 216.342 1.49512 212.842 0.995117 cv209.842 2.24512 212.942 4.59521 212.142 6.49512 cv212.592 9.59521 215.642 9.44531 217.642 11.0454 cv218.192 14.5952 217.592 18.2451 218.142 22.0952 cv218.042 23.4951 216.493 23.3452 215.743 23.9951 cv211.442 23.5454 210.792 29.645 205.892 28.0952 cv203.792 26.8452 201.243 25.9951 200.592 23.2954 cv199.993 21.5454 200.592 19.645 201.542 18.2451 cv203.342 17.5454 204.692 15.5454 207.092 16.3452 cv208.342 17.1953 208.592 18.895 208.743 20.395 cv209.542 21.6953 211.042 22.9951 212.592 22.0952 cv214.142 20.9951 214.392 19.5952 215.243 17.9951 cv214.842 17.0454 215.042 15.7954 214.993 14.645 cv214.142 12.4453 212.192 10.9453 209.942 10.3452 cv208.642 8.59521 206.592 9.69531 204.442 9.39502 cv200.792 9.39502 198.442 13.645 196.743 15.8452 cv193.542 20.062 197.326 24.2954 196.375 28.395 cv195.175 27.9951 192.042 29.0952 191.243 26.895 cv191.042 22.395 191.542 18.2285 190.743 13.4453 cv190.292 12.2954 189.243 11.395 189.342 10.0952 cv189.993 8.34521 191.642 6.29541 190.993 4.09521 cv190.392 2.09521 188.342 1.64502 186.442 1.94531 cv184.842 2.24512 183.942 3.99512 183.342 5.29541 cv182.042 7.29541 185.792 8.64502 183.792 10.3452 cv181.692 11.0454 179.192 10.6953 177.542 12.4951 cv175.743 11.5454 173.592 10.5952 171.792 10.3452 cv169.292 10.5952 167.842 14.1953 164.842 12.4951 cv164.042 11.7954 159.674 12.3857 158.674 11.7358 cv156.174 10.2358 licp194.842 9.39502 mo193.792 9.14502 192.842 9.59521 192.442 10.5952 cv192.692 11.5952 191.642 12.6953 192.692 13.4453 cv193.493 14.7954 194.392 13.0454 195.092 13.1953 cv195.842 12.5454 195.892 11.5952 195.842 10.5952 cv195.442 10.1953 195.042 9.84521 194.842 9.39502 cvcpf146.376 9.72852 mo148.209 9.22852 150.542 10.2285 151.542 10.895 cv152.709 14.7285 150.179 16.4438 152.042 17.562 cv154.542 19.062 155.201 17.1162 158.209 17.562 cv162.709 18.2285 159.875 21.062 160.209 23.395 cv160.542 25.7285 161.709 27.895 160.542 28.562 cv159.376 29.2285 155.876 29.895 154.542 31.2285 cv152.042 29.395 157.284 28.9429 156.209 27.062 cv155.542 25.895 154.375 24.895 152.709 25.2285 cv151.042 25.562 149.376 27.062 149.376 27.062 cv149.376 27.062 150.042 29.062 148.876 29.395 cv147.709 29.7285 146.709 30.2285 146.709 27.2285 cv146.709 24.2285 146.709 19.895 146.376 17.895 cv146.042 15.895 146.376 9.72852 146.376 9.72852 cvcp224.208 25.895 mo227.542 24.7285 226.875 28.562 226.875 28.562 cv226.042 30.562 220.875 27.062 224.208 25.895 cvcp156.174 10.2358 mo155.974 10.8857 157.092 4.19531 156.192 4.59521 cv155.542 4.74512 155.042 4.34521 154.542 4.09521 cv147.493 2.24512 141.042 4.64502 133.893 3.84521 cv129.942 5.04541 132.442 9.14502 131.743 11.7954 cv132.042 14.1953 131.893 16.6953 133.643 18.4951 cv140.342 19.1953 134.643 11.7954 138.692 9.59521 cv139.442 9.79541 140.592 9.19531 141.092 10.0952 cv142.393 15.1953 141.542 22.395 141.792 28.5952 cv140.743 30.4453 138.342 28.9951 136.743 29.7954 cv135.442 30.6953 133.993 31.9453 134.592 33.8452 cv136.842 36.1953 139.743 35.3452 142.542 35.5454 cv143.792 35.0952 145.393 35.4951 146.342 34.3452 cv147.442 34.0952 148.092 34.7954 148.993 35.0454 cv150.243 34.9951 151.993 34.5952 153.092 33.395 cv154.842 32.8452 154.893 34.5952 156.192 35.0454 cv157.143 35.5454 158.292 34.9951 159.342 34.7954 cv163.692 34.395 170.442 36.6953 172.743 32.1953 cv173.442 29.8452 171.342 28.5952 170.342 26.895 cv169.143 25.7451 167.743 26.9951 166.743 27.8452 cv165.942 27.145 165.243 26.3452 165.542 25.1953 cv167.442 23.3452 164.592 20.4951 167.243 18.9951 cv171.042 14.5952 170.792 22.2954 174.442 21.5952 cv176.493 21.145 177.342 18.895 178.743 17.5454 cv182.592 17.5454 li183.642 17.645 185.493 18.9951 184.743 20.1953 cv184.942 22.6953 185.542 26.1953 184.292 28.0952 cv182.192 27.8452 179.892 29.1953 178.292 30.2451 cv178.142 31.9453 177.243 33.7954 179.493 34.5952 cv191.243 35.5454 li192.942 34.4951 195.392 34.4951 197.243 34.5952 cv198.942 34.2954 197.342 33.395 198.192 32.395 cv199.292 31.7954 200.493 32.8452 201.092 33.5952 cv203.892 32.9453 205.292 35.8452 208.292 34.7954 cv210.192 34.395 212.493 31.4951 214.042 33.5952 cv215.842 36.1826 221.542 35.562 226.708 35.7285 cv230.909 34.9287 237.875 37.7285 238.743 34.5952 cv240.092 32.645 241.392 30.4453 239.493 28.3452 cv237.942 28.1953 236.192 28.645 234.942 27.8452 cv233.342 25.895 229.993 23.1953 231.342 20.1953 cv233.342 17.5454 237.559 18.6284 239.708 16.7285 cv240.059 14.9785 239.642 11.9951 238.542 10.3452 cv236.243 10.3452 234.392 9.29541 232.292 9.84521 cv229.342 10.645 227.192 13.7954 226.542 16.5952 cv225.342 17.2451 225.342 19.2954 223.642 18.4951 cv223.092 17.2954 223.208 15.9619 223.708 14.562 cv223.109 10.5117 225.493 5.94531 222.442 2.64502 cv219.392 1.74512 216.342 1.49512 212.842 0.995117 cv209.842 2.24512 212.942 4.59521 212.142 6.49512 cv212.592 9.59521 215.642 9.44531 217.642 11.0454 cv218.192 14.5952 217.592 18.2451 218.142 22.0952 cv218.042 23.4951 216.493 23.3452 215.743 23.9951 cv211.442 23.5454 210.792 29.645 205.892 28.0952 cv203.792 26.8452 201.243 25.9951 200.592 23.2954 cv199.993 21.5454 200.592 19.645 201.542 18.2451 cv203.342 17.5454 204.692 15.5454 207.092 16.3452 cv208.342 17.1953 208.592 18.895 208.743 20.395 cv209.542 21.6953 211.042 22.9951 212.592 22.0952 cv214.142 20.9951 214.392 19.5952 215.243 17.9951 cv214.842 17.0454 215.042 15.7954 214.993 14.645 cv214.142 12.4453 212.192 10.9453 209.942 10.3452 cv208.642 8.59521 206.592 9.69531 204.442 9.39502 cv200.792 9.39502 198.442 13.645 196.743 15.8452 cv193.542 20.062 197.326 24.2954 196.375 28.395 cv195.175 27.9951 192.042 29.0952 191.243 26.895 cv191.042 22.395 191.542 18.2285 190.743 13.4453 cv190.292 12.2954 189.243 11.395 189.342 10.0952 cv189.993 8.34521 191.642 6.29541 190.993 4.09521 cv190.392 2.09521 188.342 1.64502 186.442 1.94531 cv184.842 2.24512 183.942 3.99512 183.342 5.29541 cv182.042 7.29541 185.792 8.64502 183.792 10.3452 cv181.692 11.0454 179.192 10.6953 177.542 12.4951 cv175.743 11.5454 173.592 10.5952 171.792 10.3452 cv169.292 10.5952 167.842 14.1953 164.842 12.4951 cv164.042 11.7954 159.674 12.3857 158.674 11.7358 cv156.174 10.2358 licp194.842 9.39502 mo193.792 9.14502 192.842 9.59521 192.442 10.5952 cv192.692 11.5952 191.642 12.6953 192.692 13.4453 cv193.493 14.7954 194.392 13.0454 195.092 13.1953 cv195.842 12.5454 195.892 11.5952 195.842 10.5952 cv195.442 10.1953 195.042 9.84521 194.842 9.39502 cvcp@217.142 26.395 mo216.442 26.9951 214.642 27.9951 215.243 29.0454 cv217.042 29.7285 li217.892 29.1284 218.442 28.4951 217.892 26.895 cv217.642 26.6953 217.542 26.2954 217.142 26.395 cvcp0 0 0 0 cmykf217.142 26.395 mo216.442 26.9951 214.642 27.9951 215.243 29.0454 cv217.042 29.7285 li217.892 29.1284 218.442 28.4951 217.892 26.895 cv217.642 26.6953 217.542 26.2954 217.142 26.395 cvcp0 0 0 1 cmyk@91.8799 61.2578 mo90.73 60.9575 91.1968 59.7744 90.3965 59.0742 cv90.0967 59.6743 88.5801 59.8076 88.0298 59.8076 cv87.3799 60.5078 85.8799 60.7075 86.1299 61.9575 cv87.6802 64.3579 90.4302 63.3579 92.6299 62.9077 cv93.9302 61.4077 97.4302 61.7075 96.23 58.8579 cv93.2798 56.8076 94.1802 61.4077 91.8799 61.2578 cvcp49.1802 54.0576 mo48.4302 55.2578 46.73 56.2578 47.73 57.9077 cv46.5801 58.8579 47.23 60.5078 46.0298 61.5078 cv45.23 64.6079 48.8799 63.9575 50.1299 65.5576 cv52.3965 63.5742 54.4131 64.1245 55.5635 62.5742 cv55.0635 59.6245 56.1299 56.3911 54.73 53.2412 cv53.98 50.541 50.73 53.5078 49.1802 54.0576 cvcp102.43 52.1079 mo100.83 54.9575 102.53 58.0576 101.98 61.2578 cv103.28 61.5078 104.18 59.7075 105.83 60.0576 cv106.33 60.7075 107.18 61.2578 107.48 61.9575 cv106.83 64.4077 108.63 66.4575 108.68 68.9077 cv109.23 69.4575 109.88 69.4077 110.38 68.7075 cv111.08 63.6577 110.913 58.5913 110.73 53.2412 cv108.88 50.541 105.13 52.7075 102.43 52.1079 cvcp120.68 51.9077 mo118.78 51.6079 116.63 53.1079 115.63 54.7578 cv114.93 57.6079 115.18 60.3579 116.38 63.1577 cv118.03 63.3579 119.53 64.6079 121.18 64.1079 cv124.58 62.7075 125.396 60.5742 125.03 55.9575 cv124.28 54.3076 122.78 51.4077 120.68 51.9077 cvcp70.5298 51.1577 mo69.5801 52.5078 67.5132 53.5913 68.0635 55.2412 cv71.3135 54.291 74.6968 55.8076 77.3965 53.9077 cv77.0635 50.0742 73.0298 51.1577 70.5298 51.1577 cvcp94.7798 50.9077 mo93.23 50.8076 90.8301 49.9575 89.73 51.6577 cv89.1299 52.5078 88.2798 54.3076 89.48 54.7578 cv91.4302 54.4575 93.4302 54.4077 95.23 53.8076 cv95.48 53.1577 96.8633 52.8745 96.5635 52.0742 cv96.5132 51.3745 95.1802 51.2075 94.7798 50.9077 cvcp33.8301 37.9575 mo35.5298 38.1577 36.5298 42.1079 38.1299 38.9077 cv40.48 37.9077 43.3799 37.6577 45.5801 39.1577 cv48.9302 41.5078 45.1299 45.7075 47.0298 48.5078 cv48.48 46.5576 51.0298 46.5078 52.7798 45.9077 cv54.1299 45.1079 55.1968 46.7578 55.8965 44.9077 cv56.0464 44.3076 56.0801 43.3076 56.8799 43.0078 cv57.48 42.8076 57.9302 43.2578 58.0801 43.7075 cv58.6299 45.0576 57.0298 45.5078 57.5801 46.8579 cv59.9302 48.7578 59.9302 51.6577 61.1802 54.0576 cv62.1299 54.3076 62.8301 53.7578 63.3301 53.1079 cv63.3301 48.1577 68.3799 47.0078 71.98 45.6577 cv76.0298 44.8579 79.3301 46.8076 81.8301 49.7075 cv81.4302 52.7075 85.98 56.5078 81.5801 58.3579 cv78.2798 57.6577 75.0298 59.8076 71.73 58.3579 cv70.0801 58.0576 68.6802 58.6079 67.6802 60.0576 cv67.6802 62.3076 70.23 62.4575 71.5298 63.6577 cv75.6299 64.6577 78.23 61.8579 81.1299 59.8076 cv83.3799 59.5576 84.5298 56.5078 86.3799 55.2578 cv84.7798 53.4575 82.48 51.6577 83.73 49.0078 cv84.7798 48.0576 85.48 46.1079 87.1299 45.6577 cv89.8301 46.7075 93.23 44.5576 96.48 45.6577 cv98.3301 45.6577 99.7798 48.6079 101.28 47.5576 cv101.38 46.0078 100.78 43.9077 102.73 43.2578 cv104.23 43.5576 104.38 45.0576 105.13 46.3579 cv105.33 45.1079 105.43 43.6577 106.53 42.7578 cv106.83 42.8076 107.33 42.6079 107.53 43.0078 cv107.83 42.2075 108.58 42.6577 109.18 42.5078 cv110.23 43.0576 110.98 44.1079 111.13 45.1577 cv112.98 45.7075 114.58 47.5576 116.63 46.8579 cv118.73 45.7075 121.83 45.0576 124.08 46.3579 cv125.98 46.3076 127.18 48.4077 128.63 49.0078 cv131.23 52.0078 131.83 56.4077 130.78 60.3076 cv128.68 62.8076 129.43 66.9575 125.73 68.4575 cv122.53 69.2075 119.08 68.7578 115.93 68.2075 cv114.83 68.7578 115.93 69.6079 115.68 70.3579 cv117.48 72.5078 122.563 71.9077 121.43 76.1079 cv119.68 78.7075 115.38 78.3076 113.28 78.3076 cv110.93 77.7578 108.03 78.6079 106.33 76.6079 cv105.93 74.3076 102.88 72.3076 104.38 70.1079 cv104.53 69.3076 104.28 68.4575 103.43 68.2075 cv100.38 69.0078 98.3799 65.6079 95.5298 67.5078 cv91.7798 69.1577 87.7798 68.7075 84.23 66.3076 cv82.8301 63.6577 81.6299 67.1079 80.1299 67.0078 cv77.4302 68.9077 73.4302 70.5078 70.3301 68.4575 cv67.4302 67.9575 65.98 65.7075 64.5298 63.4077 cv62.8301 63.3579 61.3301 59.4077 59.73 62.2075 cv60.3301 64.9575 64.3301 64.4077 64.7798 67.5078 cv62.73 71.0078 58.3799 68.7578 54.73 69.4077 cv52.73 69.9077 51.4302 66.3579 49.6802 68.9077 cv48.9302 69.6577 li45.1802 68.3076 38.2798 72.8076 37.4302 66.3076 cv37.23 65.2578 38.4302 64.6079 39.1299 64.1079 cv42.8965 63.4077 41.3301 56.6079 42.48 52.8579 cv40.0801 50.1079 44.8799 45.0576 39.8301 44.4575 cv39.0298 43.6079 37.73 43.4077 37.1802 42.5078 cv34.23 45.4575 37.8301 49.2578 35.98 52.6079 cv35.3799 53.4077 34.4302 53.1577 33.3301 53.1079 cv31.73 51.5078 32.6802 48.4575 30.73 46.8579 cv31.1802 45.1577 29.2798 45.4077 28.5298 44.7075 cv24.73 44.7075 li21.8301 46.1079 19.98 48.6079 20.1299 51.9077 cv19.6802 52.3579 li19.7798 56.2578 18.8301 62.1079 23.2798 63.6577 cv24.73 64.2578 26.9302 64.6577 28.7798 64.1079 cv32.9302 63.3579 32.1299 52.3579 36.73 59.8076 cv36.5298 63.8076 34.5298 67.6079 31.1802 69.9077 cv30.0298 70.1079 28.98 70.3579 27.8301 70.6079 cv27.2798 69.6079 26.3799 70.5576 25.6802 70.6079 cv22.23 69.8076 19.0298 67.9575 17.5298 64.6079 cv17.98 63.6079 16.73 63.2075 16.5298 62.4575 cv16.7798 62.2075 li15.4302 61.0576 16.48 58.8579 15.8301 57.4077 cv14.6802 55.0576 16.0298 52.3076 15.5801 49.9575 cv16.23 44.9077 19.23 39.4077 24.48 37.7075 cv28.1802 36.3579 30.73 41.5078 33.8301 37.9575 cvcpf91.8799 61.2578 mo90.73 60.9575 91.1968 59.7744 90.3965 59.0742 cv90.0967 59.6743 88.5801 59.8076 88.0298 59.8076 cv87.3799 60.5078 85.8799 60.7075 86.1299 61.9575 cv87.6802 64.3579 90.4302 63.3579 92.6299 62.9077 cv93.9302 61.4077 97.4302 61.7075 96.23 58.8579 cv93.2798 56.8076 94.1802 61.4077 91.8799 61.2578 cvcp49.1802 54.0576 mo48.4302 55.2578 46.73 56.2578 47.73 57.9077 cv46.5801 58.8579 47.23 60.5078 46.0298 61.5078 cv45.23 64.6079 48.8799 63.9575 50.1299 65.5576 cv52.3965 63.5742 54.4131 64.1245 55.5635 62.5742 cv55.0635 59.6245 56.1299 56.3911 54.73 53.2412 cv53.98 50.541 50.73 53.5078 49.1802 54.0576 cvcp102.43 52.1079 mo100.83 54.9575 102.53 58.0576 101.98 61.2578 cv103.28 61.5078 104.18 59.7075 105.83 60.0576 cv106.33 60.7075 107.18 61.2578 107.48 61.9575 cv106.83 64.4077 108.63 66.4575 108.68 68.9077 cv109.23 69.4575 109.88 69.4077 110.38 68.7075 cv111.08 63.6577 110.913 58.5913 110.73 53.2412 cv108.88 50.541 105.13 52.7075 102.43 52.1079 cvcp120.68 51.9077 mo118.78 51.6079 116.63 53.1079 115.63 54.7578 cv114.93 57.6079 115.18 60.3579 116.38 63.1577 cv118.03 63.3579 119.53 64.6079 121.18 64.1079 cv124.58 62.7075 125.396 60.5742 125.03 55.9575 cv124.28 54.3076 122.78 51.4077 120.68 51.9077 cvcp70.5298 51.1577 mo69.5801 52.5078 67.5132 53.5913 68.0635 55.2412 cv71.3135 54.291 74.6968 55.8076 77.3965 53.9077 cv77.0635 50.0742 73.0298 51.1577 70.5298 51.1577 cvcp94.7798 50.9077 mo93.23 50.8076 90.8301 49.9575 89.73 51.6577 cv89.1299 52.5078 88.2798 54.3076 89.48 54.7578 cv91.4302 54.4575 93.4302 54.4077 95.23 53.8076 cv95.48 53.1577 96.8633 52.8745 96.5635 52.0742 cv96.5132 51.3745 95.1802 51.2075 94.7798 50.9077 cvcp33.8301 37.9575 mo35.5298 38.1577 36.5298 42.1079 38.1299 38.9077 cv40.48 37.9077 43.3799 37.6577 45.5801 39.1577 cv48.9302 41.5078 45.1299 45.7075 47.0298 48.5078 cv48.48 46.5576 51.0298 46.5078 52.7798 45.9077 cv54.1299 45.1079 55.1968 46.7578 55.8965 44.9077 cv56.0464 44.3076 56.0801 43.3076 56.8799 43.0078 cv57.48 42.8076 57.9302 43.2578 58.0801 43.7075 cv58.6299 45.0576 57.0298 45.5078 57.5801 46.8579 cv59.9302 48.7578 59.9302 51.6577 61.1802 54.0576 cv62.1299 54.3076 62.8301 53.7578 63.3301 53.1079 cv63.3301 48.1577 68.3799 47.0078 71.98 45.6577 cv76.0298 44.8579 79.3301 46.8076 81.8301 49.7075 cv81.4302 52.7075 85.98 56.5078 81.5801 58.3579 cv78.2798 57.6577 75.0298 59.8076 71.73 58.3579 cv70.0801 58.0576 68.6802 58.6079 67.6802 60.0576 cv67.6802 62.3076 70.23 62.4575 71.5298 63.6577 cv75.6299 64.6577 78.23 61.8579 81.1299 59.8076 cv83.3799 59.5576 84.5298 56.5078 86.3799 55.2578 cv84.7798 53.4575 82.48 51.6577 83.73 49.0078 cv84.7798 48.0576 85.48 46.1079 87.1299 45.6577 cv89.8301 46.7075 93.23 44.5576 96.48 45.6577 cv98.3301 45.6577 99.7798 48.6079 101.28 47.5576 cv101.38 46.0078 100.78 43.9077 102.73 43.2578 cv104.23 43.5576 104.38 45.0576 105.13 46.3579 cv105.33 45.1079 105.43 43.6577 106.53 42.7578 cv106.83 42.8076 107.33 42.6079 107.53 43.0078 cv107.83 42.2075 108.58 42.6577 109.18 42.5078 cv110.23 43.0576 110.98 44.1079 111.13 45.1577 cv112.98 45.7075 114.58 47.5576 116.63 46.8579 cv118.73 45.7075 121.83 45.0576 124.08 46.3579 cv125.98 46.3076 127.18 48.4077 128.63 49.0078 cv131.23 52.0078 131.83 56.4077 130.78 60.3076 cv128.68 62.8076 129.43 66.9575 125.73 68.4575 cv122.53 69.2075 119.08 68.7578 115.93 68.2075 cv114.83 68.7578 115.93 69.6079 115.68 70.3579 cv117.48 72.5078 122.563 71.9077 121.43 76.1079 cv119.68 78.7075 115.38 78.3076 113.28 78.3076 cv110.93 77.7578 108.03 78.6079 106.33 76.6079 cv105.93 74.3076 102.88 72.3076 104.38 70.1079 cv104.53 69.3076 104.28 68.4575 103.43 68.2075 cv100.38 69.0078 98.3799 65.6079 95.5298 67.5078 cv91.7798 69.1577 87.7798 68.7075 84.23 66.3076 cv82.8301 63.6577 81.6299 67.1079 80.1299 67.0078 cv77.4302 68.9077 73.4302 70.5078 70.3301 68.4575 cv67.4302 67.9575 65.98 65.7075 64.5298 63.4077 cv62.8301 63.3579 61.3301 59.4077 59.73 62.2075 cv60.3301 64.9575 64.3301 64.4077 64.7798 67.5078 cv62.73 71.0078 58.3799 68.7578 54.73 69.4077 cv52.73 69.9077 51.4302 66.3579 49.6802 68.9077 cv48.9302 69.6577 li45.1802 68.3076 38.2798 72.8076 37.4302 66.3076 cv37.23 65.2578 38.4302 64.6079 39.1299 64.1079 cv42.8965 63.4077 41.3301 56.6079 42.48 52.8579 cv40.0801 50.1079 44.8799 45.0576 39.8301 44.4575 cv39.0298 43.6079 37.73 43.4077 37.1802 42.5078 cv34.23 45.4575 37.8301 49.2578 35.98 52.6079 cv35.3799 53.4077 34.4302 53.1577 33.3301 53.1079 cv31.73 51.5078 32.6802 48.4575 30.73 46.8579 cv31.1802 45.1577 29.2798 45.4077 28.5298 44.7075 cv24.73 44.7075 li21.8301 46.1079 19.98 48.6079 20.1299 51.9077 cv19.6802 52.3579 li19.7798 56.2578 18.8301 62.1079 23.2798 63.6577 cv24.73 64.2578 26.9302 64.6577 28.7798 64.1079 cv32.9302 63.3579 32.1299 52.3579 36.73 59.8076 cv36.5298 63.8076 34.5298 67.6079 31.1802 69.9077 cv30.0298 70.1079 28.98 70.3579 27.8301 70.6079 cv27.2798 69.6079 26.3799 70.5576 25.6802 70.6079 cv22.23 69.8076 19.0298 67.9575 17.5298 64.6079 cv17.98 63.6079 16.73 63.2075 16.5298 62.4575 cv16.7798 62.2075 li15.4302 61.0576 16.48 58.8579 15.8301 57.4077 cv14.6802 55.0576 16.0298 52.3076 15.5801 49.9575 cv16.23 44.9077 19.23 39.4077 24.48 37.7075 cv28.1802 36.3579 30.73 41.5078 33.8301 37.9575 cvcp@155.626 43.9287 mo157.459 43.4287 159.792 44.4287 160.792 45.0952 cv161.959 48.9287 159.429 50.644 161.292 51.7617 cv163.792 53.2617 164.451 51.3159 167.459 51.7617 cv171.958 52.4287 169.125 55.2617 169.459 57.5952 cv169.792 59.9287 170.958 62.0952 169.792 62.7617 cv168.626 63.4287 165.126 64.0952 163.792 65.4287 cv161.292 63.5952 166.534 63.1431 165.459 61.2617 cv164.792 60.0952 163.625 59.0952 161.959 59.4287 cv160.292 59.7617 158.626 61.2617 158.626 61.2617 cv158.626 61.2617 159.292 63.2617 158.126 63.5952 cv156.959 63.9287 155.959 64.4287 155.959 61.4287 cv155.959 58.4287 155.959 54.0952 155.626 52.0952 cv155.292 50.0952 155.626 43.9287 155.626 43.9287 cvcp233.458 60.0952 mo236.792 58.9287 236.125 62.7617 236.125 62.7617 cv235.292 64.7617 230.125 61.2617 233.458 60.0952 cvcp165.424 44.436 mo165.224 45.0859 166.342 38.395 165.442 38.7954 cv164.792 38.9453 164.292 38.5454 163.792 38.2954 cv156.743 36.4453 150.292 38.8452 143.143 38.0454 cv139.192 39.2451 141.692 43.3452 140.993 45.9951 cv141.292 48.395 141.143 50.895 142.893 52.6953 cv149.592 53.395 143.893 45.9951 147.942 43.7954 cv148.692 43.9951 149.842 43.395 150.342 44.2954 cv151.643 49.395 150.792 56.5952 151.042 62.7954 cv149.993 64.645 147.592 63.1953 145.993 63.9951 cv144.692 64.895 143.243 66.145 143.842 68.0454 cv146.092 70.395 148.993 69.5454 151.792 69.7451 cv153.042 69.2954 154.643 69.6953 155.592 68.5454 cv156.692 68.2954 157.342 68.9951 158.243 69.2451 cv159.493 69.1953 161.243 68.7954 162.342 67.5952 cv164.092 67.0454 164.143 68.7954 165.442 69.2451 cv166.393 69.7451 167.542 69.1953 168.592 68.9951 cv172.942 68.5952 179.692 70.895 181.993 66.395 cv182.692 64.0454 180.592 62.7954 179.592 61.0952 cv178.392 59.9453 176.993 61.1953 175.993 62.0454 cv175.192 61.3452 174.493 60.5454 174.792 59.395 cv176.692 57.5454 173.842 54.6953 176.493 53.1953 cv180.292 48.7954 180.042 56.4951 183.692 55.7954 cv185.743 55.3452 186.592 53.0952 187.993 51.7451 cv191.842 51.7451 li192.892 51.8452 194.743 53.1953 193.993 54.395 cv194.192 56.895 194.792 60.395 193.542 62.2954 cv191.442 62.0454 189.142 63.395 187.542 64.4453 cv187.392 66.145 186.493 67.9951 188.743 68.7954 cv200.493 69.7451 li202.192 68.6953 204.642 68.6953 206.493 68.7954 cv208.192 68.4951 206.592 67.5952 207.442 66.5952 cv208.542 65.9951 209.743 67.0454 210.342 67.7954 cv213.142 67.145 214.542 70.0454 217.542 68.9951 cv219.442 68.5952 221.743 65.6953 223.292 67.7954 cv225.092 70.3828 230.792 69.7617 235.958 69.9287 cv240.159 69.1284 247.125 71.9287 247.993 68.7954 cv249.342 66.8452 250.642 64.645 248.743 62.5454 cv247.192 62.395 245.442 62.8452 244.192 62.0454 cv242.592 60.0952 239.243 57.395 240.592 54.395 cv242.592 51.7451 246.809 52.8286 248.958 50.9287 cv249.309 49.1787 248.892 46.1953 247.792 44.5454 cv245.493 44.5454 243.642 43.4951 241.542 44.0454 cv238.592 44.8452 236.442 47.9951 235.792 50.7954 cv234.592 51.4453 234.592 53.4951 232.892 52.6953 cv232.342 51.4951 232.458 50.1621 232.958 48.7617 cv232.359 44.7119 234.743 40.145 231.692 36.8452 cv228.642 35.9453 225.592 35.6953 222.092 35.1953 cv219.092 36.4453 222.192 38.7954 221.392 40.6953 cv221.842 43.7954 224.892 43.645 226.892 45.2451 cv227.442 48.7954 226.842 52.4453 227.392 56.2954 cv227.292 57.6953 225.743 57.5454 224.993 58.1953 cv220.692 57.7451 220.042 63.8452 215.142 62.2954 cv213.042 61.0454 210.493 60.1953 209.842 57.4951 cv209.243 55.7451 209.842 53.8452 210.792 52.4453 cv212.592 51.7451 213.942 49.7451 216.342 50.5454 cv217.592 51.395 217.842 53.0952 217.993 54.5952 cv218.792 55.895 220.292 57.1953 221.842 56.2954 cv223.392 55.1953 223.642 53.7954 224.493 52.1953 cv224.092 51.2451 224.292 49.9951 224.243 48.8452 cv223.392 46.645 221.442 45.145 219.192 44.5454 cv217.892 42.7954 215.842 43.895 213.692 43.5952 cv210.042 43.5952 207.692 47.8452 205.993 50.0454 cv202.792 54.2617 206.576 58.4951 205.625 62.5952 cv204.425 62.1953 201.292 63.2954 200.493 61.0952 cv200.292 56.5952 200.792 52.4287 199.993 47.645 cv199.542 46.4951 198.493 45.5952 198.592 44.2954 cv199.243 42.5454 200.892 40.4951 200.243 38.2954 cv199.642 36.2954 197.592 35.8452 195.692 36.145 cv194.092 36.4453 193.192 38.1953 192.592 39.4951 cv191.292 41.4951 195.042 42.8452 193.042 44.5454 cv190.942 45.2451 188.442 44.895 186.792 46.6953 cv184.993 45.7451 182.842 44.7954 181.042 44.5454 cv178.542 44.7954 177.092 48.395 174.092 46.6953 cv173.292 45.9951 168.924 46.5859 167.924 45.936 cv165.424 44.436 licp202.759 44.5952 mo201.708 44.3452 200.759 44.7954 200.359 45.7954 cv200.609 46.7954 199.559 47.895 200.609 48.645 cv201.409 49.9951 202.309 48.2451 203.009 48.395 cv203.759 47.7451 203.809 46.7954 203.759 45.7954 cv203.359 45.395 202.958 45.0454 202.759 44.5952 cvcpf155.626 43.9287 mo157.459 43.4287 159.792 44.4287 160.792 45.0952 cv161.959 48.9287 159.429 50.644 161.292 51.7617 cv163.792 53.2617 164.451 51.3159 167.459 51.7617 cv171.958 52.4287 169.125 55.2617 169.459 57.5952 cv169.792 59.9287 170.958 62.0952 169.792 62.7617 cv168.626 63.4287 165.126 64.0952 163.792 65.4287 cv161.292 63.5952 166.534 63.1431 165.459 61.2617 cv164.792 60.0952 163.625 59.0952 161.959 59.4287 cv160.292 59.7617 158.626 61.2617 158.626 61.2617 cv158.626 61.2617 159.292 63.2617 158.126 63.5952 cv156.959 63.9287 155.959 64.4287 155.959 61.4287 cv155.959 58.4287 155.959 54.0952 155.626 52.0952 cv155.292 50.0952 155.626 43.9287 155.626 43.9287 cvcp233.458 60.0952 mo236.792 58.9287 236.125 62.7617 236.125 62.7617 cv235.292 64.7617 230.125 61.2617 233.458 60.0952 cvcp165.424 44.436 mo165.224 45.0859 166.342 38.395 165.442 38.7954 cv164.792 38.9453 164.292 38.5454 163.792 38.2954 cv156.743 36.4453 150.292 38.8452 143.143 38.0454 cv139.192 39.2451 141.692 43.3452 140.993 45.9951 cv141.292 48.395 141.143 50.895 142.893 52.6953 cv149.592 53.395 143.893 45.9951 147.942 43.7954 cv148.692 43.9951 149.842 43.395 150.342 44.2954 cv151.643 49.395 150.792 56.5952 151.042 62.7954 cv149.993 64.645 147.592 63.1953 145.993 63.9951 cv144.692 64.895 143.243 66.145 143.842 68.0454 cv146.092 70.395 148.993 69.5454 151.792 69.7451 cv153.042 69.2954 154.643 69.6953 155.592 68.5454 cv156.692 68.2954 157.342 68.9951 158.243 69.2451 cv159.493 69.1953 161.243 68.7954 162.342 67.5952 cv164.092 67.0454 164.143 68.7954 165.442 69.2451 cv166.393 69.7451 167.542 69.1953 168.592 68.9951 cv172.942 68.5952 179.692 70.895 181.993 66.395 cv182.692 64.0454 180.592 62.7954 179.592 61.0952 cv178.392 59.9453 176.993 61.1953 175.993 62.0454 cv175.192 61.3452 174.493 60.5454 174.792 59.395 cv176.692 57.5454 173.842 54.6953 176.493 53.1953 cv180.292 48.7954 180.042 56.4951 183.692 55.7954 cv185.743 55.3452 186.592 53.0952 187.993 51.7451 cv191.842 51.7451 li192.892 51.8452 194.743 53.1953 193.993 54.395 cv194.192 56.895 194.792 60.395 193.542 62.2954 cv191.442 62.0454 189.142 63.395 187.542 64.4453 cv187.392 66.145 186.493 67.9951 188.743 68.7954 cv200.493 69.7451 li202.192 68.6953 204.642 68.6953 206.493 68.7954 cv208.192 68.4951 206.592 67.5952 207.442 66.5952 cv208.542 65.9951 209.743 67.0454 210.342 67.7954 cv213.142 67.145 214.542 70.0454 217.542 68.9951 cv219.442 68.5952 221.743 65.6953 223.292 67.7954 cv225.092 70.3828 230.792 69.7617 235.958 69.9287 cv240.159 69.1284 247.125 71.9287 247.993 68.7954 cv249.342 66.8452 250.642 64.645 248.743 62.5454 cv247.192 62.395 245.442 62.8452 244.192 62.0454 cv242.592 60.0952 239.243 57.395 240.592 54.395 cv242.592 51.7451 246.809 52.8286 248.958 50.9287 cv249.309 49.1787 248.892 46.1953 247.792 44.5454 cv245.493 44.5454 243.642 43.4951 241.542 44.0454 cv238.592 44.8452 236.442 47.9951 235.792 50.7954 cv234.592 51.4453 234.592 53.4951 232.892 52.6953 cv232.342 51.4951 232.458 50.1621 232.958 48.7617 cv232.359 44.7119 234.743 40.145 231.692 36.8452 cv228.642 35.9453 225.592 35.6953 222.092 35.1953 cv219.092 36.4453 222.192 38.7954 221.392 40.6953 cv221.842 43.7954 224.892 43.645 226.892 45.2451 cv227.442 48.7954 226.842 52.4453 227.392 56.2954 cv227.292 57.6953 225.743 57.5454 224.993 58.1953 cv220.692 57.7451 220.042 63.8452 215.142 62.2954 cv213.042 61.0454 210.493 60.1953 209.842 57.4951 cv209.243 55.7451 209.842 53.8452 210.792 52.4453 cv212.592 51.7451 213.942 49.7451 216.342 50.5454 cv217.592 51.395 217.842 53.0952 217.993 54.5952 cv218.792 55.895 220.292 57.1953 221.842 56.2954 cv223.392 55.1953 223.642 53.7954 224.493 52.1953 cv224.092 51.2451 224.292 49.9951 224.243 48.8452 cv223.392 46.645 221.442 45.145 219.192 44.5454 cv217.892 42.7954 215.842 43.895 213.692 43.5952 cv210.042 43.5952 207.692 47.8452 205.993 50.0454 cv202.792 54.2617 206.576 58.4951 205.625 62.5952 cv204.425 62.1953 201.292 63.2954 200.493 61.0952 cv200.292 56.5952 200.792 52.4287 199.993 47.645 cv199.542 46.4951 198.493 45.5952 198.592 44.2954 cv199.243 42.5454 200.892 40.4951 200.243 38.2954 cv199.642 36.2954 197.592 35.8452 195.692 36.145 cv194.092 36.4453 193.192 38.1953 192.592 39.4951 cv191.292 41.4951 195.042 42.8452 193.042 44.5454 cv190.942 45.2451 188.442 44.895 186.792 46.6953 cv184.993 45.7451 182.842 44.7954 181.042 44.5454 cv178.542 44.7954 177.092 48.395 174.092 46.6953 cv173.292 45.9951 168.924 46.5859 167.924 45.936 cv165.424 44.436 licp202.759 44.5952 mo201.708 44.3452 200.759 44.7954 200.359 45.7954 cv200.609 46.7954 199.559 47.895 200.609 48.645 cv201.409 49.9951 202.309 48.2451 203.009 48.395 cv203.759 47.7451 203.809 46.7954 203.759 45.7954 cv203.359 45.395 202.958 45.0454 202.759 44.5952 cvcp@226.392 60.5952 mo225.692 61.1953 223.892 62.1953 224.493 63.2451 cv226.292 63.9287 li227.142 63.3286 227.692 62.6953 227.142 61.0952 cv226.892 60.895 226.792 60.4951 226.392 60.5952 cvcp0 0 0 0 cmykf226.392 60.5952 mo225.692 61.1953 223.892 62.1953 224.493 63.2451 cv226.292 63.9287 li227.142 63.3286 227.692 62.6953 227.142 61.0952 cv226.892 60.895 226.792 60.4951 226.392 60.5952 cvcp0 0 0 1 cmyk@235.892 84.645 mo235.038 83.3853 233.147 81.6152 230.852 81.8853 cv228.512 82.29 228.002 83.6401 227.642 85.395 cv227.868 86.2051 225.363 87.6152 226.442 88.2451 cv226.262 88.8301 229.052 90.3901 228.243 90.75 cv228.243 90.75 234.813 88.1104 235.892 84.645 cvcpf0.45 lw235.892 84.645 mo235.038 83.3853 233.147 81.6152 230.852 81.8853 cv228.512 82.29 228.002 83.6401 227.642 85.395 cv227.868 86.2051 225.363 87.6152 226.442 88.2451 cv226.262 88.8301 229.052 90.3901 228.243 90.75 cv228.243 90.75 234.813 88.1104 235.892 84.645 cvcp@249.872 100.632 mo249.017 99.3721 249.617 98.8618 247.322 99.1318 cv244.981 99.5371 242.282 102.89 243.362 103.52 cv243.182 104.104 247.381 104.172 246.572 104.532 cv246.572 104.532 248.822 103.932 249.872 100.632 cvcpf249.872 100.632 mo249.017 99.3721 249.617 98.8618 247.322 99.1318 cv244.981 99.5371 242.282 102.89 243.362 103.52 cv243.182 104.104 247.381 104.172 246.572 104.532 cv246.572 104.532 248.822 103.932 249.872 100.632 cvcp@247.903 73.2578 mo247.047 71.9976 247.647 71.4878 245.352 71.7578 cv243.012 72.1626 240.313 75.5151 241.392 76.145 cv241.212 76.73 245.413 76.7979 244.602 77.1577 cv244.602 77.1577 246.852 76.5576 247.903 73.2578 cvcpf247.903 73.2578 mo247.047 71.9976 247.647 71.4878 245.352 71.7578 cv243.012 72.1626 240.313 75.5151 241.392 76.145 cv241.212 76.73 245.413 76.7979 244.602 77.1577 cv244.602 77.1577 246.852 76.5576 247.903 73.2578 cvcp@88.5801 145.608 mo87.4302 145.307 87.8965 144.125 87.0967 143.424 cv86.7964 144.025 85.2798 144.158 84.73 144.158 cv84.0801 144.858 82.5801 145.057 82.8301 146.307 cv84.3799 148.708 87.1299 147.708 89.3301 147.257 cv90.6299 145.757 94.1299 146.057 92.9302 143.208 cv89.98 141.158 90.8799 145.757 88.5801 145.608 cvcp45.8799 138.408 mo45.1299 139.608 43.4302 140.608 44.4302 142.258 cv43.2798 143.208 43.9302 144.858 42.73 145.858 cv41.9302 148.958 45.5801 148.307 46.8301 149.908 cv49.0967 147.924 51.1133 148.474 52.2632 146.924 cv51.7632 143.974 52.8301 140.741 51.4302 137.591 cv50.6802 134.891 47.4302 137.858 45.8799 138.408 cvcp99.1299 136.458 mo97.5298 139.308 99.23 142.408 98.6802 145.608 cv99.98 145.858 100.88 144.057 102.53 144.408 cv103.03 145.057 103.88 145.608 104.18 146.307 cv103.53 148.757 105.33 150.807 105.38 153.257 cv105.93 153.807 106.58 153.757 107.08 153.057 cv107.78 148.007 107.613 142.941 107.43 137.591 cv105.58 134.891 101.83 137.058 99.1299 136.458 cvcp117.38 136.258 mo115.48 135.958 113.33 137.458 112.33 139.108 cv111.63 141.958 111.88 144.708 113.08 147.507 cv114.73 147.708 116.23 148.958 117.88 148.458 cv121.28 147.057 122.097 144.924 121.73 140.308 cv120.98 138.658 119.48 135.758 117.38 136.258 cvcp67.23 135.508 mo66.2798 136.858 64.2134 137.941 64.7632 139.591 cv68.0132 138.641 71.3965 140.158 74.0967 138.258 cv73.7632 134.424 69.73 135.508 67.23 135.508 cvcp91.48 135.258 mo89.9302 135.158 87.5298 134.308 86.4302 136.008 cv85.8301 136.858 84.98 138.658 86.1802 139.108 cv88.1299 138.808 90.1299 138.758 91.9302 138.158 cv92.1802 137.508 93.5635 137.225 93.2632 136.424 cv93.2134 135.725 91.8799 135.558 91.48 135.258 cvcp30.5298 122.308 mo32.23 122.508 33.23 126.458 34.8301 123.258 cv37.1802 122.258 40.0801 122.008 42.2798 123.508 cv45.6299 125.858 41.8301 130.058 43.73 132.858 cv45.1802 130.908 47.73 130.858 49.48 130.258 cv50.8301 129.458 51.8965 131.108 52.5967 129.258 cv52.7466 128.658 52.7798 127.658 53.5801 127.358 cv54.1802 127.158 54.6299 127.608 54.7798 128.058 cv55.3301 129.408 53.73 129.858 54.2798 131.208 cv56.6299 133.108 56.6299 136.008 57.8799 138.408 cv58.8301 138.658 59.5298 138.108 60.0298 137.458 cv60.0298 132.508 65.0801 131.358 68.6802 130.008 cv72.73 129.208 76.0298 131.158 78.5298 134.058 cv78.1299 137.058 82.6802 140.858 78.2798 142.708 cv74.98 142.008 71.73 144.158 68.4302 142.708 cv66.7798 142.408 65.3799 142.958 64.3799 144.408 cv64.3799 146.658 66.9302 146.807 68.23 148.007 cv72.3301 149.007 74.9302 146.208 77.8301 144.158 cv80.0801 143.908 81.23 140.858 83.0801 139.608 cv81.48 137.808 79.1802 136.008 80.4302 133.358 cv81.48 132.408 82.1802 130.458 83.8301 130.008 cv86.5298 131.058 89.9302 128.908 93.1802 130.008 cv95.0298 130.008 96.48 132.958 97.98 131.908 cv98.0801 130.358 97.48 128.258 99.4302 127.608 cv100.93 127.908 101.08 129.408 101.83 130.708 cv102.03 129.458 102.13 128.008 103.23 127.108 cv103.53 127.158 104.03 126.958 104.23 127.358 cv104.53 126.558 105.28 127.008 105.88 126.858 cv106.93 127.408 107.68 128.458 107.83 129.508 cv109.68 130.058 111.28 131.908 113.33 131.208 cv115.43 130.058 118.53 129.408 120.78 130.708 cv122.68 130.658 123.88 132.758 125.33 133.358 cv127.93 136.358 128.53 140.758 127.48 144.658 cv125.38 147.158 126.13 151.307 122.43 152.807 cv119.23 153.557 115.78 153.108 112.63 152.557 cv111.53 153.108 112.63 153.958 112.38 154.708 cv114.18 156.858 119.263 156.257 118.13 160.458 cv116.38 163.057 112.08 162.658 109.98 162.658 cv107.63 162.108 104.73 162.958 103.03 160.958 cv102.63 158.658 99.5801 156.658 101.08 154.458 cv101.23 153.658 100.98 152.807 100.13 152.557 cv97.0801 153.358 95.0801 149.958 92.23 151.858 cv88.48 153.507 84.48 153.057 80.9302 150.658 cv79.5298 148.007 78.3301 151.458 76.8301 151.358 cv74.1299 153.257 70.1299 154.858 67.0298 152.807 cv64.1299 152.307 62.6802 150.057 61.23 147.757 cv59.5298 147.708 58.0298 143.757 56.4302 146.557 cv57.0298 149.307 61.0298 148.757 61.48 151.858 cv59.4302 155.358 55.0801 153.108 51.4302 153.757 cv49.4302 154.257 48.1299 150.708 46.3799 153.257 cv45.6299 154.007 li41.8799 152.658 34.98 157.158 34.1299 150.658 cv33.9302 149.608 35.1299 148.958 35.8301 148.458 cv39.5967 147.757 38.0298 140.958 39.1802 137.208 cv36.7798 134.458 41.5801 129.408 36.5298 128.808 cv35.73 127.958 34.4302 127.758 33.8799 126.858 cv30.9302 129.808 34.5298 133.608 32.6802 136.958 cv32.0801 137.758 31.1299 137.508 30.0298 137.458 cv28.4302 135.858 29.3799 132.808 27.4302 131.208 cv27.8799 129.508 25.98 129.758 25.23 129.058 cv21.4302 129.058 li18.5298 130.458 16.6802 132.958 16.8301 136.258 cv16.3799 136.708 li16.48 140.608 15.5298 146.458 19.98 148.007 cv21.4302 148.608 23.6299 149.007 25.48 148.458 cv29.6299 147.708 28.8301 136.708 33.4302 144.158 cv33.23 148.158 31.23 151.958 27.8799 154.257 cv26.73 154.458 25.6802 154.708 24.5298 154.958 cv23.98 153.958 23.0801 154.908 22.3799 154.958 cv18.9302 154.158 15.73 152.307 14.23 148.958 cv14.6802 147.958 13.4302 147.557 13.23 146.807 cv13.48 146.557 li12.1299 145.408 13.1802 143.208 12.5298 141.758 cv11.3799 139.408 12.73 136.658 12.2798 134.308 cv12.9302 129.258 15.9302 123.758 21.1802 122.058 cv24.8799 120.708 27.4302 125.858 30.5298 122.308 cvcpf2.5 lw88.5801 145.608 mo87.4302 145.307 87.8965 144.125 87.0967 143.424 cv86.7964 144.025 85.2798 144.158 84.73 144.158 cv84.0801 144.858 82.5801 145.057 82.8301 146.307 cv84.3799 148.708 87.1299 147.708 89.3301 147.257 cv90.6299 145.757 94.1299 146.057 92.9302 143.208 cv89.98 141.158 90.8799 145.757 88.5801 145.608 cvcp45.8799 138.408 mo45.1299 139.608 43.4302 140.608 44.4302 142.258 cv43.2798 143.208 43.9302 144.858 42.73 145.858 cv41.9302 148.958 45.5801 148.307 46.8301 149.908 cv49.0967 147.924 51.1133 148.474 52.2632 146.924 cv51.7632 143.974 52.8301 140.741 51.4302 137.591 cv50.6802 134.891 47.4302 137.858 45.8799 138.408 cvcp99.1299 136.458 mo97.5298 139.308 99.23 142.408 98.6802 145.608 cv99.98 145.858 100.88 144.057 102.53 144.408 cv103.03 145.057 103.88 145.608 104.18 146.307 cv103.53 148.757 105.33 150.807 105.38 153.257 cv105.93 153.807 106.58 153.757 107.08 153.057 cv107.78 148.007 107.613 142.941 107.43 137.591 cv105.58 134.891 101.83 137.058 99.1299 136.458 cvcp117.38 136.258 mo115.48 135.958 113.33 137.458 112.33 139.108 cv111.63 141.958 111.88 144.708 113.08 147.507 cv114.73 147.708 116.23 148.958 117.88 148.458 cv121.28 147.057 122.097 144.924 121.73 140.308 cv120.98 138.658 119.48 135.758 117.38 136.258 cvcp67.23 135.508 mo66.2798 136.858 64.2134 137.941 64.7632 139.591 cv68.0132 138.641 71.3965 140.158 74.0967 138.258 cv73.7632 134.424 69.73 135.508 67.23 135.508 cvcp91.48 135.258 mo89.9302 135.158 87.5298 134.308 86.4302 136.008 cv85.8301 136.858 84.98 138.658 86.1802 139.108 cv88.1299 138.808 90.1299 138.758 91.9302 138.158 cv92.1802 137.508 93.5635 137.225 93.2632 136.424 cv93.2134 135.725 91.8799 135.558 91.48 135.258 cvcp30.5298 122.308 mo32.23 122.508 33.23 126.458 34.8301 123.258 cv37.1802 122.258 40.0801 122.008 42.2798 123.508 cv45.6299 125.858 41.8301 130.058 43.73 132.858 cv45.1802 130.908 47.73 130.858 49.48 130.258 cv50.8301 129.458 51.8965 131.108 52.5967 129.258 cv52.7466 128.658 52.7798 127.658 53.5801 127.358 cv54.1802 127.158 54.6299 127.608 54.7798 128.058 cv55.3301 129.408 53.73 129.858 54.2798 131.208 cv56.6299 133.108 56.6299 136.008 57.8799 138.408 cv58.8301 138.658 59.5298 138.108 60.0298 137.458 cv60.0298 132.508 65.0801 131.358 68.6802 130.008 cv72.73 129.208 76.0298 131.158 78.5298 134.058 cv78.1299 137.058 82.6802 140.858 78.2798 142.708 cv74.98 142.008 71.73 144.158 68.4302 142.708 cv66.7798 142.408 65.3799 142.958 64.3799 144.408 cv64.3799 146.658 66.9302 146.807 68.23 148.007 cv72.3301 149.007 74.9302 146.208 77.8301 144.158 cv80.0801 143.908 81.23 140.858 83.0801 139.608 cv81.48 137.808 79.1802 136.008 80.4302 133.358 cv81.48 132.408 82.1802 130.458 83.8301 130.008 cv86.5298 131.058 89.9302 128.908 93.1802 130.008 cv95.0298 130.008 96.48 132.958 97.98 131.908 cv98.0801 130.358 97.48 128.258 99.4302 127.608 cv100.93 127.908 101.08 129.408 101.83 130.708 cv102.03 129.458 102.13 128.008 103.23 127.108 cv103.53 127.158 104.03 126.958 104.23 127.358 cv104.53 126.558 105.28 127.008 105.88 126.858 cv106.93 127.408 107.68 128.458 107.83 129.508 cv109.68 130.058 111.28 131.908 113.33 131.208 cv115.43 130.058 118.53 129.408 120.78 130.708 cv122.68 130.658 123.88 132.758 125.33 133.358 cv127.93 136.358 128.53 140.758 127.48 144.658 cv125.38 147.158 126.13 151.307 122.43 152.807 cv119.23 153.557 115.78 153.108 112.63 152.557 cv111.53 153.108 112.63 153.958 112.38 154.708 cv114.18 156.858 119.263 156.257 118.13 160.458 cv116.38 163.057 112.08 162.658 109.98 162.658 cv107.63 162.108 104.73 162.958 103.03 160.958 cv102.63 158.658 99.5801 156.658 101.08 154.458 cv101.23 153.658 100.98 152.807 100.13 152.557 cv97.0801 153.358 95.0801 149.958 92.23 151.858 cv88.48 153.507 84.48 153.057 80.9302 150.658 cv79.5298 148.007 78.3301 151.458 76.8301 151.358 cv74.1299 153.257 70.1299 154.858 67.0298 152.807 cv64.1299 152.307 62.6802 150.057 61.23 147.757 cv59.5298 147.708 58.0298 143.757 56.4302 146.557 cv57.0298 149.307 61.0298 148.757 61.48 151.858 cv59.4302 155.358 55.0801 153.108 51.4302 153.757 cv49.4302 154.257 48.1299 150.708 46.3799 153.257 cv45.6299 154.007 li41.8799 152.658 34.98 157.158 34.1299 150.658 cv33.9302 149.608 35.1299 148.958 35.8301 148.458 cv39.5967 147.757 38.0298 140.958 39.1802 137.208 cv36.7798 134.458 41.5801 129.408 36.5298 128.808 cv35.73 127.958 34.4302 127.758 33.8799 126.858 cv30.9302 129.808 34.5298 133.608 32.6802 136.958 cv32.0801 137.758 31.1299 137.508 30.0298 137.458 cv28.4302 135.858 29.3799 132.808 27.4302 131.208 cv27.8799 129.508 25.98 129.758 25.23 129.058 cv21.4302 129.058 li18.5298 130.458 16.6802 132.958 16.8301 136.258 cv16.3799 136.708 li16.48 140.608 15.5298 146.458 19.98 148.007 cv21.4302 148.608 23.6299 149.007 25.48 148.458 cv29.6299 147.708 28.8301 136.708 33.4302 144.158 cv33.23 148.158 31.23 151.958 27.8799 154.257 cv26.73 154.458 25.6802 154.708 24.5298 154.958 cv23.98 153.958 23.0801 154.908 22.3799 154.958 cv18.9302 154.158 15.73 152.307 14.23 148.958 cv14.6802 147.958 13.4302 147.557 13.23 146.807 cv13.48 146.557 li12.1299 145.408 13.1802 143.208 12.5298 141.758 cv11.3799 139.408 12.73 136.658 12.2798 134.308 cv12.9302 129.258 15.9302 123.758 21.1802 122.058 cv24.8799 120.708 27.4302 125.858 30.5298 122.308 cvcp@152.326 128.279 mo154.159 127.779 156.493 128.779 157.493 129.445 cv158.659 133.279 156.129 134.994 157.993 136.112 cv160.493 137.612 161.15 135.666 164.159 136.112 cv168.659 136.779 165.826 139.612 166.159 141.945 cv166.493 144.279 167.659 146.445 166.493 147.112 cv165.326 147.779 161.826 148.445 160.493 149.779 cv157.993 147.945 163.234 147.494 162.159 145.612 cv161.493 144.445 160.326 143.445 158.659 143.779 cv156.993 144.112 155.326 145.612 155.326 145.612 cv155.326 145.612 155.993 147.612 154.826 147.945 cv153.659 148.279 152.659 148.779 152.659 145.779 cv152.659 142.779 152.659 138.445 152.326 136.445 cv151.993 134.445 152.326 128.279 152.326 128.279 cvcp230.159 144.445 mo233.493 143.279 232.826 147.112 232.826 147.112 cv231.993 149.112 226.826 145.612 230.159 144.445 cvcp162.124 128.786 mo161.924 129.436 163.042 122.745 162.143 123.145 cv161.493 123.295 160.993 122.895 160.493 122.645 cv153.442 120.795 146.993 123.195 139.842 122.395 cv135.893 123.595 138.393 127.695 137.692 130.345 cv137.993 132.745 137.842 135.245 139.592 137.045 cv146.292 137.745 140.592 130.345 144.643 128.145 cv145.393 128.345 146.542 127.745 147.042 128.645 cv148.342 133.745 147.493 140.945 147.743 147.145 cv146.692 148.996 144.292 147.545 142.692 148.345 cv141.393 149.246 139.942 150.496 140.542 152.395 cv142.792 154.746 145.692 153.895 148.493 154.095 cv149.743 153.645 151.342 154.045 152.292 152.895 cv153.393 152.645 154.042 153.345 154.942 153.595 cv156.192 153.545 157.942 153.145 159.042 151.945 cv160.792 151.395 160.842 153.145 162.143 153.595 cv163.092 154.095 164.243 153.545 165.292 153.345 cv169.643 152.945 176.392 155.246 178.692 150.746 cv179.392 148.395 177.292 147.145 176.292 145.445 cv175.092 144.295 173.692 145.545 172.692 146.395 cv171.892 145.695 171.192 144.895 171.493 143.745 cv173.392 141.895 170.542 139.045 173.192 137.545 cv176.993 133.145 176.743 140.845 180.392 140.145 cv182.442 139.695 183.292 137.445 184.692 136.095 cv188.542 136.095 li189.592 136.195 191.442 137.545 190.692 138.745 cv190.892 141.245 191.493 144.746 190.243 146.645 cv188.142 146.395 185.842 147.746 184.243 148.795 cv184.092 150.496 183.192 152.345 185.442 153.145 cv197.192 154.095 li198.892 153.045 201.342 153.045 203.192 153.145 cv204.892 152.845 203.292 151.945 204.142 150.945 cv205.243 150.345 206.442 151.395 207.042 152.145 cv209.842 151.496 211.243 154.395 214.243 153.345 cv216.142 152.945 218.442 150.045 219.993 152.145 cv221.792 154.733 227.493 154.112 232.659 154.279 cv236.859 153.478 243.826 156.279 244.692 153.145 cv246.042 151.195 247.342 148.996 245.442 146.895 cv243.892 146.746 242.142 147.195 240.892 146.395 cv239.292 144.445 235.942 141.745 237.292 138.745 cv239.292 136.095 243.509 137.179 245.659 135.279 cv246.009 133.529 245.592 130.545 244.493 128.895 cv242.192 128.895 240.342 127.845 238.243 128.395 cv235.292 129.195 233.142 132.345 232.493 135.145 cv231.292 135.795 231.292 137.845 229.592 137.045 cv229.042 135.845 229.159 134.512 229.659 133.112 cv229.059 129.062 231.442 124.495 228.392 121.195 cv225.342 120.295 222.292 120.045 218.792 119.545 cv215.792 120.795 218.892 123.145 218.092 125.045 cv218.542 128.145 221.592 127.995 223.592 129.595 cv224.142 133.145 223.542 136.795 224.092 140.645 cv223.993 142.045 222.442 141.895 221.692 142.545 cv217.392 142.095 216.743 148.195 211.842 146.645 cv209.743 145.395 207.192 144.545 206.542 141.845 cv205.942 140.095 206.542 138.195 207.493 136.795 cv209.292 136.095 210.642 134.095 213.042 134.895 cv214.292 135.745 214.542 137.445 214.692 138.945 cv215.493 140.245 216.993 141.545 218.542 140.645 cv220.092 139.545 220.342 138.145 221.192 136.545 cv220.792 135.595 220.993 134.345 220.942 133.195 cv220.092 130.995 218.142 129.495 215.892 128.895 cv214.592 127.145 212.542 128.245 210.392 127.945 cv206.743 127.945 204.392 132.195 202.692 134.395 cv199.493 138.612 203.276 142.845 202.326 146.945 cv201.125 146.545 197.993 147.645 197.192 145.445 cv196.993 140.945 197.493 136.779 196.692 131.995 cv196.243 130.845 195.192 129.945 195.292 128.645 cv195.942 126.895 197.592 124.845 196.942 122.645 cv196.342 120.645 194.292 120.195 192.392 120.495 cv190.792 120.795 189.892 122.545 189.292 123.845 cv187.993 125.845 191.743 127.195 189.743 128.895 cv187.642 129.595 185.142 129.245 183.493 131.045 cv181.692 130.095 179.542 129.145 177.743 128.895 cv175.243 129.145 173.792 132.745 170.792 131.045 cv169.993 130.345 165.624 130.936 164.624 130.286 cv162.124 128.786 licp200.792 127.945 mo199.743 127.695 198.792 128.145 198.392 129.145 cv198.642 130.145 197.592 131.245 198.642 131.995 cv199.442 133.345 200.342 131.595 201.042 131.745 cv201.792 131.095 201.842 130.145 201.792 129.145 cv201.392 128.745 200.993 128.395 200.792 127.945 cvcpf152.326 128.279 mo154.159 127.779 156.493 128.779 157.493 129.445 cv158.659 133.279 156.129 134.994 157.993 136.112 cv160.493 137.612 161.15 135.666 164.159 136.112 cv168.659 136.779 165.826 139.612 166.159 141.945 cv166.493 144.279 167.659 146.445 166.493 147.112 cv165.326 147.779 161.826 148.445 160.493 149.779 cv157.993 147.945 163.234 147.494 162.159 145.612 cv161.493 144.445 160.326 143.445 158.659 143.779 cv156.993 144.112 155.326 145.612 155.326 145.612 cv155.326 145.612 155.993 147.612 154.826 147.945 cv153.659 148.279 152.659 148.779 152.659 145.779 cv152.659 142.779 152.659 138.445 152.326 136.445 cv151.993 134.445 152.326 128.279 152.326 128.279 cvcp230.159 144.445 mo233.493 143.279 232.826 147.112 232.826 147.112 cv231.993 149.112 226.826 145.612 230.159 144.445 cvcp162.124 128.786 mo161.924 129.436 163.042 122.745 162.143 123.145 cv161.493 123.295 160.993 122.895 160.493 122.645 cv153.442 120.795 146.993 123.195 139.842 122.395 cv135.893 123.595 138.393 127.695 137.692 130.345 cv137.993 132.745 137.842 135.245 139.592 137.045 cv146.292 137.745 140.592 130.345 144.643 128.145 cv145.393 128.345 146.542 127.745 147.042 128.645 cv148.342 133.745 147.493 140.945 147.743 147.145 cv146.692 148.996 144.292 147.545 142.692 148.345 cv141.393 149.246 139.942 150.496 140.542 152.395 cv142.792 154.746 145.692 153.895 148.493 154.095 cv149.743 153.645 151.342 154.045 152.292 152.895 cv153.393 152.645 154.042 153.345 154.942 153.595 cv156.192 153.545 157.942 153.145 159.042 151.945 cv160.792 151.395 160.842 153.145 162.143 153.595 cv163.092 154.095 164.243 153.545 165.292 153.345 cv169.643 152.945 176.392 155.246 178.692 150.746 cv179.392 148.395 177.292 147.145 176.292 145.445 cv175.092 144.295 173.692 145.545 172.692 146.395 cv171.892 145.695 171.192 144.895 171.493 143.745 cv173.392 141.895 170.542 139.045 173.192 137.545 cv176.993 133.145 176.743 140.845 180.392 140.145 cv182.442 139.695 183.292 137.445 184.692 136.095 cv188.542 136.095 li189.592 136.195 191.442 137.545 190.692 138.745 cv190.892 141.245 191.493 144.746 190.243 146.645 cv188.142 146.395 185.842 147.746 184.243 148.795 cv184.092 150.496 183.192 152.345 185.442 153.145 cv197.192 154.095 li198.892 153.045 201.342 153.045 203.192 153.145 cv204.892 152.845 203.292 151.945 204.142 150.945 cv205.243 150.345 206.442 151.395 207.042 152.145 cv209.842 151.496 211.243 154.395 214.243 153.345 cv216.142 152.945 218.442 150.045 219.993 152.145 cv221.792 154.733 227.493 154.112 232.659 154.279 cv236.859 153.478 243.826 156.279 244.692 153.145 cv246.042 151.195 247.342 148.996 245.442 146.895 cv243.892 146.746 242.142 147.195 240.892 146.395 cv239.292 144.445 235.942 141.745 237.292 138.745 cv239.292 136.095 243.509 137.179 245.659 135.279 cv246.009 133.529 245.592 130.545 244.493 128.895 cv242.192 128.895 240.342 127.845 238.243 128.395 cv235.292 129.195 233.142 132.345 232.493 135.145 cv231.292 135.795 231.292 137.845 229.592 137.045 cv229.042 135.845 229.159 134.512 229.659 133.112 cv229.059 129.062 231.442 124.495 228.392 121.195 cv225.342 120.295 222.292 120.045 218.792 119.545 cv215.792 120.795 218.892 123.145 218.092 125.045 cv218.542 128.145 221.592 127.995 223.592 129.595 cv224.142 133.145 223.542 136.795 224.092 140.645 cv223.993 142.045 222.442 141.895 221.692 142.545 cv217.392 142.095 216.743 148.195 211.842 146.645 cv209.743 145.395 207.192 144.545 206.542 141.845 cv205.942 140.095 206.542 138.195 207.493 136.795 cv209.292 136.095 210.642 134.095 213.042 134.895 cv214.292 135.745 214.542 137.445 214.692 138.945 cv215.493 140.245 216.993 141.545 218.542 140.645 cv220.092 139.545 220.342 138.145 221.192 136.545 cv220.792 135.595 220.993 134.345 220.942 133.195 cv220.092 130.995 218.142 129.495 215.892 128.895 cv214.592 127.145 212.542 128.245 210.392 127.945 cv206.743 127.945 204.392 132.195 202.692 134.395 cv199.493 138.612 203.276 142.845 202.326 146.945 cv201.125 146.545 197.993 147.645 197.192 145.445 cv196.993 140.945 197.493 136.779 196.692 131.995 cv196.243 130.845 195.192 129.945 195.292 128.645 cv195.942 126.895 197.592 124.845 196.942 122.645 cv196.342 120.645 194.292 120.195 192.392 120.495 cv190.792 120.795 189.892 122.545 189.292 123.845 cv187.993 125.845 191.743 127.195 189.743 128.895 cv187.642 129.595 185.142 129.245 183.493 131.045 cv181.692 130.095 179.542 129.145 177.743 128.895 cv175.243 129.145 173.792 132.745 170.792 131.045 cv169.993 130.345 165.624 130.936 164.624 130.286 cv162.124 128.786 licp200.792 127.945 mo199.743 127.695 198.792 128.145 198.392 129.145 cv198.642 130.145 197.592 131.245 198.642 131.995 cv199.442 133.345 200.342 131.595 201.042 131.745 cv201.792 131.095 201.842 130.145 201.792 129.145 cv201.392 128.745 200.993 128.395 200.792 127.945 cvcp@223.092 144.945 mo222.392 145.545 220.592 146.545 221.192 147.595 cv222.993 148.279 li223.842 147.679 224.392 147.045 223.842 145.445 cv223.592 145.246 223.493 144.845 223.092 144.945 cvcp0 0 0 0 cmykf223.092 144.945 mo222.392 145.545 220.592 146.545 221.192 147.595 cv222.993 148.279 li223.842 147.679 224.392 147.045 223.842 145.445 cv223.592 145.246 223.493 144.845 223.092 144.945 cvcp0 0 0 1 cmyk@77.7769 188.444 mo76.627 188.143 77.0933 186.96 76.2935 186.26 cv75.9937 186.86 74.4771 186.994 73.9268 186.994 cv73.2769 187.694 71.7769 187.893 72.0269 189.143 cv73.5767 191.543 76.3267 190.543 78.5269 190.093 cv79.8267 188.593 83.3267 188.893 82.127 186.043 cv79.1768 183.994 80.0767 188.593 77.7769 188.444 cvcp35.0767 181.244 mo34.3267 182.444 32.627 183.444 33.627 185.093 cv32.4771 186.043 33.127 187.694 31.9268 188.694 cv31.127 191.793 34.7769 191.143 36.0269 192.744 cv38.2935 190.76 40.3101 191.31 41.46 189.76 cv40.96 186.81 42.0269 183.577 40.627 180.427 cv39.877 177.727 36.627 180.694 35.0767 181.244 cvcp88.3267 179.293 mo86.7271 182.143 88.4268 185.244 87.877 188.444 cv89.1768 188.694 90.0767 186.893 91.7271 187.244 cv92.2271 187.893 93.0767 188.444 93.377 189.143 cv92.7271 191.593 94.5269 193.643 94.5767 196.093 cv95.127 196.643 95.7769 196.593 96.2769 195.893 cv96.9771 190.843 96.8101 185.777 96.627 180.427 cv94.7769 177.727 91.0269 179.893 88.3267 179.293 cvcp106.577 179.093 mo104.677 178.793 102.527 180.293 101.527 181.944 cv100.827 184.793 101.077 187.543 102.277 190.343 cv103.927 190.543 105.427 191.793 107.077 191.293 cv110.477 189.893 111.293 187.76 110.927 183.143 cv110.177 181.494 108.677 178.593 106.577 179.093 cvcp56.4268 178.343 mo55.4771 179.694 53.4102 180.777 53.96 182.427 cv57.21 181.477 60.5933 182.994 63.2935 181.093 cv62.96 177.26 58.9268 178.343 56.4268 178.343 cvcp80.6768 178.093 mo79.127 177.994 76.7271 177.143 75.627 178.843 cv75.0269 179.694 74.1768 181.494 75.377 181.944 cv77.3267 181.643 79.3267 181.593 81.127 180.994 cv81.377 180.343 82.7603 180.06 82.46 179.26 cv82.4102 178.56 81.0767 178.393 80.6768 178.093 cvcp19.7271 165.143 mo21.4268 165.343 22.4268 169.293 24.0269 166.093 cv26.377 165.093 29.2769 164.843 31.4771 166.343 cv34.8267 168.694 31.0269 172.893 32.9268 175.694 cv34.377 173.744 36.9268 173.694 38.6768 173.093 cv40.0269 172.293 41.0933 173.944 41.7935 172.093 cv41.9434 171.494 41.9771 170.494 42.7769 170.194 cv43.377 169.994 43.8267 170.444 43.9771 170.893 cv44.5269 172.244 42.9268 172.694 43.4771 174.043 cv45.8267 175.944 45.8267 178.843 47.0767 181.244 cv48.0269 181.494 48.7271 180.944 49.2271 180.293 cv49.2271 175.343 54.2769 174.194 57.877 172.843 cv61.9268 172.043 65.2271 173.994 67.7271 176.893 cv67.3267 179.893 71.877 183.694 67.4771 185.543 cv64.1768 184.843 60.9268 186.994 57.627 185.543 cv55.9771 185.244 54.5767 185.793 53.5767 187.244 cv53.5767 189.494 56.127 189.643 57.4268 190.843 cv61.5269 191.843 64.127 189.043 67.0269 186.994 cv69.2769 186.744 70.4268 183.694 72.2769 182.444 cv70.6768 180.643 68.377 178.843 69.627 176.194 cv70.6768 175.244 71.377 173.293 73.0269 172.843 cv75.7271 173.893 79.127 171.744 82.377 172.843 cv84.2271 172.843 85.6768 175.793 87.1768 174.744 cv87.2769 173.194 86.6768 171.093 88.627 170.444 cv90.127 170.744 90.2769 172.244 91.0269 173.543 cv91.2271 172.293 91.3267 170.843 92.4268 169.944 cv92.7271 169.994 93.2271 169.793 93.4268 170.194 cv93.7271 169.393 94.4771 169.843 95.0767 169.694 cv96.127 170.244 96.877 171.293 97.0269 172.343 cv98.877 172.893 100.477 174.744 102.527 174.043 cv104.627 172.893 107.727 172.244 109.977 173.543 cv111.877 173.494 113.077 175.593 114.527 176.194 cv117.127 179.194 117.727 183.593 116.677 187.494 cv114.577 189.994 115.327 194.143 111.627 195.643 cv108.427 196.393 104.977 195.944 101.827 195.393 cv100.727 195.944 101.827 196.793 101.577 197.543 cv103.377 199.694 108.46 199.093 107.327 203.293 cv105.577 205.893 101.277 205.494 99.1768 205.494 cv96.8267 204.944 93.9268 205.793 92.2271 203.793 cv91.8267 201.494 88.7769 199.494 90.2769 197.293 cv90.4268 196.494 90.1768 195.643 89.3267 195.393 cv86.2769 196.194 84.2769 192.793 81.4268 194.694 cv77.6768 196.343 73.6768 195.893 70.127 193.494 cv68.7271 190.843 67.5269 194.293 66.0269 194.194 cv63.3267 196.093 59.3267 197.694 56.2271 195.643 cv53.3267 195.143 51.877 192.893 50.4268 190.593 cv48.7271 190.543 47.2271 186.593 45.627 189.393 cv46.2271 192.143 50.2271 191.593 50.6768 194.694 cv48.627 198.194 44.2769 195.944 40.627 196.593 cv38.627 197.093 37.3267 193.543 35.5767 196.093 cv34.8267 196.843 li31.0767 195.494 24.1768 199.994 23.3267 193.494 cv23.127 192.444 24.3267 191.793 25.0269 191.293 cv28.7935 190.593 27.2271 183.793 28.377 180.043 cv25.9771 177.293 30.7769 172.244 25.7271 171.643 cv24.9268 170.793 23.627 170.593 23.0767 169.694 cv20.127 172.643 23.7271 176.444 21.877 179.793 cv21.2769 180.593 20.3267 180.343 19.2271 180.293 cv17.627 178.694 18.5767 175.643 16.627 174.043 cv17.0767 172.343 15.1768 172.593 14.4268 171.893 cv10.627 171.893 li7.72705 173.293 5.87695 175.793 6.02686 179.093 cv5.57666 179.543 li5.67676 183.444 4.72705 189.293 9.17676 190.843 cv10.627 191.444 12.8267 191.843 14.6768 191.293 cv18.8267 190.543 18.0269 179.543 22.627 186.994 cv22.4268 190.994 20.4268 194.793 17.0767 197.093 cv15.9268 197.293 14.877 197.543 13.7271 197.793 cv13.1768 196.793 12.2769 197.744 11.5767 197.793 cv8.12695 196.994 4.92676 195.143 3.42676 191.793 cv3.87695 190.793 2.62695 190.393 2.42676 189.643 cv2.67676 189.393 li1.32666 188.244 2.37695 186.043 1.72705 184.593 cv0.57666 182.244 1.92676 179.494 1.47705 177.143 cv2.12695 172.093 5.12695 166.593 10.377 164.893 cv14.0767 163.543 16.627 168.694 19.7271 165.143 cvcpf77.7769 188.444 mo76.627 188.143 77.0933 186.96 76.2935 186.26 cv75.9937 186.86 74.4771 186.994 73.9268 186.994 cv73.2769 187.694 71.7769 187.893 72.0269 189.143 cv73.5767 191.543 76.3267 190.543 78.5269 190.093 cv79.8267 188.593 83.3267 188.893 82.127 186.043 cv79.1768 183.994 80.0767 188.593 77.7769 188.444 cvcp35.0767 181.244 mo34.3267 182.444 32.627 183.444 33.627 185.093 cv32.4771 186.043 33.127 187.694 31.9268 188.694 cv31.127 191.793 34.7769 191.143 36.0269 192.744 cv38.2935 190.76 40.3101 191.31 41.46 189.76 cv40.96 186.81 42.0269 183.577 40.627 180.427 cv39.877 177.727 36.627 180.694 35.0767 181.244 cvcp88.3267 179.293 mo86.7271 182.143 88.4268 185.244 87.877 188.444 cv89.1768 188.694 90.0767 186.893 91.7271 187.244 cv92.2271 187.893 93.0767 188.444 93.377 189.143 cv92.7271 191.593 94.5269 193.643 94.5767 196.093 cv95.127 196.643 95.7769 196.593 96.2769 195.893 cv96.9771 190.843 96.8101 185.777 96.627 180.427 cv94.7769 177.727 91.0269 179.893 88.3267 179.293 cvcp106.577 179.093 mo104.677 178.793 102.527 180.293 101.527 181.944 cv100.827 184.793 101.077 187.543 102.277 190.343 cv103.927 190.543 105.427 191.793 107.077 191.293 cv110.477 189.893 111.293 187.76 110.927 183.143 cv110.177 181.494 108.677 178.593 106.577 179.093 cvcp56.4268 178.343 mo55.4771 179.694 53.4102 180.777 53.96 182.427 cv57.21 181.477 60.5933 182.994 63.2935 181.093 cv62.96 177.26 58.9268 178.343 56.4268 178.343 cvcp80.6768 178.093 mo79.127 177.994 76.7271 177.143 75.627 178.843 cv75.0269 179.694 74.1768 181.494 75.377 181.944 cv77.3267 181.643 79.3267 181.593 81.127 180.994 cv81.377 180.343 82.7603 180.06 82.46 179.26 cv82.4102 178.56 81.0767 178.393 80.6768 178.093 cvcp19.7271 165.143 mo21.4268 165.343 22.4268 169.293 24.0269 166.093 cv26.377 165.093 29.2769 164.843 31.4771 166.343 cv34.8267 168.694 31.0269 172.893 32.9268 175.694 cv34.377 173.744 36.9268 173.694 38.6768 173.093 cv40.0269 172.293 41.0933 173.944 41.7935 172.093 cv41.9434 171.494 41.9771 170.494 42.7769 170.194 cv43.377 169.994 43.8267 170.444 43.9771 170.893 cv44.5269 172.244 42.9268 172.694 43.4771 174.043 cv45.8267 175.944 45.8267 178.843 47.0767 181.244 cv48.0269 181.494 48.7271 180.944 49.2271 180.293 cv49.2271 175.343 54.2769 174.194 57.877 172.843 cv61.9268 172.043 65.2271 173.994 67.7271 176.893 cv67.3267 179.893 71.877 183.694 67.4771 185.543 cv64.1768 184.843 60.9268 186.994 57.627 185.543 cv55.9771 185.244 54.5767 185.793 53.5767 187.244 cv53.5767 189.494 56.127 189.643 57.4268 190.843 cv61.5269 191.843 64.127 189.043 67.0269 186.994 cv69.2769 186.744 70.4268 183.694 72.2769 182.444 cv70.6768 180.643 68.377 178.843 69.627 176.194 cv70.6768 175.244 71.377 173.293 73.0269 172.843 cv75.7271 173.893 79.127 171.744 82.377 172.843 cv84.2271 172.843 85.6768 175.793 87.1768 174.744 cv87.2769 173.194 86.6768 171.093 88.627 170.444 cv90.127 170.744 90.2769 172.244 91.0269 173.543 cv91.2271 172.293 91.3267 170.843 92.4268 169.944 cv92.7271 169.994 93.2271 169.793 93.4268 170.194 cv93.7271 169.393 94.4771 169.843 95.0767 169.694 cv96.127 170.244 96.877 171.293 97.0269 172.343 cv98.877 172.893 100.477 174.744 102.527 174.043 cv104.627 172.893 107.727 172.244 109.977 173.543 cv111.877 173.494 113.077 175.593 114.527 176.194 cv117.127 179.194 117.727 183.593 116.677 187.494 cv114.577 189.994 115.327 194.143 111.627 195.643 cv108.427 196.393 104.977 195.944 101.827 195.393 cv100.727 195.944 101.827 196.793 101.577 197.543 cv103.377 199.694 108.46 199.093 107.327 203.293 cv105.577 205.893 101.277 205.494 99.1768 205.494 cv96.8267 204.944 93.9268 205.793 92.2271 203.793 cv91.8267 201.494 88.7769 199.494 90.2769 197.293 cv90.4268 196.494 90.1768 195.643 89.3267 195.393 cv86.2769 196.194 84.2769 192.793 81.4268 194.694 cv77.6768 196.343 73.6768 195.893 70.127 193.494 cv68.7271 190.843 67.5269 194.293 66.0269 194.194 cv63.3267 196.093 59.3267 197.694 56.2271 195.643 cv53.3267 195.143 51.877 192.893 50.4268 190.593 cv48.7271 190.543 47.2271 186.593 45.627 189.393 cv46.2271 192.143 50.2271 191.593 50.6768 194.694 cv48.627 198.194 44.2769 195.944 40.627 196.593 cv38.627 197.093 37.3267 193.543 35.5767 196.093 cv34.8267 196.843 li31.0767 195.494 24.1768 199.994 23.3267 193.494 cv23.127 192.444 24.3267 191.793 25.0269 191.293 cv28.7935 190.593 27.2271 183.793 28.377 180.043 cv25.9771 177.293 30.7769 172.244 25.7271 171.643 cv24.9268 170.793 23.627 170.593 23.0767 169.694 cv20.127 172.643 23.7271 176.444 21.877 179.793 cv21.2769 180.593 20.3267 180.343 19.2271 180.293 cv17.627 178.694 18.5767 175.643 16.627 174.043 cv17.0767 172.343 15.1768 172.593 14.4268 171.893 cv10.627 171.893 li7.72705 173.293 5.87695 175.793 6.02686 179.093 cv5.57666 179.543 li5.67676 183.444 4.72705 189.293 9.17676 190.843 cv10.627 191.444 12.8267 191.843 14.6768 191.293 cv18.8267 190.543 18.0269 179.543 22.627 186.994 cv22.4268 190.994 20.4268 194.793 17.0767 197.093 cv15.9268 197.293 14.877 197.543 13.7271 197.793 cv13.1768 196.793 12.2769 197.744 11.5767 197.793 cv8.12695 196.994 4.92676 195.143 3.42676 191.793 cv3.87695 190.793 2.62695 190.393 2.42676 189.643 cv2.67676 189.393 li1.32666 188.244 2.37695 186.043 1.72705 184.593 cv0.57666 182.244 1.92676 179.494 1.47705 177.143 cv2.12695 172.093 5.12695 166.593 10.377 164.893 cv14.0767 163.543 16.627 168.694 19.7271 165.143 cvcp@141.522 171.115 mo143.356 170.615 145.689 171.615 146.689 172.281 cv147.856 176.115 145.326 177.83 147.189 178.948 cv149.689 180.448 150.348 178.501 153.356 178.948 cv157.856 179.615 155.022 182.448 155.356 184.781 cv155.689 187.115 156.856 189.281 155.689 189.948 cv154.522 190.615 151.022 191.281 149.689 192.615 cv147.189 190.781 152.431 190.33 151.356 188.448 cv150.689 187.281 149.522 186.281 147.856 186.615 cv146.189 186.948 144.522 188.448 144.522 188.448 cv144.522 188.448 145.189 190.448 144.022 190.781 cv142.856 191.115 141.856 191.615 141.856 188.615 cv141.856 185.615 141.856 181.281 141.522 179.281 cv141.189 177.281 141.522 171.115 141.522 171.115 cvcp219.356 187.281 mo222.689 186.115 222.022 189.948 222.022 189.948 cv221.189 191.948 216.022 188.448 219.356 187.281 cvcp151.32 171.622 mo151.121 172.272 152.239 165.581 151.339 165.981 cv150.689 166.131 150.189 165.731 149.689 165.481 cv142.639 163.631 136.189 166.031 129.04 165.231 cv125.089 166.431 127.589 170.531 126.889 173.181 cv127.189 175.581 127.04 178.081 128.79 179.881 cv135.489 180.581 129.79 173.181 133.839 170.981 cv134.589 171.181 135.739 170.581 136.239 171.481 cv137.54 176.581 136.689 183.781 136.939 189.981 cv135.889 191.831 133.489 190.381 131.889 191.181 cv130.589 192.081 129.139 193.331 129.739 195.231 cv131.989 197.581 134.889 196.731 137.689 196.931 cv138.939 196.481 140.54 196.881 141.489 195.731 cv142.589 195.481 143.239 196.181 144.139 196.431 cv145.389 196.381 147.139 195.981 148.239 194.781 cv149.989 194.231 150.04 195.981 151.339 196.431 cv152.29 196.931 153.439 196.381 154.489 196.181 cv158.839 195.781 165.589 198.081 167.889 193.581 cv168.589 191.231 166.489 189.981 165.489 188.281 cv164.29 187.131 162.889 188.381 161.889 189.231 cv161.089 188.531 160.389 187.731 160.689 186.581 cv162.589 184.731 159.739 181.881 162.389 180.381 cv166.189 175.981 165.939 183.681 169.589 182.981 cv171.639 182.531 172.489 180.281 173.889 178.931 cv177.739 178.931 li178.79 179.031 180.639 180.381 179.889 181.581 cv180.089 184.081 180.689 187.581 179.439 189.481 cv177.339 189.231 175.04 190.581 173.439 191.631 cv173.29 193.331 172.389 195.181 174.639 195.981 cv186.389 196.931 li188.089 195.881 190.54 195.881 192.389 195.981 cv194.089 195.681 192.489 194.781 193.339 193.781 cv194.439 193.181 195.639 194.231 196.239 194.981 cv199.04 194.331 200.439 197.231 203.439 196.181 cv205.339 195.781 207.639 192.881 209.189 194.981 cv210.989 197.569 216.689 196.948 221.856 197.115 cv226.056 196.314 233.022 199.115 233.889 195.981 cv235.239 194.031 236.54 191.831 234.639 189.731 cv233.089 189.581 231.339 190.031 230.089 189.231 cv228.489 187.281 225.139 184.581 226.489 181.581 cv228.489 178.931 232.706 180.014 234.856 178.115 cv235.206 176.365 234.79 173.381 233.689 171.731 cv231.389 171.731 229.54 170.681 227.439 171.231 cv224.489 172.031 222.339 175.181 221.689 177.981 cv220.489 178.631 220.489 180.681 218.79 179.881 cv218.239 178.681 218.356 177.348 218.856 175.948 cv218.255 171.898 220.639 167.331 217.589 164.031 cv214.54 163.131 211.489 162.881 207.989 162.381 cv204.989 163.631 208.089 165.981 207.29 167.881 cv207.739 170.981 210.79 170.831 212.79 172.431 cv213.339 175.981 212.739 179.631 213.29 183.481 cv213.189 184.881 211.639 184.731 210.889 185.381 cv206.589 184.931 205.939 191.031 201.04 189.481 cv198.939 188.231 196.389 187.381 195.739 184.681 cv195.139 182.931 195.739 181.031 196.689 179.631 cv198.489 178.931 199.839 176.931 202.239 177.731 cv203.489 178.581 203.739 180.281 203.889 181.781 cv204.689 183.081 206.189 184.381 207.739 183.481 cv209.29 182.381 209.54 180.981 210.389 179.381 cv209.989 178.431 210.189 177.181 210.139 176.031 cv209.29 173.831 207.339 172.331 205.089 171.731 cv203.79 169.981 201.739 171.081 199.589 170.781 cv195.939 170.781 193.589 175.031 191.889 177.231 cv188.689 181.448 192.472 185.681 191.522 189.781 cv190.323 189.381 187.189 190.481 186.389 188.281 cv186.189 183.781 186.689 179.615 185.889 174.831 cv185.439 173.681 184.389 172.781 184.489 171.481 cv185.139 169.731 186.79 167.681 186.139 165.481 cv185.54 163.481 183.489 163.031 181.589 163.331 cv179.989 163.631 179.089 165.381 178.489 166.681 cv177.189 168.681 180.939 170.031 178.939 171.731 cv176.839 172.431 174.339 172.081 172.689 173.881 cv170.889 172.931 168.739 171.981 166.939 171.731 cv164.439 171.981 162.989 175.581 159.989 173.881 cv159.189 173.181 154.82 173.772 153.82 173.122 cv151.32 171.622 licp189.989 170.781 mo188.939 170.531 187.989 170.981 187.589 171.981 cv187.839 172.981 186.79 174.081 187.839 174.831 cv188.639 176.181 189.54 174.431 190.239 174.581 cv190.989 173.931 191.04 172.981 190.989 171.981 cv190.589 171.581 190.189 171.231 189.989 170.781 cvcpf141.522 171.115 mo143.356 170.615 145.689 171.615 146.689 172.281 cv147.856 176.115 145.326 177.83 147.189 178.948 cv149.689 180.448 150.348 178.501 153.356 178.948 cv157.856 179.615 155.022 182.448 155.356 184.781 cv155.689 187.115 156.856 189.281 155.689 189.948 cv154.522 190.615 151.022 191.281 149.689 192.615 cv147.189 190.781 152.431 190.33 151.356 188.448 cv150.689 187.281 149.522 186.281 147.856 186.615 cv146.189 186.948 144.522 188.448 144.522 188.448 cv144.522 188.448 145.189 190.448 144.022 190.781 cv142.856 191.115 141.856 191.615 141.856 188.615 cv141.856 185.615 141.856 181.281 141.522 179.281 cv141.189 177.281 141.522 171.115 141.522 171.115 cvcp219.356 187.281 mo222.689 186.115 222.022 189.948 222.022 189.948 cv221.189 191.948 216.022 188.448 219.356 187.281 cvcp151.32 171.622 mo151.121 172.272 152.239 165.581 151.339 165.981 cv150.689 166.131 150.189 165.731 149.689 165.481 cv142.639 163.631 136.189 166.031 129.04 165.231 cv125.089 166.431 127.589 170.531 126.889 173.181 cv127.189 175.581 127.04 178.081 128.79 179.881 cv135.489 180.581 129.79 173.181 133.839 170.981 cv134.589 171.181 135.739 170.581 136.239 171.481 cv137.54 176.581 136.689 183.781 136.939 189.981 cv135.889 191.831 133.489 190.381 131.889 191.181 cv130.589 192.081 129.139 193.331 129.739 195.231 cv131.989 197.581 134.889 196.731 137.689 196.931 cv138.939 196.481 140.54 196.881 141.489 195.731 cv142.589 195.481 143.239 196.181 144.139 196.431 cv145.389 196.381 147.139 195.981 148.239 194.781 cv149.989 194.231 150.04 195.981 151.339 196.431 cv152.29 196.931 153.439 196.381 154.489 196.181 cv158.839 195.781 165.589 198.081 167.889 193.581 cv168.589 191.231 166.489 189.981 165.489 188.281 cv164.29 187.131 162.889 188.381 161.889 189.231 cv161.089 188.531 160.389 187.731 160.689 186.581 cv162.589 184.731 159.739 181.881 162.389 180.381 cv166.189 175.981 165.939 183.681 169.589 182.981 cv171.639 182.531 172.489 180.281 173.889 178.931 cv177.739 178.931 li178.79 179.031 180.639 180.381 179.889 181.581 cv180.089 184.081 180.689 187.581 179.439 189.481 cv177.339 189.231 175.04 190.581 173.439 191.631 cv173.29 193.331 172.389 195.181 174.639 195.981 cv186.389 196.931 li188.089 195.881 190.54 195.881 192.389 195.981 cv194.089 195.681 192.489 194.781 193.339 193.781 cv194.439 193.181 195.639 194.231 196.239 194.981 cv199.04 194.331 200.439 197.231 203.439 196.181 cv205.339 195.781 207.639 192.881 209.189 194.981 cv210.989 197.569 216.689 196.948 221.856 197.115 cv226.056 196.314 233.022 199.115 233.889 195.981 cv235.239 194.031 236.54 191.831 234.639 189.731 cv233.089 189.581 231.339 190.031 230.089 189.231 cv228.489 187.281 225.139 184.581 226.489 181.581 cv228.489 178.931 232.706 180.014 234.856 178.115 cv235.206 176.365 234.79 173.381 233.689 171.731 cv231.389 171.731 229.54 170.681 227.439 171.231 cv224.489 172.031 222.339 175.181 221.689 177.981 cv220.489 178.631 220.489 180.681 218.79 179.881 cv218.239 178.681 218.356 177.348 218.856 175.948 cv218.255 171.898 220.639 167.331 217.589 164.031 cv214.54 163.131 211.489 162.881 207.989 162.381 cv204.989 163.631 208.089 165.981 207.29 167.881 cv207.739 170.981 210.79 170.831 212.79 172.431 cv213.339 175.981 212.739 179.631 213.29 183.481 cv213.189 184.881 211.639 184.731 210.889 185.381 cv206.589 184.931 205.939 191.031 201.04 189.481 cv198.939 188.231 196.389 187.381 195.739 184.681 cv195.139 182.931 195.739 181.031 196.689 179.631 cv198.489 178.931 199.839 176.931 202.239 177.731 cv203.489 178.581 203.739 180.281 203.889 181.781 cv204.689 183.081 206.189 184.381 207.739 183.481 cv209.29 182.381 209.54 180.981 210.389 179.381 cv209.989 178.431 210.189 177.181 210.139 176.031 cv209.29 173.831 207.339 172.331 205.089 171.731 cv203.79 169.981 201.739 171.081 199.589 170.781 cv195.939 170.781 193.589 175.031 191.889 177.231 cv188.689 181.448 192.472 185.681 191.522 189.781 cv190.323 189.381 187.189 190.481 186.389 188.281 cv186.189 183.781 186.689 179.615 185.889 174.831 cv185.439 173.681 184.389 172.781 184.489 171.481 cv185.139 169.731 186.79 167.681 186.139 165.481 cv185.54 163.481 183.489 163.031 181.589 163.331 cv179.989 163.631 179.089 165.381 178.489 166.681 cv177.189 168.681 180.939 170.031 178.939 171.731 cv176.839 172.431 174.339 172.081 172.689 173.881 cv170.889 172.931 168.739 171.981 166.939 171.731 cv164.439 171.981 162.989 175.581 159.989 173.881 cv159.189 173.181 154.82 173.772 153.82 173.122 cv151.32 171.622 licp189.989 170.781 mo188.939 170.531 187.989 170.981 187.589 171.981 cv187.839 172.981 186.79 174.081 187.839 174.831 cv188.639 176.181 189.54 174.431 190.239 174.581 cv190.989 173.931 191.04 172.981 190.989 171.981 cv190.589 171.581 190.189 171.231 189.989 170.781 cvcp@212.29 187.781 mo211.589 188.381 209.79 189.381 210.389 190.431 cv212.189 191.115 li213.04 190.514 213.589 189.881 213.04 188.281 cv212.79 188.081 212.689 187.681 212.29 187.781 cvcp0 0 0 0 cmykf212.29 187.781 mo211.589 188.381 209.79 189.381 210.389 190.431 cv212.189 191.115 li213.04 190.514 213.589 189.881 213.04 188.281 cv212.79 188.081 212.689 187.681 212.29 187.781 cvcp0 0 0 1 cmyk@86.2578 222.084 mo85.1079 221.785 85.5747 220.601 84.7749 219.901 cv84.4746 220.501 82.958 220.634 82.4082 220.634 cv81.7578 221.334 80.2578 221.535 80.5078 222.785 cv82.0581 225.184 84.8081 224.184 87.0078 223.735 cv88.3081 222.235 91.8081 222.535 90.6079 219.684 cv87.6582 217.634 88.5581 222.235 86.2578 222.084 cvcp43.5581 214.884 mo42.8081 216.084 41.1079 217.084 42.1079 218.735 cv40.958 219.684 41.6079 221.334 40.4082 222.334 cv39.6079 225.434 43.2578 224.785 44.5078 226.384 cv46.7749 224.401 48.7915 224.951 49.9414 223.401 cv49.4414 220.451 50.5078 217.218 49.1079 214.068 cv48.3579 211.368 45.1079 214.334 43.5581 214.884 cvcp96.8081 212.934 mo95.208 215.785 96.9082 218.884 96.3579 222.084 cv97.6582 222.334 98.5581 220.535 100.208 220.884 cv100.708 221.535 101.558 222.084 101.858 222.785 cv101.208 225.235 103.008 227.285 103.058 229.735 cv103.608 230.285 104.258 230.235 104.758 229.535 cv105.458 224.485 105.292 219.417 105.108 214.068 cv103.258 211.368 99.5078 213.535 96.8081 212.934 cvcp115.058 212.735 mo113.158 212.434 111.008 213.934 110.008 215.584 cv109.308 218.434 109.558 221.184 110.758 223.985 cv112.408 224.184 113.908 225.434 115.558 224.934 cv118.958 223.535 119.775 221.401 119.408 216.785 cv118.658 215.134 117.158 212.235 115.058 212.735 cvcp64.9082 211.985 mo63.958 213.334 61.8916 214.417 62.4414 216.068 cv65.6914 215.118 69.0747 216.634 71.7749 214.735 cv71.4414 210.901 67.4082 211.985 64.9082 211.985 cvcp89.1582 211.735 mo87.6079 211.634 85.208 210.785 84.1079 212.485 cv83.5078 213.334 82.6582 215.134 83.8579 215.584 cv85.8081 215.285 87.8081 215.235 89.6079 214.634 cv89.8579 213.985 91.2412 213.701 90.9414 212.901 cv90.8916 212.201 89.5581 212.035 89.1582 211.735 cvcp28.208 198.785 mo29.9082 198.985 30.9082 202.934 32.5078 199.735 cv34.8579 198.735 37.7578 198.485 39.958 199.985 cv43.3081 202.334 39.5078 206.535 41.4082 209.334 cv42.8579 207.384 45.4082 207.334 47.1582 206.735 cv48.5078 205.934 49.5747 207.584 50.2749 205.735 cv50.4248 205.134 50.458 204.134 51.2578 203.834 cv51.8579 203.634 52.3081 204.084 52.458 204.535 cv53.0078 205.884 51.4082 206.334 51.958 207.684 cv54.3081 209.584 54.3081 212.485 55.5581 214.884 cv56.5078 215.134 57.208 214.584 57.708 213.934 cv57.708 208.985 62.7578 207.834 66.3579 206.485 cv70.4082 205.684 73.708 207.634 76.208 210.535 cv75.8081 213.535 80.3579 217.334 75.958 219.184 cv72.6582 218.485 69.4082 220.634 66.1079 219.184 cv64.458 218.884 63.0581 219.434 62.0581 220.884 cv62.0581 223.134 64.6079 223.285 65.9082 224.485 cv70.0078 225.485 72.6079 222.684 75.5078 220.634 cv77.7578 220.384 78.9082 217.334 80.7578 216.084 cv79.1582 214.285 76.8579 212.485 78.1079 209.834 cv79.1582 208.884 79.8579 206.934 81.5078 206.485 cv84.208 207.535 87.6079 205.384 90.8579 206.485 cv92.708 206.485 94.1582 209.434 95.6582 208.384 cv95.7578 206.834 95.1582 204.735 97.1079 204.084 cv98.6079 204.384 98.7578 205.884 99.5078 207.184 cv99.708 205.934 99.8081 204.485 100.908 203.584 cv101.208 203.634 101.708 203.434 101.908 203.834 cv102.208 203.035 102.958 203.485 103.558 203.334 cv104.608 203.884 105.358 204.934 105.508 205.985 cv107.358 206.535 108.958 208.384 111.008 207.684 cv113.108 206.535 116.208 205.884 118.458 207.184 cv120.358 207.134 121.558 209.235 123.008 209.834 cv125.608 212.834 126.208 217.235 125.158 221.134 cv123.058 223.634 123.808 227.785 120.108 229.285 cv116.908 230.035 113.458 229.584 110.308 229.035 cv109.208 229.584 110.308 230.434 110.058 231.184 cv111.858 233.334 116.941 232.735 115.808 236.934 cv114.058 239.535 109.758 239.134 107.658 239.134 cv105.308 238.584 102.408 239.434 100.708 237.434 cv100.308 235.134 97.2578 233.134 98.7578 230.934 cv98.9082 230.134 98.6582 229.285 97.8081 229.035 cv94.7578 229.834 92.7578 226.434 89.9082 228.334 cv86.1582 229.985 82.1582 229.535 78.6079 227.134 cv77.208 224.485 76.0078 227.934 74.5078 227.834 cv71.8081 229.735 67.8081 231.334 64.708 229.285 cv61.8081 228.785 60.3579 226.535 58.9082 224.235 cv57.208 224.184 55.708 220.235 54.1079 223.035 cv54.708 225.785 58.708 225.235 59.1582 228.334 cv57.1079 231.834 52.7578 229.584 49.1079 230.235 cv47.1079 230.735 45.8081 227.184 44.0581 229.735 cv43.3081 230.485 li39.5581 229.134 32.6582 233.634 31.8081 227.134 cv31.6079 226.084 32.8081 225.434 33.5078 224.934 cv37.2749 224.235 35.708 217.434 36.8579 213.684 cv34.458 210.934 39.2578 205.884 34.208 205.285 cv33.4082 204.434 32.1079 204.235 31.5581 203.334 cv28.6079 206.285 32.208 210.084 30.3579 213.434 cv29.7578 214.235 28.8081 213.985 27.708 213.934 cv26.1079 212.334 27.0581 209.285 25.1079 207.684 cv25.5581 205.985 23.6582 206.235 22.9082 205.535 cv19.1079 205.535 li16.208 206.934 14.3579 209.434 14.5078 212.735 cv14.0581 213.184 li14.1582 217.084 13.208 222.934 17.6582 224.485 cv19.1079 225.084 21.3081 225.485 23.1582 224.934 cv27.3081 224.184 26.5078 213.184 31.1079 220.634 cv30.9082 224.634 28.9082 228.434 25.5581 230.735 cv24.4082 230.934 23.3579 231.184 22.208 231.434 cv21.6582 230.434 20.7578 231.384 20.0581 231.434 cv16.6079 230.634 13.4082 228.785 11.9082 225.434 cv12.3579 224.434 11.1079 224.035 10.9082 223.285 cv11.1582 223.035 li9.80811 221.884 10.8579 219.684 10.208 218.235 cv9.05811 215.884 10.4082 213.134 9.95801 210.785 cv10.6079 205.735 13.6079 200.235 18.8579 198.535 cv22.5581 197.184 25.1079 202.334 28.208 198.785 cvcpf86.2578 222.084 mo85.1079 221.785 85.5747 220.601 84.7749 219.901 cv84.4746 220.501 82.958 220.634 82.4082 220.634 cv81.7578 221.334 80.2578 221.535 80.5078 222.785 cv82.0581 225.184 84.8081 224.184 87.0078 223.735 cv88.3081 222.235 91.8081 222.535 90.6079 219.684 cv87.6582 217.634 88.5581 222.235 86.2578 222.084 cvcp43.5581 214.884 mo42.8081 216.084 41.1079 217.084 42.1079 218.735 cv40.958 219.684 41.6079 221.334 40.4082 222.334 cv39.6079 225.434 43.2578 224.785 44.5078 226.384 cv46.7749 224.401 48.7915 224.951 49.9414 223.401 cv49.4414 220.451 50.5078 217.218 49.1079 214.068 cv48.3579 211.368 45.1079 214.334 43.5581 214.884 cvcp96.8081 212.934 mo95.208 215.785 96.9082 218.884 96.3579 222.084 cv97.6582 222.334 98.5581 220.535 100.208 220.884 cv100.708 221.535 101.558 222.084 101.858 222.785 cv101.208 225.235 103.008 227.285 103.058 229.735 cv103.608 230.285 104.258 230.235 104.758 229.535 cv105.458 224.485 105.292 219.417 105.108 214.068 cv103.258 211.368 99.5078 213.535 96.8081 212.934 cvcp115.058 212.735 mo113.158 212.434 111.008 213.934 110.008 215.584 cv109.308 218.434 109.558 221.184 110.758 223.985 cv112.408 224.184 113.908 225.434 115.558 224.934 cv118.958 223.535 119.775 221.401 119.408 216.785 cv118.658 215.134 117.158 212.235 115.058 212.735 cvcp64.9082 211.985 mo63.958 213.334 61.8916 214.417 62.4414 216.068 cv65.6914 215.118 69.0747 216.634 71.7749 214.735 cv71.4414 210.901 67.4082 211.985 64.9082 211.985 cvcp89.1582 211.735 mo87.6079 211.634 85.208 210.785 84.1079 212.485 cv83.5078 213.334 82.6582 215.134 83.8579 215.584 cv85.8081 215.285 87.8081 215.235 89.6079 214.634 cv89.8579 213.985 91.2412 213.701 90.9414 212.901 cv90.8916 212.201 89.5581 212.035 89.1582 211.735 cvcp28.208 198.785 mo29.9082 198.985 30.9082 202.934 32.5078 199.735 cv34.8579 198.735 37.7578 198.485 39.958 199.985 cv43.3081 202.334 39.5078 206.535 41.4082 209.334 cv42.8579 207.384 45.4082 207.334 47.1582 206.735 cv48.5078 205.934 49.5747 207.584 50.2749 205.735 cv50.4248 205.134 50.458 204.134 51.2578 203.834 cv51.8579 203.634 52.3081 204.084 52.458 204.535 cv53.0078 205.884 51.4082 206.334 51.958 207.684 cv54.3081 209.584 54.3081 212.485 55.5581 214.884 cv56.5078 215.134 57.208 214.584 57.708 213.934 cv57.708 208.985 62.7578 207.834 66.3579 206.485 cv70.4082 205.684 73.708 207.634 76.208 210.535 cv75.8081 213.535 80.3579 217.334 75.958 219.184 cv72.6582 218.485 69.4082 220.634 66.1079 219.184 cv64.458 218.884 63.0581 219.434 62.0581 220.884 cv62.0581 223.134 64.6079 223.285 65.9082 224.485 cv70.0078 225.485 72.6079 222.684 75.5078 220.634 cv77.7578 220.384 78.9082 217.334 80.7578 216.084 cv79.1582 214.285 76.8579 212.485 78.1079 209.834 cv79.1582 208.884 79.8579 206.934 81.5078 206.485 cv84.208 207.535 87.6079 205.384 90.8579 206.485 cv92.708 206.485 94.1582 209.434 95.6582 208.384 cv95.7578 206.834 95.1582 204.735 97.1079 204.084 cv98.6079 204.384 98.7578 205.884 99.5078 207.184 cv99.708 205.934 99.8081 204.485 100.908 203.584 cv101.208 203.634 101.708 203.434 101.908 203.834 cv102.208 203.035 102.958 203.485 103.558 203.334 cv104.608 203.884 105.358 204.934 105.508 205.985 cv107.358 206.535 108.958 208.384 111.008 207.684 cv113.108 206.535 116.208 205.884 118.458 207.184 cv120.358 207.134 121.558 209.235 123.008 209.834 cv125.608 212.834 126.208 217.235 125.158 221.134 cv123.058 223.634 123.808 227.785 120.108 229.285 cv116.908 230.035 113.458 229.584 110.308 229.035 cv109.208 229.584 110.308 230.434 110.058 231.184 cv111.858 233.334 116.941 232.735 115.808 236.934 cv114.058 239.535 109.758 239.134 107.658 239.134 cv105.308 238.584 102.408 239.434 100.708 237.434 cv100.308 235.134 97.2578 233.134 98.7578 230.934 cv98.9082 230.134 98.6582 229.285 97.8081 229.035 cv94.7578 229.834 92.7578 226.434 89.9082 228.334 cv86.1582 229.985 82.1582 229.535 78.6079 227.134 cv77.208 224.485 76.0078 227.934 74.5078 227.834 cv71.8081 229.735 67.8081 231.334 64.708 229.285 cv61.8081 228.785 60.3579 226.535 58.9082 224.235 cv57.208 224.184 55.708 220.235 54.1079 223.035 cv54.708 225.785 58.708 225.235 59.1582 228.334 cv57.1079 231.834 52.7578 229.584 49.1079 230.235 cv47.1079 230.735 45.8081 227.184 44.0581 229.735 cv43.3081 230.485 li39.5581 229.134 32.6582 233.634 31.8081 227.134 cv31.6079 226.084 32.8081 225.434 33.5078 224.934 cv37.2749 224.235 35.708 217.434 36.8579 213.684 cv34.458 210.934 39.2578 205.884 34.208 205.285 cv33.4082 204.434 32.1079 204.235 31.5581 203.334 cv28.6079 206.285 32.208 210.084 30.3579 213.434 cv29.7578 214.235 28.8081 213.985 27.708 213.934 cv26.1079 212.334 27.0581 209.285 25.1079 207.684 cv25.5581 205.985 23.6582 206.235 22.9082 205.535 cv19.1079 205.535 li16.208 206.934 14.3579 209.434 14.5078 212.735 cv14.0581 213.184 li14.1582 217.084 13.208 222.934 17.6582 224.485 cv19.1079 225.084 21.3081 225.485 23.1582 224.934 cv27.3081 224.184 26.5078 213.184 31.1079 220.634 cv30.9082 224.634 28.9082 228.434 25.5581 230.735 cv24.4082 230.934 23.3579 231.184 22.208 231.434 cv21.6582 230.434 20.7578 231.384 20.0581 231.434 cv16.6079 230.634 13.4082 228.785 11.9082 225.434 cv12.3579 224.434 11.1079 224.035 10.9082 223.285 cv11.1582 223.035 li9.80811 221.884 10.8579 219.684 10.208 218.235 cv9.05811 215.884 10.4082 213.134 9.95801 210.785 cv10.6079 205.735 13.6079 200.235 18.8579 198.535 cv22.5581 197.184 25.1079 202.334 28.208 198.785 cvcp@150.004 204.755 mo151.837 204.255 154.17 205.255 155.17 205.922 cv156.337 209.755 153.807 211.47 155.67 212.588 cv158.17 214.088 158.829 212.142 161.837 212.588 cv166.337 213.255 163.504 216.088 163.837 218.422 cv164.17 220.755 165.337 222.922 164.17 223.588 cv163.004 224.255 159.504 224.922 158.17 226.255 cv155.67 224.422 160.912 223.97 159.837 222.088 cv159.17 220.922 158.004 219.922 156.337 220.255 cv154.67 220.588 153.004 222.088 153.004 222.088 cv153.004 222.088 153.67 224.088 152.504 224.422 cv151.337 224.755 150.337 225.255 150.337 222.255 cv150.337 219.255 150.337 214.922 150.004 212.922 cv149.67 210.922 150.004 204.755 150.004 204.755 cvcp227.837 220.922 mo231.17 219.755 230.504 223.588 230.504 223.588 cv229.67 225.588 224.504 222.088 227.837 220.922 cvcp159.802 205.262 mo159.602 205.913 160.721 199.222 159.82 199.622 cv159.17 199.772 158.67 199.372 158.17 199.122 cv151.121 197.272 144.67 199.672 137.521 198.872 cv133.57 200.072 136.07 204.172 135.371 206.822 cv135.67 209.222 135.521 211.722 137.271 213.522 cv143.971 214.222 138.271 206.822 142.32 204.622 cv143.07 204.822 144.221 204.222 144.721 205.122 cv146.021 210.222 145.17 217.422 145.42 223.622 cv144.371 225.472 141.971 224.022 140.371 224.822 cv139.07 225.722 137.621 226.972 138.221 228.872 cv140.471 231.222 143.371 230.372 146.17 230.572 cv147.42 230.122 149.021 230.522 149.971 229.372 cv151.07 229.122 151.721 229.822 152.621 230.072 cv153.871 230.022 155.621 229.622 156.721 228.422 cv158.471 227.872 158.521 229.622 159.82 230.072 cv160.771 230.572 161.92 230.022 162.971 229.822 cv167.32 229.422 174.071 231.722 176.371 227.222 cv177.071 224.872 174.971 223.622 173.971 221.922 cv172.771 220.772 171.371 222.022 170.371 222.872 cv169.57 222.172 168.871 221.372 169.17 220.222 cv171.071 218.372 168.221 215.522 170.871 214.022 cv174.67 209.622 174.42 217.322 178.071 216.622 cv180.121 216.172 180.971 213.922 182.371 212.572 cv186.221 212.572 li187.271 212.672 189.121 214.022 188.371 215.222 cv188.571 217.722 189.17 221.222 187.92 223.122 cv185.821 222.872 183.521 224.222 181.92 225.272 cv181.771 226.972 180.871 228.822 183.121 229.622 cv194.871 230.572 li196.571 229.522 199.021 229.522 200.871 229.622 cv202.571 229.322 200.971 228.422 201.821 227.422 cv202.92 226.822 204.121 227.872 204.721 228.622 cv207.521 227.972 208.92 230.872 211.92 229.822 cv213.821 229.422 216.121 226.522 217.67 228.622 cv219.471 231.209 225.17 230.588 230.337 230.755 cv234.538 229.956 241.504 232.755 242.371 229.622 cv243.721 227.672 245.021 225.472 243.121 223.372 cv241.571 223.222 239.821 223.672 238.571 222.872 cv236.971 220.922 233.621 218.222 234.971 215.222 cv236.971 212.572 241.187 213.656 243.337 211.755 cv243.687 210.005 243.271 207.022 242.17 205.372 cv239.871 205.372 238.021 204.322 235.92 204.872 cv232.971 205.672 230.821 208.822 230.17 211.622 cv228.971 212.272 228.971 214.322 227.271 213.522 cv226.721 212.322 226.837 210.989 227.337 209.588 cv226.738 205.539 229.121 200.972 226.071 197.672 cv223.021 196.772 219.971 196.522 216.471 196.022 cv213.471 197.272 216.571 199.622 215.771 201.522 cv216.221 204.622 219.271 204.472 221.271 206.072 cv221.821 209.622 221.221 213.272 221.771 217.122 cv221.67 218.522 220.121 218.372 219.371 219.022 cv215.071 218.572 214.42 224.672 209.521 223.122 cv207.42 221.872 204.871 221.022 204.221 218.322 cv203.621 216.572 204.221 214.672 205.17 213.272 cv206.971 212.572 208.321 210.572 210.721 211.372 cv211.971 212.222 212.221 213.922 212.371 215.422 cv213.17 216.722 214.67 218.022 216.221 217.122 cv217.771 216.022 218.021 214.622 218.871 213.022 cv218.471 212.072 218.67 210.822 218.621 209.672 cv217.771 207.472 215.821 205.972 213.571 205.372 cv212.271 203.622 210.221 204.722 208.071 204.422 cv204.42 204.422 202.071 208.672 200.371 210.872 cv197.17 215.088 200.955 219.322 200.004 223.422 cv198.804 223.022 195.67 224.122 194.871 221.922 cv194.67 217.422 195.17 213.255 194.371 208.472 cv193.92 207.322 192.871 206.422 192.971 205.122 cv193.621 203.372 195.271 201.322 194.621 199.122 cv194.021 197.122 191.971 196.672 190.071 196.972 cv188.471 197.272 187.571 199.022 186.971 200.322 cv185.67 202.322 189.42 203.672 187.42 205.372 cv185.321 206.072 182.821 205.722 181.17 207.522 cv179.371 206.572 177.221 205.622 175.42 205.372 cv172.92 205.622 171.471 209.222 168.471 207.522 cv167.67 206.822 163.302 207.413 162.302 206.762 cv159.802 205.262 licp198.471 204.422 mo197.42 204.172 196.471 204.622 196.071 205.622 cv196.321 206.622 195.271 207.722 196.321 208.472 cv197.121 209.822 198.021 208.072 198.721 208.222 cv199.471 207.572 199.521 206.622 199.471 205.622 cv199.071 205.222 198.67 204.872 198.471 204.422 cvcpf150.004 204.755 mo151.837 204.255 154.17 205.255 155.17 205.922 cv156.337 209.755 153.807 211.47 155.67 212.588 cv158.17 214.088 158.829 212.142 161.837 212.588 cv166.337 213.255 163.504 216.088 163.837 218.422 cv164.17 220.755 165.337 222.922 164.17 223.588 cv163.004 224.255 159.504 224.922 158.17 226.255 cv155.67 224.422 160.912 223.97 159.837 222.088 cv159.17 220.922 158.004 219.922 156.337 220.255 cv154.67 220.588 153.004 222.088 153.004 222.088 cv153.004 222.088 153.67 224.088 152.504 224.422 cv151.337 224.755 150.337 225.255 150.337 222.255 cv150.337 219.255 150.337 214.922 150.004 212.922 cv149.67 210.922 150.004 204.755 150.004 204.755 cvcp227.837 220.922 mo231.17 219.755 230.504 223.588 230.504 223.588 cv229.67 225.588 224.504 222.088 227.837 220.922 cvcp159.802 205.262 mo159.602 205.913 160.721 199.222 159.82 199.622 cv159.17 199.772 158.67 199.372 158.17 199.122 cv151.121 197.272 144.67 199.672 137.521 198.872 cv133.57 200.072 136.07 204.172 135.371 206.822 cv135.67 209.222 135.521 211.722 137.271 213.522 cv143.971 214.222 138.271 206.822 142.32 204.622 cv143.07 204.822 144.221 204.222 144.721 205.122 cv146.021 210.222 145.17 217.422 145.42 223.622 cv144.371 225.472 141.971 224.022 140.371 224.822 cv139.07 225.722 137.621 226.972 138.221 228.872 cv140.471 231.222 143.371 230.372 146.17 230.572 cv147.42 230.122 149.021 230.522 149.971 229.372 cv151.07 229.122 151.721 229.822 152.621 230.072 cv153.871 230.022 155.621 229.622 156.721 228.422 cv158.471 227.872 158.521 229.622 159.82 230.072 cv160.771 230.572 161.92 230.022 162.971 229.822 cv167.32 229.422 174.071 231.722 176.371 227.222 cv177.071 224.872 174.971 223.622 173.971 221.922 cv172.771 220.772 171.371 222.022 170.371 222.872 cv169.57 222.172 168.871 221.372 169.17 220.222 cv171.071 218.372 168.221 215.522 170.871 214.022 cv174.67 209.622 174.42 217.322 178.071 216.622 cv180.121 216.172 180.971 213.922 182.371 212.572 cv186.221 212.572 li187.271 212.672 189.121 214.022 188.371 215.222 cv188.571 217.722 189.17 221.222 187.92 223.122 cv185.821 222.872 183.521 224.222 181.92 225.272 cv181.771 226.972 180.871 228.822 183.121 229.622 cv194.871 230.572 li196.571 229.522 199.021 229.522 200.871 229.622 cv202.571 229.322 200.971 228.422 201.821 227.422 cv202.92 226.822 204.121 227.872 204.721 228.622 cv207.521 227.972 208.92 230.872 211.92 229.822 cv213.821 229.422 216.121 226.522 217.67 228.622 cv219.471 231.209 225.17 230.588 230.337 230.755 cv234.538 229.956 241.504 232.755 242.371 229.622 cv243.721 227.672 245.021 225.472 243.121 223.372 cv241.571 223.222 239.821 223.672 238.571 222.872 cv236.971 220.922 233.621 218.222 234.971 215.222 cv236.971 212.572 241.187 213.656 243.337 211.755 cv243.687 210.005 243.271 207.022 242.17 205.372 cv239.871 205.372 238.021 204.322 235.92 204.872 cv232.971 205.672 230.821 208.822 230.17 211.622 cv228.971 212.272 228.971 214.322 227.271 213.522 cv226.721 212.322 226.837 210.989 227.337 209.588 cv226.738 205.539 229.121 200.972 226.071 197.672 cv223.021 196.772 219.971 196.522 216.471 196.022 cv213.471 197.272 216.571 199.622 215.771 201.522 cv216.221 204.622 219.271 204.472 221.271 206.072 cv221.821 209.622 221.221 213.272 221.771 217.122 cv221.67 218.522 220.121 218.372 219.371 219.022 cv215.071 218.572 214.42 224.672 209.521 223.122 cv207.42 221.872 204.871 221.022 204.221 218.322 cv203.621 216.572 204.221 214.672 205.17 213.272 cv206.971 212.572 208.321 210.572 210.721 211.372 cv211.971 212.222 212.221 213.922 212.371 215.422 cv213.17 216.722 214.67 218.022 216.221 217.122 cv217.771 216.022 218.021 214.622 218.871 213.022 cv218.471 212.072 218.67 210.822 218.621 209.672 cv217.771 207.472 215.821 205.972 213.571 205.372 cv212.271 203.622 210.221 204.722 208.071 204.422 cv204.42 204.422 202.071 208.672 200.371 210.872 cv197.17 215.088 200.955 219.322 200.004 223.422 cv198.804 223.022 195.67 224.122 194.871 221.922 cv194.67 217.422 195.17 213.255 194.371 208.472 cv193.92 207.322 192.871 206.422 192.971 205.122 cv193.621 203.372 195.271 201.322 194.621 199.122 cv194.021 197.122 191.971 196.672 190.071 196.972 cv188.471 197.272 187.571 199.022 186.971 200.322 cv185.67 202.322 189.42 203.672 187.42 205.372 cv185.321 206.072 182.821 205.722 181.17 207.522 cv179.371 206.572 177.221 205.622 175.42 205.372 cv172.92 205.622 171.471 209.222 168.471 207.522 cv167.67 206.822 163.302 207.413 162.302 206.762 cv159.802 205.262 licp198.471 204.422 mo197.42 204.172 196.471 204.622 196.071 205.622 cv196.321 206.622 195.271 207.722 196.321 208.472 cv197.121 209.822 198.021 208.072 198.721 208.222 cv199.471 207.572 199.521 206.622 199.471 205.622 cv199.071 205.222 198.67 204.872 198.471 204.422 cvcp@220.771 221.422 mo220.071 222.022 218.271 223.022 218.871 224.072 cv220.67 224.755 li221.521 224.156 222.071 223.522 221.521 221.922 cv221.271 221.722 221.17 221.322 220.771 221.422 cvcp0 0 0 0 cmykf220.771 221.422 mo220.071 222.022 218.271 223.022 218.871 224.072 cv220.67 224.755 li221.521 224.156 222.071 223.522 221.521 221.922 cv221.271 221.722 221.17 221.322 220.771 221.422 cvcp0 0 0 1 cmyk@114.938 242.983 mo114.083 241.723 112.194 239.953 109.898 240.223 cv107.559 240.627 107.049 241.977 106.689 243.733 cv106.914 244.542 104.409 245.953 105.489 246.583 cv105.309 247.167 108.099 248.727 107.289 249.088 cv107.289 249.088 113.858 246.448 114.938 242.983 cvcpf0.45 lw114.938 242.983 mo114.083 241.723 112.194 239.953 109.898 240.223 cv107.559 240.627 107.049 241.977 106.689 243.733 cv106.914 244.542 104.409 245.953 105.489 246.583 cv105.309 247.167 108.099 248.727 107.289 249.088 cv107.289 249.088 113.858 246.448 114.938 242.983 cvcp@85.5835 0.503906 mo83.5591 -0.896484 82.4336 3.3208 83.1426 5.52002 cv80.0591 9.30762 87.7104 8.45166 87.915 8.45313 cv88.6665 8.07568 90.8584 8.70166 91.2676 7.52002 cv91.8765 7.5835 92.8926 5.27002 91.2676 4.89502 cv91.2676 4.89502 85.3926 7.93701 85.5835 0.503906 cvcpf85.5835 0.503906 mo83.5591 -0.896484 82.4336 3.3208 83.1426 5.52002 cv80.0591 9.30762 87.7104 8.45166 87.915 8.45313 cv88.6665 8.07568 90.8584 8.70166 91.2676 7.52002 cv91.8765 7.5835 92.8926 5.27002 91.2676 4.89502 cv91.2676 4.89502 85.3926 7.93701 85.5835 0.503906 cvcp@160.809 92.4785 mo160.815 93.5581 162.478 93.874 163.544 94.0259 cv164.456 93.5459 165.773 94.3052 166.253 93.1074 cv167.375 92.0103 165.462 91.5508 165.441 90.835 cv164.632 90.2603 163.698 90.437 162.738 90.7227 cv162.444 91.2061 161.199 92.1777 160.809 92.4785 cvcpf0 lw160.809 92.4785 mo160.815 93.5581 162.478 93.874 163.544 94.0259 cv164.456 93.5459 165.773 94.3052 166.253 93.1074 cv167.375 92.0103 165.462 91.5508 165.441 90.835 cv164.632 90.2603 163.698 90.437 162.738 90.7227 cv162.444 91.2061 161.199 92.1777 160.809 92.4785 cvcp@158.143 232.812 mo158.148 233.891 158.809 235.645 164.511 234.472 cv165.423 233.992 166.74 234.751 167.22 233.553 cv168.342 232.456 166.429 231.997 166.409 231.281 cv165.599 230.706 164.665 230.882 163.705 231.168 cv163.411 231.652 158.532 232.51 158.143 232.812 cvcpf158.143 232.812 mo158.148 233.891 158.809 235.645 164.511 234.472 cv165.423 233.992 166.74 234.751 167.22 233.553 cv168.342 232.456 166.429 231.997 166.409 231.281 cv165.599 230.706 164.665 230.882 163.705 231.168 cv163.411 231.652 158.532 232.51 158.143 232.812 cvcp@244.475 235.812 mo244.482 236.891 245.076 236.494 246.142 236.645 cv247.054 236.166 247.33 237.176 247.809 235.978 cv248.931 234.881 247.429 234.997 247.409 234.281 cv246.599 233.706 245.665 233.882 244.705 234.168 cv244.411 234.652 244.866 235.51 244.475 235.812 cvcpf244.475 235.812 mo244.482 236.891 245.076 236.494 246.142 236.645 cv247.054 236.166 247.33 237.176 247.809 235.978 cv248.931 234.881 247.429 234.997 247.409 234.281 cv246.599 233.706 245.665 233.882 244.705 234.168 cv244.411 234.652 244.866 235.51 244.475 235.812 cvcp@249.309 231.312 mo249.315 232.391 249.41 231.994 250.475 232.145 cv251.388 231.666 251.33 232.676 251.809 231.478 cv252.931 230.381 251.65 231.117 251.629 230.402 cv250.821 229.827 249.885 230.003 248.926 230.29 cv248.632 230.773 249.699 231.01 249.309 231.312 cvcpf249.309 231.312 mo249.315 232.391 249.41 231.994 250.475 232.145 cv251.388 231.666 251.33 232.676 251.809 231.478 cv252.931 230.381 251.65 231.117 251.629 230.402 cv250.821 229.827 249.885 230.003 248.926 230.29 cv248.632 230.773 249.699 231.01 249.309 231.312 cvcp@141.78 134.158 mo143.28 150.658 lif2.5 lw141.78 134.158 mo143.28 150.658 li@144.78 153.658 mo145.53 168.658 lif144.78 153.658 mo145.53 168.658 li@%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.0%%For: (Tony Hartt) (Tone-Def Productions)%%Title: (Cheap Trick.eps)%%CreationDate: 4/18/06 2:41 PM%AI9_DataStream%Gb"-6kuo%Lc7jQ^_"V4Z":/D8kAE'7#m_e"@0gBf"rn`o-FR'(YP6(]m741>WX!aWgVZ(!^ZYE9T#HHLl7,@OW?dbY2*YI84PjFM%hd9DGs'@>tQ<Q9GTPVGoN\*lpo39h=g:_$hMX*5cG,thTDaJBW&t$+7G-%?Gg5ZR0eN;rTGO>;,?FP"4me(=cgJ55e?EW.nc>Q>H%)r&YPoD5oOlu_]"rN]cBfOgMKe]7"1Mt`9VBC.=q'Em')S]\DPH`bKbH<L6MR^_b3D]^XdHSB(/@f$WVp[E`X.Y$>op\OqH9POPi%[<Eu[[DuUgF!h3C7f'Uhoi(bY]%?DZqU_;8mn7EZKD+-=D6)Q[(gFj/>Cjut:H\]*q:)T-jT,:$KaBt,hl8Z97nA7*?e=[pXd@qQ%cEH^6S_fVuB^be&;.?<ThnT.4^s+a\Z58n.p!_r<]6edPh$4@!;kRHDf=>SP;NlL;H.tY:L&>S:5?3Jk<qioULILRb4sG^]Yb4KO%kM=_HmB.WF:@R59I=KU(P0gACLm0FJVbqVj<JH2Z)nm<J07,TOAB;k$2'TbqDtC1S:jrr+i^<J:o(mgk&nT6_9=3Bc^'If]1N>t`%+X+&aOoGL^:Orf(pA=6(!Z>+;p+@=TLs!>XR'Ud^;=!!\nUVqIX0BD6^kfIj9D)!Y/t]rFNt2SHq=j.N%ePL@Jh]pejV.Z9n+I>7%D0A"%&)6in3i0fTMp>J;][uFU!E6Jr07$9&C/]VJeJllHHi7#M[8gD^%njIn*H[E60$>?^I^dZ#n1lkS^[46lpY3Rjg-8(_Fj&>'%A+-FFd-9>#pu7>kR+*ZkZ2]<o*..71q[`FYdXs>QLZD,O(]SWa5k"%Wi8K1WkdB"/mIb&"ol,&%Si/mWF$5_52SruIj5"nR^AO2p%^AqL;I<X8Q^$a^1g_abYCN]O+kI9jW^O,qQh=/hWm9d(h7E?f[)u"iiD`\IA+E^?CrhB>$eU>LX)OK^?p&,%bLm7(aN1IQcghb12%=077d"Lim2PWeaKYjlSr^==gYG!.+N+5gMQB5s34g@V&`.4E37l<@Q=d>:o7H67FFfkk#"K=5&=0?P<Lr3ZCt$LoSlrW_b-QE(gu%YGE&3B!^0(esj'Z[COZnRXW_$\kT):2m&t11n(/dCc!('7]fO)Cc$`uhs_P%_eIa4X'moFL8[&sNI&9EX&nU+oq:`>l<`;K4*A/Q%e]k[&(U[kW;6/;`[;'QR(=`8N=*&.Pc)t2,ZY%]T[97?Gld]1H>2?+]<PRg!h5XD]X&dcP)HBYgBPoXbl5R-jlGgh5Yi0MF)t&He%@;f6ek(^,aJnE@8l9R##"rfi>pjj6kJJ6[e'psOa#f#U_r468,X8[hqpjU?ZI+NRigUDRZ2gjRA]nTV_C0oHFn,gr14O<[?ch8p9%oF+O*9t0*4h3qPj2r)4A?-dY!a0f3r2-n*7-)]uaS@VX?Wm6>4354E5@%00b@l^Dr35TRe%D-N0m&Ia-K<]$8[VIt5D-OG_)n)u>%<l:qA261J/=FoS#/C/>ga0I;?1+gBVB%(R`FgG[\bmcH_IFBuXdkP^g1/64OL!_^q7bt!\<F`oP%,^O_f5M/QYRJu7$rIYAO94!"%<!<h,!7&Fr!18;AK`S'lX-+mWT2rS>'516&?q^jZ!ZUrLUnucq)<rmR<<!ERWccS*b`1iqqPelDm!-sm^$Y_*pbVVVaIWGM<!WKN%"@-f(fEK'=5[X[*W<#<pd51u6BEG%h@-dsW5#>Vh-rC)(1lS:\J3kSZap*a6VH3ii"[L'WOL#F-D-@!3C]^SQ+LqlUpL+Lh?nH,t%-4R"i$WnVef#i_)F(+H`=MkSMb8RHr_etb[!K1d2@b\-N/hF^I9X"QA:]mS.3)*HSQ^GQ?2K4W`guAJQD#cNFJ?'T+dhBN.-?,F`%>j$E>$!8k]<ic?qeq#]J^&U&KJR*,#>8PrD#<puEI]`]Y2uI81JBpsJG8p>6"oe6^%Q6QnC*4=PTNTt[+=JQBN"(C!JcPTh8/i[J%2%Zk/7^FR0dS,`^)^N`5$1pLr2aAR&+IS4(ZR.q89orHr,hK/D,nT):`464a>mKn;ecgl@#pO;?ke!JhI*`$9TG)(5)]JB]6\)<n%6"eiC4'^,U53S.=cm^j!/WE6+e:`MYK`fg/jT?b/7218=JuM$r24@6I:oUKl>G8d29:^c?X"#tClE3D;0@XC$e7,As*3%+XRorXa%Th`LT-kOW9Nn%f6"]q$_%b4faW]F+&JQ-lmniWoF;"6PDq4[YkU^BL9M#U;cRO&8B6YaQNe;C1@X&:mNG/Sm7A3_54W_$0SN`;=C%/hO%X;/,#S'\?q'EC@$GEi`G=lHuW]V5R)jWDQNjH;^r@Ap'nm7K$sm*K+):s.T'D99NZlWH.<&m@rUB9'(ur2ioL+Q*;VN0re\Q%Waf#LQ;l#*QLQ%HP:!;B<7%S<lV^HPU97+"NTrQd.N=Y]-P\S?DF^^F<8a'Aii'le+6o_88M4O@lL_[;lSSj3*"2b$\dF[`elJGn%.^&DqP$2YZ$"t`1b`%o!9=0_Ract3Tm8^iJCmR@PHg;G(>&#jPY;b><X4R?S?6d.L[D[]U9P^03b&X%G.1;][e8hfmeiL+jV8RCe%/GS.dlP33sGtBZ8p9J<_]Nk<ob*V2;B.\T+ng>8>YCEsEaT>U=ONe!F#Ye/g@>$pId!F.gIHcimCQXnsU`Si4ng^D9RD$c4<MlrT%IZ9MtJ!C2=Cg^fXK,kAR=,*q7Kp=Bob[G&o/!F'Q`QB_9_mfgWX))9W*@q"h=ie`T<`ZN3PM&i7[^*9+_<u-^D6tq)WbP,n#D$DF%[%!?BXDDN`4d5iG/8/T^.k=fVdE7VQ[^<E=94UjLP?JjSd]A1QSeMdDXHdWSX_Y5GQ%c>VCh70.452>Y;k&b`ASs#N>FF9hkZ2<)%1;&n:Xc.0P^I=@QDe4K$9@=)IB"0V7PprkpEAGS0>F_Vt%)TQHhTY?-cB[rsRctfGN,OUVm<P2W.,Lm2\#LjKMUR6Jj*nairQl$u%7JaX_=)9r(au8V7^/2RkDT)c-+*dsTs,R,FJ%gVDIm`82b'*Sdq<N6%^6%a&TA]_nA)2igic+!br**\gf_fskc[.\C-_dgs6.ph(%/9q.Ig"cY-/(=OSW<(gG'+V;iFu2ntN4R,c6mp0YTNMila)-[9N`!'E1NQcpX6Wa_=?kK#k[ZZ*j)J99PoqfQCe/ZRm6Sm6>7qZ8%5oSF<ki>m!Uu=6"H<=o10#ZtZik_nPGiTYBo`U<eqL@D2H_n-@qp)tEjWEUWdc/l)qcE+R[f:cT]_9'^f.O7kf(Q<9*cB`f7?g$$%"EF<5#oSe"&p?l%3CoJ<.0D!O`ttR0'kVbu.^-[qnGa+d^aK>(.#rYVgG[DS!jQrMauZCcOF!aS_je>\GiQ*:\FWV>5D8k8PR[T5%GV7QRMXik(mf`X=]do\L?8*C7TYDN8?rDX?UlA_E/"+KjQp-mo*6j_KQgeatRLG8A3?hkJ?\<=;H8le07(RVqK,E#!W/V&&5X60T%&/P$q!)1@'JE*HA_a&nuGtnDf,7,%_N-8&D:.B)@-le<B-mj`n,uS]>A!D^E!ZNkMN//[AL'e$WTS^Pf58(b2S,mT!6$O)?EKE:1%#*UbI'E3q%R)PkIKsXVL-Za!nm[:?\-L_`PkU)E4`,u&WOi12:nP!E6/.dA$$X+5]`<IJF:)Z75#n`9+]L?3`U+h9&(PO>QV*mnV%rdBdQqg8,^q*mbiN<-jQX;&K.PEJ!MhNG"B!R\=QUcO?iN5BKu$Q&sq"b945dnJs>$3.eSeppX!TEaLSSm]U$9G,8!NM.=:C0X^=%K;>H7K<gpWkQk&G_?q-u'M)IA'\j#*2c>lr>jK=uR](6$';J\ZC.,54QW-Pr!0T&C)n+?:!tm#-@6an=KEu<QFU!(6#.W`JUgB/#%)!.PMVlBqG75mUN]97j)8Q09'*39kA&6WfoNb#(1P):oRU`kd/!&#36$%6jkEDlP'#dY"K+ZUd-7XVP"-itdH[MXO:5cAqC,bP6[%(%-SSE$f/>Ls&iKeej,!7Of=M:5bfS%cS)c[29rc.O(R,M^f#ZLl!-e&<eN@Boig\>^RDV5R4,<Bm>;M-7$o.8D^$0;39^-N@3*j%:jEWo9B!)h4Hc^?+u5hgLbQgk0+M`Z!D#R\9Ni;?5b1mQ>Y0W*Pf1)B&VVtaLJ]c"WnJb/cYF5EEu1@MW097"n];:$34=Q<O&YNO%%eK]s1CTL]bSZjXjZL2%X5<t[I?"72h\Z=(5"FM8ebr_NIJe!WIHR>qqXAcUn_\Q"p[EDBI/NF*fjheQ>6:-0\o)W%XoE<oR)8W\%?KYDA[hmlo^$9*nf=$5cqC2F-s,Em(5$`P^h`Le;ea5M,.^,PbH%-_#qH"'kIHlaX]o7F7XZPf;OS!"3r@b"mIHS=MJ2"I'o:,GB%&^#(=Q2`CAB@ep9f-l.g0ZSXSs'?m(*5?1U.4tRQPV@,,;$d3ff%FoP#icG$ec/?q^A_2B;9,j>@?*hLc=Jp/Io_d3F*tLSCLN;@%pH0"lU?qZ9b6>]P?NeOO+/H:<lX0\2]CCAQ%!oD7kPs:Z1"G$'jg@nOenr\>(L#Yp[-BO9TOJ+s2%5tTp@[NI&RD)WreL#ab_kWh%6h1$)ogSn\#[5aJ5Dp8t?a\A)60G>uLJ;m"rN!+oI#;;ips+A6l*uajaO:#m"M);I/%0r,p\$\0h=J(Vh><9%s0,/pVa7h.pKJGA%%S[:#0HhEW(DM?I_G66=0mVR,2N735\(thDs([l2gAgT-)].-)f%K``Fe<nT&>6>4%XQ32\+4G&rpm=:fe2`9*jA[U,t7#;HN1X!%gJpBfQY#6OF`F*f;'=]&H8c-YHOlZrU0$[SRcM7oWP!JcY%WJI[`]VNrD*/eX4M96YQ(MkG[DZ46n)L;3`r4]5/ZqP=XFq"pPnR5%h!_]>HOh]1^%9"^QegtcE_d3\7/F=&rNf8"HVluI)GB`CF0GMc5%PD)j]*>Tos3=a"rc4)b<A.,qj*H%dtduXZtfepTm\cuMdPAL%0<QDcb$k84pB]NNE>I);[_%D[qrQ2<cWJ,Tqp,"3kHPO?G*j'T7kgteK^[X./'S\^f-:>/nYV,Un_pbQ!(5n`'*0L05I;I3khc!g%j)$<SM]p6X1i`TbmIbn>g]u4Wf!EusG&DO<0JY\]hd/O_18*t,Dch`eJ:l_j&UBDNdZl5`rma4$_r@5pDHlkuamD1[aoa/Sc<ou,%"3+$B`=F4VmrU5:(P=32]_9(gO$,CqoXjRF_j.Fo,o3&Cb^_.^8nJro5DOZ]fZ:ca,Z]n\odNA3ACh@!#lE"<&6Z[VoV-Z*S>\&t%U"55<[Au#s7sS/.k*/><'W@BYO)<E?]*JHRCuS)c[3o<:&jUk9/7X'sB^G,aiu^]bFXrEAl96\DlE-3<,Oc?P%cL(,f66pmBR['H%4EN+*ph>891-q*cG-^Rb<-&KYGE.(qApSWuW/Hfp<9Ml:?@-@pX$em<WI\ArhokHZ]5q#`B_SY_n)Lu3[A0Pq);1->4*H'YhmNpb%C\>uUqff/tr3!%q2o-X$CPMdtCGn_PgMZ*_ComOUkFHtX[m!tK3='+jXmjUiNA%2JpS-+#U8SJD2g5*&C@/%Mr?&<\13uOJ)BC>^%?0&)RQ!F<a5(?"ERIjh!o@@cJ`u<\#YC%=:k7>&bJ&eC6Yg<,n09=GQ:ESq/2Z'fMK2oL"4Ue4jouhpbiUZE6![]rFS/4P=p$h`4%=2eQ#'nm,d-DrAuGQ57XAIHhBe!(hq]kIF4FWX[[l!OQ>6W#l4G&kN#G'O(qH@>go1Se56P--l_;D^kh>2<N1WeD:?;QSZ^J)tCj%GisMYV."ea6e$=mGB@nG1V;PP\i7;^e-.mKW!i6W5[C%,'^@N3r,po#>hnHl:Y"X%ql=e1V`D"dn*u?JgJ$XX*mj#Pp2)]Md,XI2%%=fEVl;d9,Qb[BdjhM:qcr,Q<VO,VmfFN/7qu!^:%32M#+#&0WrH_PIMfuS#6RD*Km\A0Y&$Tb7UlH5Zje_>^s*gobHim$;9a\SF%aj!jiIVCquP<C_ud=*"F8nmT/p/?uLIS\T?F/S@eSEHgpfqFb=OKudC@j0/EnQrp1d_4l<L@64if<<6lo:/f^IE5XPPu!0-G&?'m%F"er=QeII?p>roBrNpfOfrpW)\'MhrC\>O;rjK?:q8;'uV=Iu*#(b_2LMk$s9Tsng!u;X<-@'r&Nh`,so=Md//?c9fVgm7bnrcJb%@T)1OgtoK9M\5PF#DV^?DfN,&Tqi^M';U\H]r>5W-95?R/s+_ppOtnX\/7-$>%$/@<UkV:0T6OH%o#YXN+$>/>S/L)$Sm&tIAA"C%HOG&A+W\JV;@ION,CANn*F6WL`Wl/iUWZe&.Y_8F_,uHWS/ofbRGN<.V\nD)BDY>8[t1T)RDWFbX`njb!'\\VNhg*m0'q9I?5k9[%k4_7EC\?Fr,_+Q/_iG^)#l]2_UTh0XT&,7_W3ec7%R2JG@=,?bWO/p;gYVXp3fJE:KlQ_-YFPHKrVFFX=5r6(rYt[rX'k88n*km.%oe#)"inf*/Z21f[nNL1:,4aI=BtMs`^1uJBhB)VZX8[M@EFWM?hY@*J[;k9Zk:RepV>5FSle?XDfnO_>bg_qBg-+cDa5toCB5:sn%q4267ppg=YH@=/Depdjm2d:?q?FK.6`5sP.e6IIuah=-GGW>ISZZ>_cCM*CT1-`*cHLZ,i`GFtg/8k+\(Ml(1=M)DnnuJ)fo/+Wj%hg4t"o\om:IX=R-[m!gV\"@SG93`r^4m*@R[f8&."n:jRc2.Ta0fXGVRKkkk&rdDFADM1;9-7d>+.$>Oc9/L]B($`NlYft!T?mIf%5<!N>h30lE^>%ssTD-'A^H^WQ+P,oX71$#b'P:4kDAqF!j/_"$e4ID^<jsh3Fj8fZ1Kfp5FapJEIth+ce'b&\X%RMh&%B/bPP4-f%\CIZP[pFLTmZ/!Ei[f+RHg,eNq>#eiBp3]^J$(FgRt!0a1Mp%;'X(kS9^9ndnXogg,U]MJC7fkec%G<%<(pqo&*rg/Y2=Y"STJqU%Z^[>Hj@)hUn93E4QUTiMm^I9//P`l65i0c=cdobX?\$bpcG5mO5Cq@_C%iAY'!#ahGal0_;NRc^7XWYQh=!jHT/%a!5BRGh0%[s3%9Cn9[J#j^(c^`KhqmF2#53[unV/C4"\X,MET(`>!+oWLt[C>Yj`5n=q\QW18[PuY_[?nT\^Nb2D_%^L<Y%l.Jqr9lS9:Jm;G<T%`%-?\M6*T).51$Qe/E,r:+E0,tCm,jLu:NtPpLT-JTIe8],aLh+eFf'2U->e.BB`a>a#s>iL>BmIu$2eUId]Lt[kKgI>!L%g?a[p]c%hg_Oq:KA8FR$QktVc*=':)h+D93(?8IItr8h4B&eG>HN_e4Dm[[^X+F@9qmAmSs0JXCP$$F]n)"rcq20FN=6_gMFTq8XgFFj^@t3%3tp6EGOE;nX@_a;8GibA-f&(!41I7up0:?rRSVpho]'L9F4-i&p?=rqV!l7be^r?Y8PAY/D.ED5)o#TM-1I7dK--MFrgl:*X_(9'%bn],?5F:K-aC>N]h]H1^XO"Xg8Y,LoO5n^58NZ=kMjJ.AQKE2@GN*7F\"6@Qk+OMVh#FmT2JKYtIW^Yt4gUFe6F.XoCKPW*d_*tr%m;L"PdX(Z8WX52;ARNps0,OZdBH4d<8RHWSP:j%_:0)&VS)@F/.Hk<4G5g+F=gaNaeIuFSXroob`qus/39f_dT)*p/ah@@p%jnFO%PN6R;ITPU+\1W]!Q%UVl\6()[A3F)!mDN"5HhjN<r[UaT2E7Zt5Pt"^CC;J;3tk?rZUf/[XF@ZW\@u;L=@j)!GNWPt7SWaUE-F69%?<Gk;<uniLJdJhdM`s#qG;JCXr>A`SK?kX3c<(m,&*ZmW,nQMH:-7cU(RX1;Fnder/a\`bd<P2TTq2eI!af8kh)CWKT+3@G0<`@_%Vq6+G;p!-g2T5%&Ngo]b9tZtklt8IuL_&\'T<b&[MZ)7'T-uVmr9K6m5FS(`H<LmcDr*'X4a"^%bb%N&1pOg>M!j;^8'_DteWr0U%S9_**-H44.qGnSAY.dYX.Ok(6=+#H0Ch16X?@6o8[B-9Qildkd4mV?Nnbr7+1T&g?o5C5qrqk;>f$cn^3.,UT4aePMh:!KoRc(I"%Y#0JQj(,gY=u:i'k.?SMB6-Q8l&TF'`Qn1:SWC*q1Yt=a)"2Cel\q_X9?,*BSYt^JSKIS2cX6=ZA5US;mEI15]mVQ+RL?;7\)L1B%Ah%#'?E'hoc"H`gB3s5/ItpgN@^Xa!T;!CZil/`S[F9K+e=Q6Wm$1AFQ)_WDm:r*U8^?F5A,a_VJ"bFUGjV'O^GJ^rl<bG_.OAmG%c!%Mq?E7)XG*\p&gX#\"KZ@!^7:r-t(8NH/[2f$'?UN)Ip<LE[&8Nq[+&Of-Jo^e^,$b(jF)0A\c^$hRAfEo5j8*(UiHAkYKpR.e%C)]H'-_f^tP<)e/kB%?#ik!3Fm?;$?D<dq'c&9!R8Yr&C0e&Kui9.JAp/i#1qrDD8UmnDNAC?C6:ZoSdV=h#>[H+.39-OG4p&CO0%h7S^ZG]kf&WP/<WS.tleUQRX:[/M<DR$GH%XoE>(PM.Bk1FE@shO03l9Cl!^KCtis.9c`f=d-;#-hZAH4HA*)EEo>7OYNiMKf6na%etaB$CKd06]:N56+TUSA`9HRiX.S8;H%CFelJ!mIU:mq3qC-8im^hqe:eYhtO5O_*I')W=8aB;Tg2KZp0Ps16Iq,Q")Ct[)f;Q"c%e4-/r7&B/2ni[KP8]1$03I1(-#JmHpnZac7,i1TRoC<,=ki\lV9G;g#d+$J;CW\8dfMcM`<NpbY#7XJlkst&!@PLg*N!1"YJ#sZL%n%HsO\f,+`Sf74mA*$udd>!'(<lZ?f^k9$3!Mbm_Y$JI$oCrD)o!R,q#>')9qb%,i.ub;:KBR$FK`aO`aWL+G?CDBR:Dc^=3YfEC%RGmq_+.j23(\@F_$A+iH/o:celZ`4#N.G%o9cAI$]u1],@>:sn#(Fmb$h.dX7]`,r<[M6u`^R00k/kM_3(s0)Aktb)U[4%;Gs1$r%aXIrIQC*2)&+R`kcUoRYHsl*%LY)`umm^8>B_)<ERunj<_>]8U=aDRn17`S9/,aj/BRc./LitOmRR4X+\"f?B[@Jq8b-=O#8n^)*%Fsf[pFY866?C)M.7=26/<1PA3:`7X9],Qd\;h\5-9:Xgf1dns"o6JclH3e^#-'_LlVf1uc:"\a9AZDpKi'9jLPa?4'S7_6<U>8%=%,L4],XSe9(:>S,!9e][sb;UIHV!cJ)U\pI8jfXG+V!ZBkPc$X)$Xi;6>L?Vg0gc>WRca@blAe=m@la&aJZcl:+8*>i__A4s@tUm_%(C?lc>g&OSM-m[5=#tgK7.\=:1b1+q8aJYD960':-!'U//R?sD<BYl_EA)*3;ANbV51aBTf69$M<Kl08hWdRY1$F(kBsaH_Ce_`l%\d;t8mZ!e,7Ypa.CiLlH?#5t[0>ZCbO>Jfh,F"O2T]S$(b&HV9f8j`sT]jXa>f1$RnG8suF@<A8/!qHFBX^_IM_[Zllns3qhsI0n%3@c#UVSV72b'8Q<TmeTk3M%/.ica.2'`5;Ppgn1S6_-./?kh5P3)'A&T?qSC/6nW&X2dF[e^,_qn`<fK.p/5^E$`pkkUeo*fdc4<%,V91cb3JNAlr9d$$dV(]Ed;K:;-qD@NqMK/c>Fdq)/)BWQiVGh]7$Z%'[Z!L1/'&cCl0cKL+.fn+R/khJl:B>aTP"IJ^AlaK-k2-%5U,ML#YMh`-U#B?5Ns+ds&BT+13:3'o?$+!A3@tihcQ-dL#Hiuk4^cIJQ=!S6B[]Y,H,%"n(eK\C6T@r,>1:ND\"Wcnj&(Y8H;_>%DCQ!$4.uY[r;@fHi:hCl"]-*M8M\'TQPW-=fVp"8r<5/hLold">-d7R>l/iPhD_$+IlA&9adfEZRHgfV5a(Jh??pPp?Yt8h1GQ-[%W;r7s76H?-R0&tc<t5in0&i-^&\iZC76K$j.h,78&RD]6XO#1P'MA^G([dQ4Dfbih;4NNqL'eS&O,sb\aT?4s6;c5f2?2K:lh/ZA%]4(\X??jA6')W=J^G71PO_$\hKisEs"V<0.Vla!QG7q@Wk]*6H`nO#-LP]d<0aZkKMtJB++;kc\\%2$t1fY*D1mI-d`q8Ti]mdhc%[U('$(C2@"S'n"C4RC"Gl#CD2qTtU*K*Gp*FX,[5>/KMD&`!XIjlKnu^(HB\g<1e!RQ_B,5q@Y>,WEIh4tk1DE;KFORJ>&d*^]IA%Tib[)!n\CCm0:[1.R]ZB7[H`74Bn-GIABVcX37/2+^9*jAtE34O(&hOf:[8k5e)0N$[]OYFukcJn`@d'2tu`0hsGLg5%UtgiiQo^%Q0'G04qnp1OA=*_<Eur.`CW$Q>lCL3P=giTAN=TA52RGjS<_Kq8Y.6MEE5SfrFbJDEi;SRl_<$'`R<2-]m4u:ShRB3Q;ecVj)Hd*%nEm)Pd-j<BEXmNGchK?jKBmRJe1>\S'eqrE1`A>+cB@2JpYd[M\mE16/"k9"6]ID>/k%VN;5^?^)]jRN_'[]Gg961GVP)=_2qA[R%*tRAOcpRsu2OOFsN^go`+rV_M/iMuSQ(lW9T=rBeehZ(X[B%UD9BMsj>9Fil`[+j73u!Pl*Nl5B.?s$bU4OH4Z[pag[ME#%i<QSE%Gd*a=KHf"BE6IVC./tDK;oto-n&&NX>P6Zg@I?MFfkXGBF7N/CQS&^\B3_huX_CJ*5c[,SBs1"JEouB/T&J^gk>92C,WJQHe>%CG%<'t@C/=8Yf],S1j2j]_T@;C$FimYi?et_YfT8R;'j`u7;@ne>>,rlhIS!JL&m8)GBQkG%rB/F+A8Bdp_0%QJ>2hbNG7S01RNB>E"%15P!N@ObIt$%IHkh%1B=2)h*hqJNgW\<>JRYq=]=LuuMhfF7kCYPgee;dgRK@%Vn2Llc10UbPc%!h"3-#-J#>g.s"qNItfbG$OVT%Om^\9+\Oc60A.%\VrM%!8fk*pOJS8:R#c;Uf8:ep<bESK$?F(8E)GCGYq_Zsj-/$3`\`c;0uCA`aLO>qakN2?A?L?:_0%W!*?EB?%YB3gE<Dn7?EO'G$YX2Peb1TM%;O@ZX()'bFAtKiq-`<OF%'8O:jP/mdG_WGpp%"8aUE#C&;Acm-5\11T$g4OEqjCQ%Sj#gA/8,LB%a&kN1D;H>A:?C)/R_b1H5FMh\p)7X&FSQYn8ZQdb)S0T&csR#_q"9B`C?Y4=ki?IN'Pck&/*Jag"\5_h>L'@De('$`f$Iu%8elHA%[[aFR0#)ujX;7>-L+[gNXJ!b<(*'T60#)uj^A?mAd,e?UkrQNbCZt=>kZ!4Gnf#+;$G+;=o&<J9nnUB?fd4sWUH5'4*;I4FJ+Ae/%$A5.,"'M3T=?D5Z"61Q%XH_1iSX^G:s&tK<^Vf<#*U2BaR$eGTiZY2+4Jeco8o4-PH"JddMne&1?A97hf."p>Bg^kYP0]YPn]Ro$%dl'l._b?_XeeFp41g'R@4Nn[8oLt@$8$6mr'\>3r9'-?KP_q3^O2a_i+;r_;NGfmo*U]%f5oMLl>ThI!+DgtNOmg\`MSuOq[;U-(%h6?7U]$,iG@^fgg+@D%BZJrjB,J@4G<qsHV&RpXI]f$3CK+'n^!4&DrJqT^a+\*e==M1(Gf;DJ(Ir)>W4i<]@8Ji%r?u[*W(Y$Q>%k%"B/'J;+Wc(<4H;DYQb'UcspYF/b5M!&4lq">PY1e/(H`@)K4*29RI&eC1B,%2Anb_ZBK<Yq5c4'ScrChOQNhk+?uhiGhU*GLa!%^1"J%ZY7]8##ZuWIc4j"ZO!FY.30p5bKGJ:n0t2%1V5P[=:Y6WFaVm$o:kOef'sc_:-=mbWfe2KA`#.)=S@Ss@OPM>O>GONHCN;1%Ak\7pa__!6-tZ1CZ$>2.I3LG4l?'QobZ9dmN?J*9#56X;U0SQ.U"+0deP?@'(oD8JC`<O-+"t)MG4r;>e:0V\]%M8PW1nV:1k1&(%n0)-2i`QCE/"K*@gl[BBcOO6S`5tR(rh>C@bS%CYi]<;@aaF(Ba>(=ap0"@cjoHZ:NtMmm>*1PSo(?J*S$4-^n%HpD#]=6$-c>(,%;V5H;o!i?b:W-P`Y)"PChC2inrSF-+`$:P=%_'K9d4$Z[P@2heHm(P1(>d/l>\2I*AOdYZ5T5I"6p/3#I&T@L,pJO[@5h(P-3p@*%Fg!fIMFV2`p6-(+/4gbG"^NZ'F8*+.6tTPeRe:3>n]A]])&4*?41.Jj]=1_[+9L'Z`R+buM)4\6\!'<mE6T%.RE3Lk87cI%%`&ej%RFM*3\'p/S@!*N/U:D/t_b87:3X(C^Ed$NRZ+Mu./3iL^f:dp39bG>q@sM_XmtSM^s#<4o;l-Ff@D+ksZ:d\\o:lG2G/jGt=H&FE%\YX#)Nt%m;,kmX7F`jI.2f.tg9\.`gTa#O$P&N0op>A]^&sBf,\7MDE/is>"<-i]"NFK,j,8ZLjWR*PV)2`9Qa88g2?Jj+U\C)cc%F^s%@V4>69@+296)`pE0UjBP@%+QfX_bFI">,34BE4+Ulol(L+(9*+ZG!0(UkNZI!;N2AF9\.*M]qgc`2%%sQPu9-lP3Xl;4e1YF%>m#TlE?j)Q%6=*@er*88X5N];MK?.2XDgo[$oXoO2F0V(/a2g[>2WfA-TWJOI-h_2Z-'7M3\6d-3II>`T=)a)iK`HAh</d_8iPa"%X5l;]o38#iSjb72)o)X"#nfQQUXlW?-,m+YXd2bu@`]Fj$rR?U=e0&'<XgLsTK%FpeDu<JKd8&3ZSKW@X3pjae29rlC`(tHa-+8Q%Hjs2<1RT*N-mXJ0I(Mb+;ok<Ns43/LVmpH5C"OpFF#<BCR:0Hlb0+Z&r":_8WY[2N;Wg*j=G-5p[<uC>4na/i'rdh'=-<?)3YeXO%r_0.4eX0X58jt4g1PL]c*+^$'WAr0[.T3O#Xk79Ze#V*[$PrTjBr@]C1R=25GhO0/m_^q7KNVY>0.)EB9B"mB=D"tdKV`YXkU>#c%r=c#H\_ht1=t*^MPJi;NiM(e_?m<_"9&Uu#N:`P7d7W@i7D;kZ?7B-t0U1F0VJ1;+bONnJp`dB)O\_,^'V;D/mO%`U`.?CHJlu)5%fUr*%T1JaEA)eF-A/q[X^g/I$_jhu:1-F^XJgt1J4MXPaRTA:sGu:!5j_T2[RmZ>iZiI&C\%YA5X/!o_>4Z'chtBU/07%.'ihn.F%hAEsk"8:12bc8F(3qI1N\M:Egs7CSKjlj`K?5e8HoB]l&`S^Bn?YsCtkL;dNl1i8nmHA-E-42N#[D\!Z(3>Ahp=;Wr`a!XUGB*<l%Sog\CTZ2oG(=/S"]#gm4>PaY0?/1LkpqE@KG,r1r1+%/,@V&EY@^dGi'm?'&:)^9W(\2246r08Q`QGa%mD[<DG`>^t"RP0<:Q\3^%`GX"?&)V"nl<HK!oD.',<e[)mEfsMjFt#0o(!Z2OfbJ]%2etorfbJ\4S4PZYHKM$ZhW<M&`2(cf]:!SYmU6l^=7S'$I[XA;'\?>F%^&3jkhgbZNOl)B!I@+ddkr8Luj\.cM18ALVnan/37?0><(nrRknF"G.@QVj7QJ1hmgOoaBp[g)+-6J;HWp&Z6FYjVs@AcNCUqf,o%Dt6-C>Qc<p;dOZ/V.,kMaU*$kVKJ)->')4bVS"'2aVA'lL"XjoY&`r!)g^O8,-Pq%9B;ghM@C<n.goT+<uA^I#E_s!".r-.cbV9&%*hE\$MN6g"2)L`,!(^!l%_Fs.31Y6[DeU?YRjHP4?,rn@97norOZK=R\dXHj\XG.q)U6!SF51NA1t2`DW\JKN?!8gck'?(@eT<$9%5)roC(Ki(*D4W"fSR,$Wk'TQVGtQV/6aNG`;GELc,>Ye;Y"7&gnnPbC=uqM`<3,8(EdOZc9fL-W(RqsXiaZ!;V<oB$]*_K;VFsji%WMcI(<R\oPU0>-!FEC.*FD8.)Wg[FdeT>Nk(Q\2`UREg;Q7hLS^[\Ah`]i?%WLBtTIH;0Cl-a>2-E#LX]5pH:=Q+#+FG`f)RP*tE%7;;a8<n!lS:n"#"2-lYeLXFL`<R[epdcGk5,&;uXeT>L-`&5aqWp.rHl&p6S:0pY]<_F6mrM`cFV3TqKI"`o2*2>NEM(]jg&K8EQ%/ccSHJ>6,?`Z;kfhE^VV@Qi8[LhGKX/>UJ#VD>Kt.+Po]*d1UrK)F<2S^D:sWRf$VpXQ*G:fd5FK]2[UjjgG$cGd5Ih-*sK:05R)%HcR"GZ;DQi%rDHFS:&K]=4J#h8S*,,?U@t]:>*LSqN\B,3XrcN2AN#R%0Jl+A#RWHf0ubg_9H0I%rpu@_BTuC5:R9MbIltTUhm!7%YIR<*Ii5o_DPVZu(i"0;h'B7`in)tbWdu<0h+\H>;:jStS=a'MR_)Ik$H#H=\\hX>L0et'n7/o[fA%Z4\PO($aOf4,n6J$+(Zr_J%L<0A"1UT9%LRghE;-'f4JV*UgO&N"=fdW/D0s'SY7R!@of,E8R84IZ7GTkn].JOE8K6u^)KGe*]<pV"=UlIC2oVraEU7u=@cr%fp%l,MWE@[9p(FddX,fr0U1Ftts<FuGSlq59Je-*.%nbu;[*a,,K\'CYONfX3SC@%:)0C=B2T@%<)BG#b:Gb252Q,`[?$ABm>pdj_@E%cN7ScMZ\[@^Y;-$P)>TSrGIO&op*EH4<3]jVD??-Bd,?SDu[N_.ALeAEr<Z'A.J:[i/oY#NEjPd=oIu)ddJYn6.Y[G0Kblf%>KXJ%INTaVqa[360<1>iY,)jgN-`MUN\bu)_r)OHEh$jnF"SiTSiuL$3EL"8E`GcM`=N.ta8[4@KGSI.5r"&$8aD5s-J$C&mRAboatW!'%3@%&4E/Yb(1@M?B474HN3pDC2aX\Hkgi-?YVS%cOM>3s\M8_1CL:\%9arBr,]9HN3@X$Ue1fu",<*)l:)t!q!H_!d'KhPANQXP8)%#0,J\P4[,F)>;l`*3;sgCp'2DEIJbKT%J/dC:@,W01N*l*4<"Oa81tZ9O:iu3T4.Shig$ISDkWib1;lNF2&)A=qMEsGqtdm1Kf-Q%8nq'pk$8thDdWafn?eZh?TCFj'30^F>/V[8Q<=fCQ6![Ya_d@Y]./mp=<JIhiOUH`Pm&f!3Zbtj.FYI_m2#O.?%*C7qI2n]ZW[2)%BJlpm;Jm(FjEonjCL#0i:0_@7Y$kE^?K53P^3Il]Os0SIV;D)-=e8n=a[iT-Uc#;/=RN)d@Q)H7)V;=Pkgqt0;f(7YjPWY%<YAC7%A(8#[jDK7"Wol]6($(2Cc%.,/U&;WFhVG*T7r,?`lZUPP'.VFW)k:;QhZ<_$1UDI8H&H6^2-J[8Z$(aI&Kgg_!^-<2<gqV,)=u[_%I)bV`Rl/fMN,.inT9eUqbOE*(5:`d3hM>N[pVOSe^2YcF[iVVDX@hhP?L?Wg,BHc1r:PM'F4/M7;rd90Guj=i7G^1Dec!Rbn^=f$%gf6F6%u4%#,Oh`u:[U'BM0c\.llnP7n&t&:k@!tPJ]OkiF6B-B\hehH(#aSeX,$#o0fqBmqmX-,o-e\.L%_6bPuWK=adf^p&(Br!%AE)>1*PRuaS93o<pXOoKR^N<i?N*F;:mtakICZj<cu\Hlj5'[\IdZ!`+-#:kM10Q8&F8Rc&`:toM01o;2A/J,7q<D(#.Dh>@lL*A%U?=2g<gO[ONa&P5Va4\UBk`dkh.!h%d*)bMV++"IA_R&hl_C:WAV1-JDYuSRj&TAAo=r:Dr+;7@J^g^DE,NPQqcY'n[47A8E?f\%%WjHE,cIJjnBg_;M)!%U%Tk(58#9+g^.i5tMqd$M6#P1RC7`s-\O><jrT+=Xd0+(UZno["aniT"=<EIf^B#hpAe^C,%qU$-/`ghHi%8n/4#UHMaOhYf9[2,`Jh;8+\H?Rk=@2l:W<F0[iE8klD>/Np6o;LAnR!67.+Nb@0U(#YmMAZPo+I^!l9GI/2q7f6e,Fr[BARAX%=%55#PoqR1hkK4d8Yk+?'jg`dZ6eXW4lHtLXcK2a=JlA[O7EBeW3nh"Mt<mJbT$\[jZ0pN^X!B!RK>+&oOEU6Znc-U?$rQ<f,f<Pjn%gZ4?1`C^/dI-4n5)QU2A^2oBa;qu0jU_0a!(eF19B3l`(mDq;aJ8p!%?7DeZPV+kLhKi,1Pd?i[VN^L#7MorDF]WZ5\Kg8G2Y7cU%6?(npi*aHJ^*o-JC3b[I2XKLF,`3&E:M1B!jV4L"PRD,-LY4P8YnO1C4JF#WJGM>Q@oWOFXT9DNN=Vui$ji,)"#rn8H2JWS1ae>a%"W2k8VZq,0(:,Q\9QHo"Xq_tX$8AatjOO;@<7tfFA!.f(Uuic2$8;XWe?Yca+1XoW@#AN9R"c@0@u8'TJ)F5=n4'j9nl!37.,=GI%ji`V":%_Du;IQCVUm<^d4;g7Qr$O,YMr0ln:L2+Ei*0qp\<Lo&%fDPDjcfF?f)$+caqk;^SLV<F-biOJ$nDe4\^rLlb:W4#W'^7T%%Bni]`k?i$P&#C$L.]54Do?JH1%4eY^X[8(DaUAVl^*Z/H44uhHi6j/Be&"pMVdZcT4Ti8F1C/AIegNP&T'PU]mdKrqp%%d(W1Uu%L;fC73r&OFqW6lr`H&)]j59/=7kK"KgDFqRe9h/bq(qD]L2lYS9<5Xn6AB77?GCm(c)\%<b2j_V-?3e^8"$j_%DTZ`fY)b0;HLL\%D3F2c&pFeDIBQur>iBQZ5rD0u[*Zcs"n(D$>RR'OX5B00iu:no=nk1p+ntipO$Y]K'Ar*l#:WfHQ`_o1^Xl7S:?ns1a_q`MH`pe*%H&@K?9n'9QAFE,6-*PLfp\O"/lGjW,PMYUAQ:e!AmUK4m%Db'LN_$W28&*Y/s&Ql`aM,==YK1GNjS/N4NtU<i2gO4Hp8re=ho@\$%jkRsmNkp)@`ij^p^W`5INUG3[*qF7BbP#:4]@UulWjEuEqW44<\mf?iHi;rC-,%8PXRXeerC499a19eTA!Eb6`85;%?GHD8$J`Z\%NYj*4OZYNI!`l[q,l:WWZ+d0#Ej+A@m]Cqj-R61@(7FpnNEh`,Xm:li\,'Z9erP-\?bXcAoW([in+A2Q+('R[g`lLVAOWpp]oR*E%#j/pNHkV"Y.cj\q1[admJ$35%WD\:cViQ/-?[c7<,OgoRl^(ZDPd63AGctHUab8E?nsuhdme+bIgIkJVf.[.\1IA@'me)L?jM7mH%H%'=Zi_$o9Dqs]qdI-\N2[kt<2#4h6H%t9\%s*&pENe9#gfs`QB/,*erUNa#Ubt>iHi7sqbcn[%.eieQb.Z=YI[2hi]ma+HcE&\.%N-DI42Fs4$T6]2[ka0#l#L42u>9Zil%^Oe+L4$p=r&S(i987V`/Lep6*(;l(<oSP%Cb`q*%uD,=/C%QRoEXFBnoOUj8d&9DTM(q]%ZhH>O-P&\MS[N=im]0.8Dq=b<hJO20kC%F1eSJN7_.kI$jZ1t/F_BjO/O,fB:sdG'O0,INb0/Z]bKjPo$'np\s)bPoE.-1INQ1EE%dJ1Dd/t+jDl_<(ChA)M%K2o1grVfd_hYk#"+)]h7@fMu6LkG*\,B;AJqB_.i+/SPla3.!CH1biJHs&I7'&V#I5DUCGNdlo7:KCj#%[#Ps@cZb9h]A7@7XkWa(H/<s+mZ4r?VuC.D_0_%D_5BItFtTk&?Yk/CH6<'2F7fFSjik'/o>c2Rr9(Osp!)smDn^XGFYc6D)m$_[%S@^qVhmS08+3o<Wf3^Z#;S\^@Pm@3b:UqaNltrMCE%ir:ZnJ(hYEPtPBO,dI>65MP*Yt".cE(&Bm)Tp'FH>@+21o#s2NZthO8/P1%a&9DDIW[Xa;k1g53aR8D/\D\?l:t>9J"==hRigMEp#^_5B3;c,6hA"fdo_(`^],e7R\qrDPPA!3NkA;9c(A,8csB:7;^ah7pDRVM%`Odh\)F5t1I5E6h24i)E]m+JAXKF,p@E!)3k"4B9Rorm?o*3t+c7FI8I:&G`_V=h[kk30bL355Wo'Ua<k1Q@e^pWjU-_=AjB:@#B%2kLr5C<#l!F_f5eXA7Y8hjs#S`G%6SG<Yr5s'Vp5?G;$KNrDkF?``)-<oi#dPMiSs`+!:PreX6eOad2`IKo7W/ZJPp/c8bk5F:W\%ou0r/F-Za[[:oWf!r^.7c(=uKEONj+?"^XUZ1Ie_GL-EiJ,k#Z/VO_0(qb1**-onW;L?LrC9-:qZhieQ[=!M2]\6["++`g%\\[`^%0_Bu>Y[I(3@Vt_uZ`l#Bo4DhcnfT^Zk&s2]Pq10g/,Qa`j30*Chg<*[iR'#?rb9&0S:Np!hLoC28eVfjROd%P);*U/WmiAo#^t'r%]0<0g&$W9b+4`-O]H[*m5>Rs2:_*@r/^E),=)73Zrf%)"*ru-"?HhBWAXK-2-e;%96c/c^=an6)]3eV)CTSCKf.ZS/%\#*ip?r87%F#iCFn].TgRW`(NmKTaOF,!Bt>+.)u/8J?Jm*],<A)M8`h^l,FlJ!+s9dS_ACbR4YR*5/fq8_XWf(QP_FF-&MR[:)[SQ`HK67^2l%B-10:==ZXEmiMHj>a$?3^E!^BCj144If!k.lZ_a_L\WFP2IY.]>*f(\7ho\JX@5'2i2<LTd.02K!dK:2]u;(s62%,r=S_RX+^G*o%n'>9dMPr+i5637&d.kt:-=mcIg\katH`ZAC`UB.oHUSquLTk*7DR>k194)m>lmjL0Ms@%]G4,W6S@>)PF;qQ%Aps@<1._&\'j_?6%I4uJ1X]@aZjB26+n7,&Ea\Hn/4ZEM3JXI&%Jp@H/em:`h^*50F(Y;fMf-M>n7cVPc$Z:<t,'du7D2M,=TV5MF.#@?*Z^^7Im![>b%H)QSrgD:kbW"6]:<_EZi_#Sf^Fl`F2\SCXJ?>67/"WK)]X-X?*\u0(O-Q/].#"la[OljUQbPfG7\<t%7GIoNST>k^bBoK^W;%AiW%DUo<Cm*G`rD0Wb_4!*DE^]9F.H[fGpo,lNEbtl*ADe%H@Z?><kaW2</]u/J-&<L\pPJ-/k:8aL"^tSc+%^=9'$Br"+1dM<iiG5#;%QqMX'%lnaZf_f_<OJeGDXnCip[GB%Zj8(dZNMGMc>cWc"h3%F4B@ur#ItGWW]6Lgh$?3PT^(GpCTR<uNq"j;n`-@Q6eZ,fAe9h)h%UBl)PF"eQiE/\2M.dQ(>ragmS?5IhRM>(`KIHpLEF9Np&7X\HlX:R(,?L1*4e2+F`q[5%:j3KYb"JPW-1S#(posptd\._qEY@sfD%HM4a^SZscUDC"RZGsR8i:Cb31dYm:4T@c>23lVDG.CVL1R%Vu&K=WnCVPSu#.[^ZQ]ftY<U'm)c#4hN=M6-^ILE>H%FGTN!n'ZrH%S0_a_5kg+J6D9.LYMi1WK<.So90:]9.diEl9#)_h%<XDEi"4cZ]H8Hq+<*eEE/Rl+9o^'"0CM`h*t7t6kSHPkZODdPN+:?KRcVIg%IK)u:FW^(]KH&)9XhJHi<'M_E@NoXi0Tjt##C1T(O(k-Ef,J2]q*/>YWtVOiH2`jAkGA!-H2`jAk87'TRHOU+EA$:;;=j]-1!WG`%q0)CPN:V%*rm?^HOI*J&rf7oZLeH5[YD.r_V3]Bb[s.Hg=L^s=>I/7E?nZR;&3/U<$C\%eRr:H;\gGZ3`Q@#1_#kHl%&N[Ua3+__%e!'JRCArXNjD',5&'NLm<V_n'Pe/SV+s1qB<p`&2oEGT[f8SFm?U*Cpdrt@^I6(@a<YhhlKm@;[Up70;oMOt!QD8</b:*6L9(n70%+'uQ9c['4/L@C53C-QVp/l8%o.MI+#an?HnH,$0Bhl<rl4'NlGJ+Lo?)@l3qDV+bMY=bDT3u+[[42(t"\+](V[b^o/]tV.n0<^V3%Qe"('%HHsWU=8J;gB[+qpZnCAa1M%n^V!lZgXr]HDu3;CIGVMJQWIWT7Rj,DYpc/Coe#)"inf*/Z21f[nNL1:@PEPg]&1.`qL)EC%q<m:_`lc!brV:6haKNoq4>oh'p"J!+mulR+U9N'`Iu\kD[Jh]/]\/bNoWhKs,u.c8XEnUR/j(-O_78&3`bX^L<_b<^cE*DXrL(X,%*oMVZ-d&;aIR60JM/#6`N$]#9V.otPSZb3-^GO]c'(4KJbtlCJqqB#j$r=T?lWlV+br:9cS%Zi)2qF&Q?ZtmF!S5<K2R_D/1We@E%P:FndNTD)i5Ds[TK3.p*IAd[aWVmJM^tT2VNTqR\=3_+ln61;RXgunE8X<:Xi89J^Bi^EC7g*B"5rt"r:XGbA]@('If:$JQIE5R"%7$NZIY4QV"jS>*jOC8!-rEqMZ!(9(9OL'HC6lnM@0(h:qjM>I$&+6XiT1.KE(XKIQX@+.8g)'TO"_RjS)uRf:6Kt&CeL#/EmgUS+%>H^9MT-'h<T3X&oAO!>r0'?$CFYY>[_cF'f^A8J5SW@R77>K^`r:Mu5h2aDZq8Yi_X;0EA[SFGLh`$m&D,^lJX&0W1qTX*+nXlhj%Q-3eZHfr.elT<iWq]^&6V=L#C3%'1KPK8?TRS-l0(\o;QNE=7An`0&\:b&%8hNRZqpFlO-`r>"^lc,9L4b6]Q+oe"g++LqsrT3*q%V0=:K[QE#HH^\)$.og<75LrZKIU48Ll[4Glcb<ljm:V'\N6a8le%somoijOfXNjh_,F>;_Z.Dl6K%R8Vs3OnbI'121>@"i-mXYFY%@<\_07-.fQm'U.CZ!SV(FMhII[Lf4=f-(G_^/9Wb4=!pmkOn2u;eb"e/ms&"G[%3s07uqGa'MYJ@cQ2^r,[:S,:HbHH8WFQ)b7D)%>8;EIN3u7mBl&=#?bndsXgQA7cTrX,M`ctEqgbIp@bL8n@n#2QeC+5Qp:K%k(=F4dVNjNDU1D"OQ2SmmCE+/E'uDucH(CZ5>[Y:h%%n[SL3pB2[\>6j7(Kl!C%`Z8K&rR8mFrn_S*0?!NO\Ot0j+jBs.j#G=YDaq(<hn'1F+7gF][L6Skooa)_`Q1&/,%Q6*=%]fcf-qj%.Lrl_/eWqC$r3m+*6OhARBJfRLS:f#5ZW"Z14[b7hDE(_3>ksi9DR\kU>1s`Y$W2-,_rO.YH5L%4O%_5J%4mA]6=/3IbB&<il+\2%_6dMj^#+\:IPe@HIXKPq"tK,lLeM\s,FX#rHHE]]m8C2[P5Hko6Kj4&2Q@8<,X-Euj$+67,\9@O^*VeiX-$Ks%.Q.EM,65GFKQD*%Sp^A=)niqaBJNEJ8oR:oQBT0@K[I3/+HsIKDq'JsefaX'QGVk>=Q)ScY+HGZTerAtKJC)$)%>hh.hbB8J(6$L77deJQ9'[]ohQG,%@!ILs51jQ5'T9:@7QtSYbCrDJ1_fF%)]*;5koZG7ILe;u(lrWmd4'i\cl"TPWm.Y\3#0m+:S](K%SI5YDkf-2p7/VLf726E0c7oB%ou,LK:FA'B3U?U829E\@i$4hCcm4ZtV>loS0%]35jW?D&jmC2dn,?aZ4SipEJ'K<8>3#XA8M8WV_#ELjEnk"A^<:MJ"4I=lV0L>C%KEn@XN_<Bcd6n5:"cc5Q-VntpqL;h:SsSRop2ert^PKmX9(VZ$ZJY(75%"WY[+`7,^>Ef+h<pSfZMGs,+9(naZ=3T@drDTX@.Weh%Bi0%+)b];KqpPE,g.&PY^HV*nGOA\k^WYrqFSp%NE4]F_0<;gbd._g2&\o!Vcl4#X@C5855WgWTnco#9r3+PDr:fOirqZWp?,D)`%i4mO"+HW8JhseZjpuQ_QX>o<kQ0n.So%3?)I"=Y4.N+7RnV$:qD+@PFcZdQV-,UH4>M,6XZTR+t)m2IY[Tg"2hh)]F,(sf#92KV&%kYm-.S;QF\NdOX2)6R=$*UEq]^)Y7IYoT>FhNMHeH_+7-Kl'/G<tV<Ja^-g8=n,4:b4(?^THFfGO*XUHB>[*_GG(;?]hBKhX1/YI%0UuIbUK`D2%tf1_,tIMgHk0CCc]DH-2/!=j&O;gk0hn/J>8/h&\%qkR@;'Wd9]'A7SVj=kR>`i4Vku7q,[2FNmo^AqKB^eIKUtWr%_0\RFUZ-TM$GL0%kZ5L?kSBMN_07EHOY+![)rL7C/=+<%,NaLl)@70Y[5a%cp`?otbV"H8b77??.Mr1[XCtuk#\kYaL_(L34,h$$%)2_=hE#A_Ll%3c<_T#GiVBKVpMj>C\.(WNT@OSgT_Q"H9'eEt:+<Uq`T2l0SFG1]+^Lm[-XUVY:FTD=Z8Nd^kO:2hjgu<*qL2AQj%1N4gu*$&2c$6.9g"O"0IFA_@A>,k:`cL2@A>ZrY4*8b77K/P.g^oTB(VMekZ+3RQPL[PBl,!\p1PpniT=QUD>S*1J=?\e+'6l0)5%McX&%LM<+f5plL<S(89SRF]\3r.#FpjJENL`:!^eLc_Q["JQLhZjnDoaC(A:[1:hYgh81i:"*OlD'e#8kn/@qOn`7u:tZ7W^a"t0%RT;gR0qU`N_+Enq>85-3[*#8B'rn#S$f<b-/u0jg=>l@I'RnE'hrAj02L5l:6dcV`f4M]ao@YDXcq!SPb`0u-Y]3c;D2-gT<@+V[%e++]gXQBn85,,WFJhKXsOBs\>bXLk]S#'?<e+QoTL@fRU31lE[dkM^ZOA`W<%dV7CIl]4@#=te9GI07_q*!jCO;X8CaO/G\lepF&%I__7iP=1cP/uDH#KD9`!2F]stJF"hl0h;tI!3jnin=E)F%+V^Umfe<:ef@p.9IMAa:Yo.]>#P`Yji[kIei'R$_dmn,_V2#`5^mDb%"L0i*Y9GZ6>9uboU=b0M&d0OX;5m@-iWh$9(`)a;?ts\SpLmbs@8iYkiGo;6(8/]eRR'J>h+L&Q7#,A\R#miBC,Au,im-;@BsO18%$O7H3`;thXnFB/E!M\fo74H&&_)+#T"E0I)_GN=W!]NZ/KZ!*/#h>ipCI8l%&MQ+."gu%]L8!fKZ5IO1)J;QW+tOi`>>%0/%Z"Pt%q4chi'FUTH5beRa(E*W5D_r6!+W:QCk(D&U`gGWCXWXDecDSZ;4>Htc.pNs':4OW[I0'kUVr.*&/fo)=8P6hgR"p[JqUAOk]I2<>%[j:?3LM3Nm@$ciQK8hV;$qI3Q`AUn4g*Z>Ql=JA/n(PFO[PihE:K`ZNG/Il(>6_j>pJsdgCp(3#HoA/1[NjK!F7l\MCK:G.aF^^C%F>M^m#Qf'4o,CF9m^L=KEHr&qAOHf>S'#/:`\t+DG]XcogLA>!F&FPW7pAu0i&_u3TM:A^TI(FbbVNNE[ShDFJYhE*h-pX@h@V>V%3SVbYg]jhkmPUdI%GZm_Z=t$GC_fsmeSM)4-+$8+gQcVdGF1cMR#$ER*@.+SBP?(QE']t>cS9Z/+BoBHEVVal5EC/rkW3#UWG2GM%NQ0Nb@Hb/9=GkcPXV_3"XD,o<L@a*:=0.Do.RblEIgh)m#/m#,"56;UHlejG:$a2%f[2c`p`Ad+#)g-Gdq6nV9$V%lLBS7H1Kj6&%s4`tLN`'9;6LVHgDQoHpD&2^JgM!fQ.>bCa"pOZJ3>246/Bt9!d,7au_3/Q>?Xp@sDmRn#o'M)aBGjca%_.C"=<4/tbRQN%2QVR8%08Gg$-okJBP"pG-FB10>FkGc^Xm`5lmn0;H%;j8E6/<r`n=n1qZ7Qfrj#%@1GG./NhWgdFBfeuB\VBh88<Y2"\jb:`Yj;LVXo02;%KUPhVd'28Ln=.k&Y%brmB`S6*[VH$:2-<?*o-AX:lGU:9Zm\:YJ1QjkYksU\jJ`ISUbbP7l1,m4o(^"R[\I"-#m>&cT\&;&%:\W"%MD2JK8Cu=Q&I5]"Q)fhS`/n71"B--oOKYlC!fpL-@ok_u,=6:BGJHh/Qe>ui!c;IIZB<G4>+1k2gdCIp"<9N8TeS%Lfp++E,E[]A%BK*b>l]@AI>+T^G7f/E>Z:"MRSI(M9Hf/@))3E&BaadXup1k\W^4R^"fj;1eMQ6s&,)HK@=r\QF5hnpUOsGR:*pc=KAoH;^Qj,\$%5,6^*,`??CC1<=7`*+FF'nh;t]LTY[hr`=kL%LM.Z.;)`RptUYOn!.KFBR1FZ%W+L_1id!ZIpW:Gbg-=c*8'A#+V'c$SATmb(u;K%O"I.X*9Ma(6&c@i&Hj3VU$&MP3!8IhL![.>OfCJXp_0HEeNW9'hUaipB82NgD'BnB>--+7D<Ue(k`ONK$NlA41^DPpj"W__#IQdA%g;Gp1npmU=@U*+l0&!q7+r2;2J1e\MU/Y71E.LnhfL\[uL2g07K1Q6ng.oS&%Ohf!`mtPq(a7>@#e)'2-3&T]-<uAUE)5D9ToF3q%QU7K]?ath<G6rt/TQRAfOV3;6h)0Sj,nS1HhH\8mcjekg_pB-8,pEJLJj`:d#l>Q%`+G3n!MHN]WFVb#+\4OHqkK(bRltUJg'_kf%*I39LAl8#ZP2QD;&VOVn7N*Bs')C4SMUYk?W35G:P8tWU+LZuM%1"G#p&LO4J3eDMJ59^6j1<ATO=djQ[eYZY@SbJ]AC:&u)@SfS%3RS-`L]CUnE]R;e'd%U8liar56*H[W2?93bEdj[49lC1D';1AV:k7)#H@"Bn!bB)sgM/-Q!@LFWQid(eOsH2@_5T9o?hlU7&9om[%D'JIL<$#ipZOG1nUp*A1iN\FImZY#P#RD+";`Q-('+!MgT4%_U&I-_Y<=dl"pa)T,m"Eb5q%a5M^ZFH9RBDSr0][!^(O-DF6C6h)%@[aH)\fb6adfk`/i%a<pi*.fCc"K@p)B(1?e`,QI)G4Gl!"Z^H!c:TYTgP]'q:(>B2F57VMB94'#A>alaehi&9J&5b"1SsOfU=#B%LH>j?+RCBd615Rj%N?ZD,:E%d2IVLr:1,K3'\$eJfTNOlqq.>]!Po&F\Vut#M1i/Q0X;<^1Sd8#D`Kf"WWLVC_9jcqWssl("0s\r%73[Pm-<kX"#Zjt?&k:C#C1(Kh`?PL2nVue&6oRI>(FV(kg/.]tDh1dP;NnuTGJd1I)TSUmcr!_.JP<(?6Ru6CD*V@#hp^p6:5:Ua%&h8^?$21?87&LQs&2bXr=IMF7,Nf=!8@TSVOd6"/id)<*+Z1E*P'<,/><(SV.m5&CCXK"W\66Zm+Aj#MZrpf7&l3`Z9M9%OEI#+"%9o0hS?R]8g=^1fq>4-pZh[Dh*H/[,K<LoMD^o$U<!^I3*&Y%d,U]RV?`'lEkRVSipKhqJJVUg=&Q]].m8AW2MVWCiV^k/+Nd1VB[%`KM'T,RPaGZjTSL.<m[WeOT_%9gDn'Y\GFfUPlaKJr2JkK5!YMK!.bC^s`pNgI5GS6[Du#nk#Bj3rBod&hLLkP5(K&9Bh1OMWe6$%;2!YC^a`/W)aUu437Nf;FB@m0$>d(7-$!T_>Es*2GjNLJ5\Ka2H?qQC`UmbVZI"t>\/?i)pmT&gWD3ga0aT/LRq4UR<9hSQVMRV&%ic0dJe;JXt%L#UaQN^Pm9s;MD>ToQ[,g7ro,aTpLb75`=c*=@UjZ&q`o>'Xq0Q(O&8@g<6M&5M;!YCZ]f`GDY9@D!`*A!7S01%s$%g4ZCjN!>_V;4c=JjmaOhm7Q@D@hIg.@Lu<hTcG&n%Dk:[`j!#$!r4)QY`B][Z,m291e;:H`n'U@N*,9Lpm)7OHGX_KR$&T%OV0q[%4%"/-!/mY(`Kl]Z@YF`5gl\]M3C0adD3h4S-V#m0Ctj!,fsj<Z=h17/XpADH8Sf"E=>Qde4M:_3W)JLt9!BKk1mau&JMme<9s#AK%7\))e]ap,`=L6YQa:ThTTpK:;)(l)&(?\Rg$TtA4g0k*5+bmf,/A`GZ,c.gfhBO&c`,*R_B3(`t5457dZWYZ.BZ'S/&qNQ3SBVC<%S&O#cos0E'!Bb,%B`GCY(3QadYnLnR+ti14oH/>b9[`TcE,i6+VbI9V-XA5hll=j_KORNB[Ko!tQKrIqjW)[U()\7)-*jNoS`peX%>&:!c6jTVY/1i+o)<JF?:M-kgk%Y':-%uPe.hm\b!ndk4Lq2D$6]P+IM2&bWgVn!BMcj5a,29_ELK%K=c$QBTM!9&A&0DaM(<#3=%/8J9soe##V2>,Wl![sluA!<mQThLsTB((Km=\jbi$'L9ahYQa&6+,@hU/mL(`,'8D@"anM<+0S<T`_)L)WD$?_VL#/$!oO+Pk;@1%6-%5MJOWT'HJI)u%74)oq]%!uV2o=;'@1<EY9Me;#:3.JO%J#=,Xr0D0f*&Y"eZ`ROWcXmN;k;3(i_*D;LW-a_+m;mdc=iD0%=22%^82U`VJRU<`qhNR6X<%Q$t%K+LCc1-jeIWfk(Zc;A;Qt%i[:!%T!kY*Jk[X/&7?9:1kQf*d]9lrPL!!Y(d%72HPd5Shb"]YfqZ*8%bV4Zm)+/1"_)fO^RDo>@,O/=)'q1XcOR3\S1"`PXT!9A`nE`CEA7MjQ#bHRE]P_t"H.XIQ?pIH-YfhQ8^'c!o.+^atqJ*Y$D>^Pi%],b,5b2.*f!NFk&r\!0lB97J=//X.0Wq)4hJEIagn1dTg<1\seo<*b,(Dq+5nqh5IB"8UhTE[o)kr-.Qi53RE/:pVXB>RQ9Yof@9%EmBL8-%P/)*A0U(&=_#Y""mSD$DpC:;t*1]$hS6\7V9H8=?&iZo.+@Ji[_IGdhR7]6Xue^,^jRd`<dotLd3:#"%+H9`MV6(#LcRV%'K$<i_Nd2)i8L*-`jPr,_CKAI>+tOA]Y\H;6`[^7rQ/`rN%.W_jcbERa_ita%5JCj[rdkBY2W1p$OPd!dKc\tD-fO@[MXi:08+l1%0\%i5bL/4V7^H?35A]?h-..R[nS]03_ZMimHs&dWK,c(2a8?oX:"m4eIF<FF<U9SmnL%P\cmpB>g6H9-p;p!BnN+=PQk!=Q\kf9b%[A@E>5OTG8*L6#ZKGt#7LS^ZV\5YZk*;N=k*b0N$j?-jSb"`Y2OMTuXZUZTYh)X,BJm`kTl=C?3QVU592MZp3R(XhNcqF[%K2Drj%)Ba&T(Jr0i$m)NB3HAu5TWlE-!`2[qa7Fk"J`1-tkm3'],4lq\Vi\S#mY.S7'OHGE'^*BH?N$Ij@)*0W3M55lKYf`sO!0S0-VnAh%F>][Qhj<fj3NmhV;fn`&NMIUJ.q96jnR&LQPR(TNs8F<?r_:b1AHtpcht(D_2]bVDElBpJ;*u\<:^b'S@IcJS=Rass(>)qF+*e>P%<d`fpjEn0AcU0g%p;4]hf`G[\E^!]eN@,@CT\rD_dIBI(4/p%N!=[:knNasW!2)GY^3n+tfe@N-kGid46(M7<%SEBI)a"QT7cMqM%5,$urIV#P2>i1n48!Yi'fgWZ1JRm5[2Gd*`cA!nX'>Z8VP/LClePM.2+pln;Wft?A$@1'X%;Hk"=X&d-JISc5oP&-Ybp2"[+s]YU%IArMeP=ggo;D6)A%0k3%26Mul(t6Bbn[3m<@PD]0DbI7KkRS.+%A%COZZSpc(:Gre":d"BDE.tJL=juoH"qen>tp^]$?2EFD%S7\%8=2T=k/Y/Ad0)7`I>*SUD0TTe7Q8hC@i%QI0W9Z!$"h\tOp;D)5s.A5!+9b;To40=Jb4;6Jo:0^C'd.0#XpdV<67.O__%0$B%U]L%0gTZVd:'LR&]=N0,u/u'KIgl[!==A,iV*a-Pg9_+OQ/nGM\rfm0u3B62*-p)Skp51ZCErd;j)^o.Dg``-ZL>20dQn,`?oa<?SdNe%f])K09?+cB]hiq[3Q'nMFD:,96-/!cTH"9U77gfO91?NaD0YbI&C;WZ8\3)!q.^MGN>PM=]#s&VeL=<=D+^cRaX!TgbYu=l&57=p%k==VFcdjssb[Td7.k!uc?jlKS/MNc3P6Mb"U=@ROWF"!^nn=Ru'QWC;nnYT:W0C:0<8C)<4DSS(7'jELj_,dbCWqJLJP`<?/=Z`n%m>&98PV_H@KH_tF6]9hL\Q<<.Qe*Fl-XDBC)oOo94Y>/W9\e-G>$`PQ@tjMGq8&kAKoClI8OUnPl;;ULm$4r$.^@$9GW+JCHAd%K%Z]@Y'*%fXP#*)>LLQs#\1)u3+_%=>aPS(o:Pm#jK#[$RAE=kh;@N(6S]u!WP<2tiXC9Wmj.up$`5.*(=Cu.U6>#%)k)o)r;`tK(G%S$\q2Gc[PmY=/q4UKs^H1_i70=C<?#`Ado37COD?p^/EcP>Iuj+MFn-KauQg&.r,m.O536^IHt6/9$^1,7JHuJJ+7QdkX6nl<[)Y%RGot\4@r5G'BE7R#ruog_IME;Q4,gkUr!2m!^R"rAch03g/qGh#Yu,Qi%:(62JPq6fIk8VSnW0PnYNH-E3b\3C55tlp)!--*]!ui%QP%jn^:)`O==sa27"Nq\6?0NhPDSUZiZ?nEe`_6',E4J9j5&!g>0<@R"bY.m);GkOHN>XH9h_(;7)MtC^@-_jU+?j3'HRJ,f5Ff.%-h?+H8.f6!%#I8`?YVZ"=DA-rESDc#+GbNp1*u'kPKUAOd:kVGNL!]6M>/!3nnE<go6@[3J[ThXZ7ep>VE%[0&q+&7:[b)G>@oKl%'.364!cH#d(@7gh,P(pW'3MV[q.t<AI>]5PPKI4opp0Hj-ATdV#.hAY?`drE9<_+X<\WdCNR6l5=!5HpFP)$taacn]`[=,Qc&^$!%,&<a+iik#WgPsGWp;o3l!&tHC3H"*"X:Fh9\*_=sBp1+P7:=JkKHQb"2N+JIBV&ZRM/AFIG#aj5g*f'P.m.<<CWu4-,FHT["W)cE%`?4jn<Wb'LH&SB3Y;,QP6+sYH3^F%LC;D\Y-*l7o$[jc]Y>]gdK\B10X=;AVVK0Ti9<egnW(=<u$itF-0K!o22PY*Yk\O=00?M(k%hRp`"0F<K1?,:52;etK,Z^J_JL[R53'skWVW?@GbP1e`o!a0'<QWcOMDn@M!>LAgYE:HXKUhHo'S2'`[K$9Yj"4YIUnAFuk+PFE:%fqZNR28`gUeudA>G\X:tQIR[$oWu$.3SRt>Aj**SL4/(_LL$foS(]h\eYIDcLm`+CI05jMf1O^TL)3Ic2V;1,R:L:Sg5Y+:*VGtt%T[+CU_.qaJ%;)'Afbq/TQkBu+>+g9\dgS+2g68f0_,Y5?Aj<&7TI_-H4SK9G*C(Q'Y7`jhHLYm',s'2p8.n?;CjW6`9Jte"be0fq%'XTOJ1d%WH@)f"dTp@q\<4d`d+Jse42TdO>s3d#!"O)?mmOXZ(S#Qu"@ER@@M3+PF6GpU!!At.[b1ZJUQ,W'*ZXPWu[Ni1S:3p)I%Q57#^Zs\-7Xd7#df9h-oklQ6l]LNPp"V//kJpY$7#t?U?pLmif#!Y-3m).lZY9FG,l67)cm@J[Ki:pW1q]$3NX'c;p:)9,$*Uj8&%Wr#P;LEu+plsMKp,OF$N*4_.`YO\>gk8R#-d7i)t;V5)TLZj8=2O/8-lGX]#NK"Am8qof<H\ZEeaV%gd0$,Sd#E0pEe*<6FH#/2h%4As+<k3r^IWVr34Mf&NH-fZ5gs0CA-@Q@HdO7SJS6g;/o(RZ(b?kHAT[[ROkh5R%gCCn%3H<TL\?L4rq@lU/jBJE_r1ABG61W[Z2%=Du[JeYMH.9gH,&G`3$]_on%]dh]X;_$*N4<\0.J'='1/'R`P%A9H@ocSR%E+]KQVGmDb=Qp"lV3_,(jGaKK;7EjkT_DjRo1.5P-%QOVN>$G.Q4<PEWAkRa@`#nPL=[(fDa:GaXc_j:0#M577RXiub_D8ke3EghgF(2ka!,-46Kr!WU]U,5D%Lds9-H/INs)Y1UA0*kM#%8<UA@(9&VBIE>e@=L?hel#.E_MnCo'YGd$rP&(UnRRS^"C8<+0A'*GL^)j3aY)N#1Q10I_[XD)nQgh?_O4_",$^)kV7,TLE6+5-#%]^7/kSU,jq$G8W,c5=K\oPrB#5YY!dfY4IS,'YMFalEtY:EG'pMeB(5S3.7rf1^e<<C[KR_*G]QoBS"POI3qa!"[RM34'VI[^$`S%:s)(g,UumM<6#dF71i(V%.JToJZTn8-OA3FN3+WN3[MTf+]nk(Sd5O:1ZXLn:%;0lcTbZP#nR;dP+l,FC!_3O<%&',-C0#il\P@"%FY;``\s71_)iIHmcl3B!#"_Q`4;OrN<Z';EX["LjV\T<jo9h@m%H`8ad7lg&n`Z?FC.pZO!g*roAW<Y?4G,`Ci0ZlK8[:$?WRhh\%\.GYVW./"T#AG<AfHAO/_%5?MODO@G'C!lfPD<4a\fr"16Y61e7gPjsPm:6\GU;!U/3&g((3^'A9ecB=!f6qpVLU0u"huH0(gVem%KM-hV*61N-7D7gRfG:SK+JQXeF>?p]kHG;4N%Z@4Qi`r-`Ej0LeCO_T@"`,+!n-&ZCdg<L+suma'\'QTA]-CkJD8T+Ib;hD!sLNC%_m1Ercm8[p6<Ba".N%t5/Hq9i3"878MeAshA#n`&*/tmh!%(';4HtL!F%;Hc$Xu_%0-T>$>$[fp<P;MYKr<O,W=)">Mk66O%C8kF%O9Q`]@ktD0>LrDe(1n5ti:XMi'Y+:DEhs,^<,[4=;"M"30Ph2pi0D2S9(aB?_W4di:(:_@53G@685a<E`FG3X<K[`ei@"aET%8W5%:6t2rlXLN#_pYh@Bn-LRU_jMP91r:spgFi50ah%TL=/JU9ULmXC!#FE3Er-g`na6QV7-_)(6TD*-8`m]K>h//JBNq*M2p7^9)T^)%/MNBXpaK&9'&NdWODqM4,0%RoF=&[4TOM00o$VoO=,h8dYbNd"0pERH?4^tY6CH8KO;#@+f#Ao6ZW(B,S3g#]/8+_rU#YZ,kqSh`%DdAqM:S(9-i-OZf5[fVL+?!pPopQn`4;KbmM[0G$1e]E19rG55=H_*8iI$Y'W]JapfhGYRag>X'(:IIP8\Q`@;+]&nCTC"7/FL:V%Ad9)A*>Dm79[C/1ZiiOl&9`ot4J.sjoK%.=-5Wa,jkp0EO(&mK&6B8dGU+O#_fG,KU`q?&&(k*OL,?t,5tk7EONI;MQ5>g4DC[H*%l*^knU'^7h6kdL5os.TV#e#hZ;2tn06r=aFYDf!n)M6ZS'f)]hi],T4eV^]`UN5Q#2O>Zm>`39)Z=r0o7FZFV?36)Aak'34A\,_)%PA0-ON<Dqip.0t;:(HCh8d_5bD0b\0U5?!3LL,%=QNF*$VV8;H_*]3Qi!p^(QHSN?R+n_k@!SQh*SNG(AnINk>g(`F'uPIL8"jP$%aKmlS;jntLGa-@SZ$p5))=ochU;(/0a6"/0G=66lEqA5AMhn1kG?B9e:WWZNP7V2lJ.bMWep/'oae@4YOn3icE/6)_hD?o=.lkCW%Rl[9iD)P#5&S%q1H^dH?Bp%M3!0BCL[%qq_Y]D1`c!j\hpu6'\ftgHb-n8BT6:SFuC([];O=-l(i]#3Mke:Z81;TN71b=BU'I>3-%$7Xu?/SQu,.%hdm+F$b>F"jXgELWX^J@C$WcjSd9T4*nLj(MMIC-Q8;qaR$>Grh.P\o8sPEI:gW0(EXD/Kb?6Vm=-kEF\!,6IuLV%,JEIu;fE[n7+BE=Kjte;['V_Wf0YTP:mEGLQh(Yj)E`?''2lji,+K1]J;0bLi6#qF56Q9Mb-CS*@u<u<1U9se:,C$fEX+>Pk`<6G%QuStl@nR+MZ7eTjZ"DL7#JR'9`hH`boQKbo@;6pGq`*P]?DrYc)-\U8ZCEJs?Y#o[4"7=h0YFJJO[RB7D:unV11r<&/Cq+o5gI),%c,S`_@21m\@"qR\M,@;kES.iHlFL0h).r)$.bR4&b)X!i=?JPsSRBVflt)AoOQVI4YkIeDk[idAH^0t)WI/euJO!cZ;[]W(^aJk<%m`Fe=DTm9g)\-fTR+cD4<k:%R>`0"(ZkSV,0u;UT6c^W"#J^86HC;_N"/DnZD^b`[jQ-)[dXQn@FARj3==S**OFg[6E9$-R9?bbK%n!O<Z8kW3YAmaK*$@M6i;\@]..?$.B(MU)_>C8-FjEiYU'7DY?;Y3+8*Q]*M!$Ub$81qSgOD0%olYa+aYJA)[_Ppj2Qj%90bj5(0%,*fuT_9\1b(88'I)&GS]l`-hL(+8$V<]ka;Pck(9R&<&G"T^4,GpH/&$\kF?^9X_,P?aB4)DZYCCEg'/9j^7_U]2pZm80j_?;?<9%K_$jsUUF/A/ZBJnLj4hdL+qgLB:p'i.V(\p)%r\NH4*@=+p\BN^Fe=A9H?HA=G:HB)&'+SZ6XN".<,rg5ZYBoEjAtbhe:&*QH3H"%.#fk3imE1k%7-Ic#0-le/^(5h#@PkMs,Nlr?clU\3cQkG+e5HO9_di+ZW%;Z2Q6d[O+YS!bWt[m$rcX%^!H4W6.qG=>Gi,LTsHk0%3cMJ/cDpCD:6FPs']7ma.1mojdOBj/d7_WhV+r?J'QDKb'harpKA2n9MFt`bmnr'R'&#0R+8m706d7GuRl[#q3WI6q"q%,865CsA%"?$A(l*rW]lYn2N*KJ%8.JPJd%A^2I-JU.I4efhCS%i[6^0F*Z$c[j(n,bb`"9F5HD5<fmoD,AUc"GN-`>5nc;kF,6emN"@$"Z?b%[X]2`IQCD)JBrZJjTN`&Uej:)WmdkF2TfEMGU/QlA/[W6&>%GkFL[,L33dO@fQ-d5K8p[`/._:D!Jij?[!g6Y2<ZG%"AMT<-k/!/%)J;IuC\!-T:t@ULdV$_&`=)Hk12PrtBKDm.#0L)D*(V$LZpU"Tp%E3VdH:0c-5)jd1=YU97+'af3TBTk3-&h0&X,t[D;Wd0P;5@$%p>UI9K<g7hS&c,ManZ#NB)D+F!Kk;WRCao=';l4,Q]H;</^k2'?8tR'64QiFNE/"M^Ll0C'\%m#S2A"+etpi@KSWQQIHEhRF)sKn%c/Br&J<=oiFAfq/;8spY&6;1'Z%6jM24&8+Y1=pHkGq-nk0nZTT<:@aZRr&2dL5X;_q^o(j!:(L3g!c\;nY/ceok.)\3->"BrJ0u%=gj_+l.^CPHYXC*95o6O?IVQM5t$$!!jBGh.=u&AY/s)jj*&IOo'4h/Ssbn7_A8uEbMl4Qj>/N,A!&fN#n=&gM]l/BaU@[B>&[PY%&!Pm\(@Z]H6?Shq;WS7qFHUQhPj*`!.6K_dZZ;RdV,qV21F:,sT&=Er9&Qp.>XdA)o;kl:\H1kV;_!UjqO/fBD]g[1m:00SB"MH!%P[\9\25;,6Wi!$(YCT:Clp`at,uIp<ToSA_C*YhH7ZLEYdUej,A1QCloc^ZDENprGKC\1:Cc*)'P8e0PD:Va*5b/$D_uuF!02.NA%>t:aa7$rBu/US1KRCl4J(';rt-I<"MG1]-MM7%kH7^A:nj]J0qQVj4($kom.DIL7I6X#&dffoZcj&4=$.K85E^1Q!F*OkGCl5f;g%LBdB(IDbis!<Nss%"b&TmE1+r^h!afUDrspZPV4se3<'&K8f)[[\Q]n8;`WI.06$s3NS0$jlU4o$HBM:Q$W09KCthFE=rTalk2r"%hg:YLH=+=*NkoCF5hoX3q'jnmQ^epqK\6nDprp?(M-sAT-c^M(>:)H%>fl$IO1BIAq_IP,A=F3*oEZCoH:21dZX:#Ip:,MiFOIkB%g(GVP+=do[,PUh^-70h-'3^):3_\DNMFQuR,@,#KmBe,oDQVVjP^0aieW7_UmWl\OQEBT1[PWO67G#GS5M!OUp`%hRdY-(i=p\fs%edj-TYLhbH#ki2(JLc^-g[DDOdb>bXg)g&I<gO7mD`@_f5;q+Hdb:R-L,bX">kU<gbepjj8N`=u'1:-EAb>>IRPpcY"YbCd10I,l%_!,RTZMu__3j0!:a0cAd`W;"NC3kWPm?2pZCKYOVg>a&Og"j,S^[%-O.8I'JjU$l^$ElCeo<LP=1G6YVjfS]a1Zo/(`$_L)mT/kX%&2cMRN00XdgR"DS,A(1#GU,QJ-j;T>SR^Uld$Yfu]K_S]bM_2%^q0=0DYcu?I1K#]KNi[Z#8=q8-__GZI7L_p@]c\66S^^i[N("0%c=U_LaZ/#-Y%9+opN/u]&(Knn-W=Z*KN6qFR1-n0m&VT$\>MWB0#H$pp,NK)fiJOeiOc8RVQi<<n&^2Qs%.Qa>Gg:KHa]bl2@NkB%[mU6ieK^M#8Ct#UjHb`-\<R+e81sD%@IE(;&E#P-3F>*>YEk!pmZ$-E""Z[c,g]=ugHdmui6Uob[#U_5:b(g=:QD)YEth6BrG2$?%!5fofntriTots?&!gCN_"X4"P`gI.K"alA:4e,>2cLYI@?\]MOTA(p-F.&p`at_=)/TU/j=FSNor>V8.#6WNDE\DPpkd6$3F^kMj%%pE0p#?7Ms[V<Er[9PM"*duFjM8p*84$>nn0)OaTHpZE2.\F4h5'Om)X"Rui@eIe>-`-bt/4YPI9q?0ChHk[*J]6L1)YV\S)+Rgl%6cZJBX,qZDOG<<iY2o!(SN"SfTHoZUp'oLK)Y4l;ZA[l^"">3SlWVhB[_a-\oO^2^?tF.90^5hD`,Ks[6N20S:C*uqIjk<sQo#F[%?Oo/XBYLQ7kc?R)SjE=6,#u!IG-(4T+$R,_:;'\:^F)2PdnfT'p__AHgZq?tn*t:d=TLLQm9'4K<diTa!fY`?)_dWp->j,nJ_=7=%O<-7p;O:9k7498$OOm^E7'#IsLAHVDodMfK7,u?9?nJDCc-Ib`rtl)GZOs8:AFah@VE'm18"["9O:3$RdT@gGD;8.!6#L=sLJJq<%K%@r^,;lhHAi4osXa*V'T&>IBQi1,0TacdR4,>e;:4"N'lc-.EgJLu[4`149G4bKEDY`s0"s..q@P5?!.F%Y]O2UsP4@TZLg8K#U%pG;A6#3$j;M[_7WV8PK]3d=D2W"OU`C[a#H[2&d$3,dc(s/f5j-66`*!$0&0:>>pA8#[Nt=ckOTna%f8!_$V!Js)dWXo/.!EX*I"%nMG4@UE]l7Ah08?-^'!d^^2b>%.<&r'DF"B'1U[mGXD#TJL2XqX;D_@8C_asPLTYo,+q1U[]U>#fTpRDkT1W9AO9]\JS!0=m=t/3%_K4;HG_5I?`ZW4j+ac)+&D9gFjDj[&"S$*m8bG@J7QR]Ild!RX4JG6b5pBENgDm@50<YM6cH^F'(<B/X^nBO?n"<X<^n:*5fb(K_%_3f+_PTfDg>4DkJ&Ul=jZFUC%dk\BGEZe=pJ?KJl5%-)I3Z.6e-/go+!Q@@mE@DG8B[F(RE<@kQ;=;%!37/f>8Mis]Iq-(uh!NLS%I%1`^II5FtfAe,j!c^^^A(s$1P(7*t$3s_hN6oR(F<[T+Ggs\TT?(q->fOMPXej5>UQ0(5cbQkA!!?n2&7]g_P_-BJ!C7YAlC9Nc%#*mABltDeI[fk@kqh6f"'TbEoTEl*1B\DF"bPT4a(%Vup8Pm@NohNFS$dJpc:?"[G1F,dsI3/PrP>-5WT[l`.7d+(YA#kH5%*FYM%L]]8jZ>5]&?Kaj4'-q1)!:8q).#ba?Uukq'3CeTZ+AC;XeV6dhOg&$qTBVNpF`B.+h:ZC5?u.eL'a]R5KKB"MDl@Sa14+"Bj5Q#T%#^)TFLa:0KL+_VHQ'e!efN]%PE]H<fq^h8(a\UsVN.r.U40$<mgkg+c-nY7]Rp3;5HHuJ6Oip1223&hQqN\&8K>qaUd%dOWWJV[g%SDH\ZNp5dFh`$i+C=*tN`A>:&QnATZ:SBQu(I?p7,VO.Wb<rM,c/[,m?faN3]=772H<&d9-_RuKfNsNV4ODl(EO5h80k%Kq:QF@S%`"sD`!*1FJ,8g6D(Z1$oVIjW],VDtS?R^.tdC<80k>1gj(oMPGkA(q/.9D<Wf_a&g$%iHG03'96o&rX71@JK9<YcO"T!ldM)J>"k%,f.bUP$i#]BU!fa-'Y^UW-gSDPl,Oa-7j&#@4%el@rSHcF(2KKgn\dqjUn^Jr!7*i!M,_SerqVW5au_,$2(I3s79_NPsZGr!I^7D%a\%g4JCi=S,0R'LE<tQirJ'oBi01YC%'mka0Q#TMC%&!8_GH-[af?jS.%0mAFH6#DDTBc-"rHP1Nc.?JKlhen`15REBt"AP?+k.I%K"=r;E^s@MqUFN*9@4Yf\u`V@93$ec9s.(<9NJ09minf9p!u48IJ4Y2Z+Xjf`Cr_c7LIUE]u*=]2CriM3GsWD$*kQR0[Mf``BcUh%a^6!$\ZJi`j0RrC5qW7FnW"cjQ^JuajN.tU3KfQUT^LTo12(.nq[P0EhH5g^b[0&u"Xm]AiTLBegNhh0l>8?[&nEu\R#I.*iih#K%!a:`1>qRZ)F-#nQ"qQl:L/km:U@2j5kcD;%-h"M);bbk%_XePR@]"*I4=Mt[(:8$=J^0J5"C;ciK,XumrCE#I8,0:ApMdPG'p$6:%Ih293[IP$%G(]aT4cNS#f9ikCf&)ccJZ%u''H;kUmf<Emqmid7D(3F;2tD[Pe('B`Uc1A"lN6=K21[g2:qlK1^m?6#qQ5fX7'`>O%op9J/g.<AD&PgDMag!WrP4C^aF"KO7CK\^2"qq[S&Zauu$?3Rg-ion%AMN`_5itFUZf5cnHBFH:qM<+<E_uM^cW+1-[haT&ddr,0%]]IoFA&ZHC]h5dB9UH1/TKbVF!k&%^RddX2T?-%H4g<miGCTG`gXA:(+]1sW8_eZ9ADtKS,ShE+EI`:AXY'8HdeaPD1quG/+rC26%NU<dDY"DOqf.=CVQ0_`7.,5X!/[j,1)cKLdMHQbgd46[!*9`H%H.Dt4`M):G^+=$"VhpKTdX/T9S&OrP5g>[<S:a:,bO&ioU><D@%%nVZ"8Wq)4r**gimnJpZ:O`mF[OP-9cNTZY[%m&Z[l#!*lTEtR,1T;=J]9[_>X.X:br,2eOhNl6J[ct\'8Q#g+oSoVN4hA7EqTG/%[tq%YXi=Q)c6gR,QZ2':s7DI4QR"(lahD8()3!4/[>r.ePP*3Z6fNJ:\"HO)bb1Sja1+a<96Ke2EA`*tkAH.+NiCTN9>lC>9qZZd%&g-ulrMO.\AFqR-\nuX/4B^e6#AIU`*t,0!4\OIuT83FGc9"1NGT-/!Ni*kUT-=7#ktEOS(0G-:P)gUiQ<0+[=>4te(5CF5Z]pNn%_7Z3ek-cVV(iSfe)'uX9Al!mX);COF)&%go!-EZ*?VTMBCqS*jJ\:[F'tG6R,O"L4qZgd!CY[JFm$tUsi/bAnQuVlD0[5Y(p`kei%@GSEK,@UDJ*N/VifBi3!gAA3be`1ajj4$7*K>)*:)0uaV-+1bgH]O(J^OHD%ecYiYR3<Tkfl1\nC)m&Qg8]2#im9cZWIoh&\fS1.%)\)s&?/!kf^U4T_=sJcPa&&djq/J0[,#2Q3ju%QA&UnKZPpsJgM,-T#!t+bWLV@=NrQ:?m(i$^GY])hB!8/`u$tequdE%mEg&VcT%(!\W[<2]ZF'dj[ac/NO.ei#7#](t]$FK5gWq)X^(^8L[BO^fE`pq1!6-K(KsR,K>Z>o,2iP%MdqiIWp!WYb##QXN!G(0*XBlW.2!%[*,L&?iN/3;Io$PhOQ"^)!tN[CalVh-*q^jriK^'CdS6Gc'N\KmJJ<DN]SOPT6]#mlPqiUjgjai^t\?$H#^3AYBlaf3HJu1`4:C>%?e88Z'e[ok@3]3PH@%F2h8nErD>,:f*iGM$j`<Eu0'DQnZ5c)j-/CgGj^0(j-?abF+tB2@j,<MlBrVWf.@CD.XXqj+8dd\M&EuO1%,AFW-FW4rU1mo/(?OS`0g=9&JF-u3D7T!Wr.POqRS2/`IqYmQ(c<%Htrp5R@O72gU^-r9skioNs-M$RM[K&D/[38-F8$"<\RHX@1%2(.N%fW$`^?o$g_7f_lVhgBTnnfF;8O4RFAl_]m(:H<GBisV=M`/rU<hNKRQleJjn:A-N%E["Rles]ag&T9,A9qHd&R4QYL2_m=;%.p("/Tl3Vh;Q@1fplB/$WY9rs2fl:^/A$H1i`52sA<iY?fZCGh3G%M7T#')&1I51O,8%T;AO>GsK4&E;A8%b!$NL4Qn2N3ig:!qq%jDVUdJ]>Z$\2dW^F"UOH]bCEq<QbOof9S,l;QgRL)8=S&(]Q\qSR,n0Uk%#!2NKdKGu=De`^]2crtt#a%)BLoW?o@)c";k+F!3<V%MTj#/7VNW&!YA1JWA^Kc=";>8S'H.<$rq(4BgNN`:2J:LS)J.j/$`C_kISW`o+N<0"W)aW&44TS!XdY<^l3Qf'D=gR%H.=a&p8Y_%*/trghl&EGkfOtfHb&C8r<-_`EhlKCU$R=uJ^Tq6Ot\RF1-fNPaO:a]*6Lq0GK+5#Q's"Xl/8M!/d7S=FmaB\9#7ZYhlQ<1B2`\q%9^IcVVb/48r?SN_AP(4L`DN&gk\5ODVirO'h+c/?P!g!*pUr5o6?.<7!%X^KX"H-'WY@cakJfnAF&fWJ<^[LF=58t3;CG,m=ZlDW%eLEQu#FlN_e%P?U.<j(RNIc$r-TiA]"OD?d)2AaJ5B#Rm[,N;a9TM=YO1@L2>@00L1SbPpl[.CRMVB.M.d<@>@)N5mO`dFAYXr:l%I9>SLkK.n"FK*;cI%2DTR"nDJ2tJc"#4(bA*jD8BZr4>&)Z[oZfIh*U$R<?Cf@_S3/]_%1aF9^mG`,<Jr1^llFH>dOei@K34)7K!%bpb#1))eQ:+dckK!i]s!)7(@Y;[lW".(iJ(``,,NIMht2ReS*S],8SYf_CX*A2A^\(^WTj3uG"t]*No(1gJ&E'cZj>q+6@IhZHr]%.bB8XBq7HUgu/7$FE8<@=8asGbpXeOI?.XTBl5?2[N?Wrh%5ZaDBUT+r</FPFs6e>>K/DY]32B)'cGO$B$o_EH34&3SifO_&+``W%Q_i8R/W9"bGGP%XP5;nRdb%Xe:M'gg=6V/"qlk=('I+uP:K<p0q:p?!),?H9?Y3K\Jn8'DI'-?``r'Zm9-jA@W(lH[DB=?Dgao$i%\a?Ear<2=3'e5IbnqjDQZhd'Ad9%k.3PUW/gAr<^en9I@iua=`3?<IRPH"',G4NnHF+rAt/bpC:GcpfjEl2m2eUbr$9ia#R#&Ztp%XTh^=dUW:C`nua4BrUibZaA+c`XObgTGU&RYNVkRhCegW"*1eSHAc^d9!4t4gX9X`!b8CB![^u4*`5XuVPQfA]W??.,XABVTT*s&%@JGMTLNL([9:kh+)#8"@%3/N^Jri3\KZJMXEf2-oJ\5o-6dI``NK;q'Cfn\hkZJa0n>_"-Ar,4LHp1H+'Vn0PHG^<sC<<q:!j.d4%996Bpq$bQH'o,&!<+![;kl&"0bKK7m#%A$Y:<Hi8"&@mdjK@)oei_^S]U_*Z#sHCsX>H@Og$dKS):J=XIcI,n0&;kKl*e@`A8^@t%T%iL;Z=K2AHaATVSGP,6c#kD8(tR#D+nU6?1PF#S'&a[*bSBHsD:YWJhkr?Xc!K1(j**_UZou=+g%<c:pO"(mAk(FtnF+lP0qnmB%GK(TJG>BqfY`/)>N2)f"nGZrDAH6OZCs*6gJ$Z\eT)+qEAg_0br52"l@+p$jK`WrK$a1uZI`)MNgmo6DPt0AW5p$noaSY\qAEr?e%9Xg/I(6Q,ekfd["@PQ2HniZKRk<O@E`o`gJ4.qW/l9<P&O)*G0F'=YH#B&1&:)`gbF=k9^1'3a#)m?9JUV5t%]9f*-iXDfj:aQ?t%QV!t'@ghlc&ch<;"R;h'52;J]L:s+bFT2*(SAa8[:IhM[PA#1_1XXfCDBl/4"V*rk"AWoBFfS"CA+ZmB;\7W1Yh&*;UGf!(O9-<o%GcJ;B?<>S6$:)de[1%o[Ae1r52LUB^;ZPO[;X7fd?LHt%n$U1DT?hkkQ3-JAagSCGZDTAJr!:(32(fB&9"\U?L]HBqeUX5TD_2#Q%\q-ig>`=1e:2uLrPe]*u!Q>>.>:#mhmG1%Bi]Mp#.)N8CP(K%ojaob0n]F:EDGftppWpIoq]O3*3$A@ZcuZ+WqaqRbrl,&S&!,A`%ML4ohgO6S!\B.5r/.NA>BURBI#`K1Qgoj<lh)m_Q,-H_ZL@pl/asCu0;%prSNtXMIgFcDs#8(^JN,<Q=(.6H^/eIis5'r!Gp6q*1%OpTf<`m0JiZ\;j<_a&Z:Q:lR[Re$lo<4CT'"U+]EK?2;4Co/?jf2@p^(h@`1\uD1H)aMZ3=/IJs5C+;$1J0sTRUZ_L1I9MXNR#>`%a/Hmd#Wt56YA5CP%L;eZMn)=d!VWtHBuYD&6RCt#64,@l&H1te9]sq=eu,.L%.B@o33t+B.DR4HM_S>+_`d<L]3@,%ZhuqiEoY,F%Rn:.4%H&fMrUHO9"h/6'B)rcE:Q^Tt)>(B#[[g63#CF*@'D$_K*)jT6KE5gIT!!Z@Wb48/G/-P<M&DY)]3^ie*Gpq3)L(al?LeII%l2:3@Ge06o5igX(dXc.jCXGcLE&Z8Ra<1-R37DPd>]Sg%3!SO.!mZ&m;fZ!`Lo#.9R5;6Q/KX%t/[5n2`THV$9NU)6DtbcORBp+&%I[gdm]C.,t?WC-3PR5\9>^7'k9=\&2WFj">6_mu\4d'/MXtrMUEI]*DUtT?\jeDLY8`a6O-".oBkkA1cNKS'LH(-XO*0q,E;+;A#%c%Tc=,#/OA`'h-YnDFU9'BD1l(AgICXdKjiJis?^^f\3=S=VH>ft"^5oemJhmP/3EN"?N>H(AH]69>L,1H1B_JJq<FqA%*LhNI[$%R.&\q`i6T5S"s2i?=&]t@(C;a]m^Tc0A,:]a6%ZrCpaijF&c?JYTi#uK-rDb^]qOXSo"No*R]s,f5UjVO:X<&#Z.RoC14ipF@nk2%V1a@>`Y;!s-[n7\=%VL&Ai0PqikE6&`'3n/'bW&^XVD&J6GQ=J[6_U_R--EBG.SG#I(h3okebY)&gWuo&HibO4QP:?nc$AZV9nf<%.b0\<gQ)5O=kA!>,?*Q>6YYE*l6]7[e)N*:B,""X;M',ZntuE?GA[Hrn#JAA^%K>[!5)rICT,Z\Qpn[C,bUlFZH+q?(HKfsZXNu7%:Xr@6;h(VIH7kr&M?_+h*KTBQ]UYkcF-4S).^334=p,\qC5\V:0qr[:<6f9P<!/hH"I\(d(""9K3!n*B$*JLR`toHqNXD0p*i)k&%_+Se9;3WQDQn&?452M[X46ejc(a74HUSs?-EMQ41^3+*bcT'J&ms^Q?[qY=o42Kl#7E(W_f,=r0*lAE;DNrKai>IZNnae%Cpg;$8%moaNiU%.IISq8<Sh1V:iGrBS$O-?U<9AjYfdJV::#'mAqj%B#FOpAF>lZO)\%Ri+HHeREPK.W38R%*8uX4,[n$CWc@DS'#nH"nb_%RrXl'JB;Fo`cF.?.I=O?-X@^n<;M%=7KdLl`54TpZ+S'&3GpVoXG,YpS.Cl='^^:'=hd<cCS-MdghQ!e71g5>CJ\qEnRLn.-<e`\%Eh`1)c;Cj#F9aS84.:I-!T_HA6*6Ei/,Pff9SC-)HIRlcP[@W8WJ&2?XKp]P=W(p+jXR$Ybbkqt_p!U.7VuFBZlNq\T(6lp)^njk%CRaAGWe3fFHM3\.g:1J$*pdpo9eA<K\EJ:s.<'J"E46hn>OA$(-66I.=6n\.<6LYCqjI7tc276m@jgV4!]/ZL+U;0XmWUdWj-%Hc%p:Je&PC+n90/r^!K\tNJV]cZbKAtV;RspF60l^R*RF>HBMuUQac6V;1JT,VVs3GZ<?:DFD72ZZg\_F/1\bgAK;PZ.1G"#nXER-Ql%R;H!E=GpXZ,Q70"*\60M%V65^?'[>2%Oucu[iM^AqOSuAIrNu"ArV-Ie;4V@j89KdenNj%VX_%:ONA7"eZI<gpT!mTdcL7NL$`n5%0N8:ZWLS#LF0ZRagE)s%mE#o[%9(ICj.=?QJd$t%T@5"c8b)j.i,_*gO#P6]Ou!?GhL?mi51Q*;%8SX3q3PImoe6#p[,N\UT1XEi%iKgTA[GkSZ7j)D,a7&s$QHsl2.fWVo%/M9lpQNmBQdEssp4_>_.2[)?opME@%GH:h9.>`oI1Hu=4hA$j+S:SoF4r`ZjmE=.Z!Lq7%-08];!9'gfs8Q[(NX)Bm4,hcQ&YJSl=63/b5G5H)E?$9e*MN"?nTEQC3d!>f?'c'$#^rD*RJNZ/+D;Q.L>!S0NT_;drEp5-B1FLs%-*Dg4_dl6r).pX!$m^WiCrburS2.I%BW0?Y7gO"r;6k50Lk'R0S4l&OpI)>o.cJcb4LG'nfm.F^:Q7,#(CF2:AK;Kcbn1t+fAd\m%[s<oeTZhEM_8uc8*?U2%dHW)+92Kcm)"IS/qps8_V?WBFc#?Y5o%d2ehDLL$;R?K*dJ(X'F)EtIYTQB3VM7IMi!S,ilj)-].LDj>%U4m1%HkQ0/1$hI=&E4]$?i3+ZLheW4,KJoJHC@-raH+StAt$*:->qo:-u4B37-@M7*?!O^-qJGUU;U>WnA$jo_RYX,+QF@%MhEo7%3m)&*]YnB4?\'MZX1(R-,48V?1N.YY8>OHRgrr7>fW<FWCjH@hNBEO%3h2=*'!=.pF&>Do=U_9s8DU>b;.F@,0A+9(c\1u6R3b:^%X"<f\1X],MVI#Ku7eX8DRma]spcbL"IVQ>_P.48r"9qp]8"G<+PA>_sdctl3&9Ye62ocqWNdkRQk1FP6Q3#O/mqW)Gl#]$3V45;"%j'<mcJYPWX%])1'MYR.66jY]'b$n%h+/clq+E!]+\!bHobZGo3.=arc$b1riVEMQ+p6[2V$d?Me!mWAQ,H@/5TU4Ca13*D#.5dd.%#f8/4O#NrjR1%CYjoR?QCBZ]chVZhWQ2nsV?5B[`idpnc&tHGr,)Xk]m_VD!2]F3lU1GHP`=o-1YW/gXq^'Su;J.KqDPgaQ>R?f]%ia"23o[aZ.`HGjE8^iJLM3QLlJU$]I$7<5K+tu?,46;.Klm08=.kn!#18K#;akh7dE2:2:[aFm]C,N3inW<#^MDpX"e\h`.`Dn<O%#Vir"c.JqZ1U$cs*O]36noO7F0;'%G'GV1lb;&\K;&8E=ShbN.WOOJ/f:(mN\V!/a\/4j/"dUJ8-"[K[daFC?+qpJjaIc"[GL+oA%[tK+c_81(!ZJ($N,D?+]>1_qh_coMjk^2#]X9HU#9o:kslg*27W3(j*?Bal;R9P0RH_I.^*-uW\<L\6/[22o#_s5?e1<C^o.X5@R%*'3ub+\N$^GoLC8%oXI&*&Q4j86<FNZ)s-uf`'a=-#.);J&tiSPpjpQCm*kraH5,YdrLt*hD3MjpFCM/q)7u-CL3m+#^O6IHk.Li%G.lOGQT+doHYYf`IE-pD0_1$i1r57`JsEdQp;etg%GCFbJ=g6bRcpu#NtmZ.Gp>cSI9@3+QGff3T!p:?R<P];rFe@phXG45)E,0J%gYr4qo0q7eJ[Mj</WNi628omJ[%&2\E1PPj1OEK;\;hS\^L7=A)c+Z>qj^j'-*FD5Cf[RlA=5>D^#@I3/Lr&I,H0H$GM:'S4QS=@%8B3SB8E'obOo7%?U(+7N:Sj?[+Yg.g;5V$9MHUU*&b9?(B39;jfl/r(>Xu'T@ucgS8(;@E+4r'kL.<i=m7_m)EQM\me[FB.afnDA%Vsg\W39-g=-&n=ja]6p0(mD="p".D@UF(0f,$2ocoK63ML\isc[]aL*/8I#KLUfIRgT[5YiBss20q%dJ.1cO0B\/FJ:Wa(UD7drN%Gba"9Mt$)QL0`AZ0OmNmc6HQNC'k8(aVp>iDRX3"[.!^"JK+=`cF%Jfg`kEgGf<_#O^(t:ZC)Vl>fPC(<FC\XHGs6=ogBVJ1s@Jb%qX`I2NEp8U"A&?:\9q'8h<J'pVKn6r7SWnSHTM^?8\^hiCea(d$B1$'\KoC`GaTu6*BPt*%YQ]5JB]Q.*sg&7F"#8'd,[!E'lXs)%&7S<&H-pi&T1cNW$Vc4V&Rj.Q!N6-tC)k74l9F-kMu(KMD^;Fi^kAJuJ`gIih3[hBPB>ICXDf^0%MIoe?\r"VLUV=?5TCt;:CN[2%@2@&tA,87/J7Sm`<-.[]%kA>F+cT#3jAsY^/$%KQY?.O0Nn#"bB*qD5!OS&@TC`DDbs<j15%O:<^'(Z4mA2gX^L>c?a,d#j`39cL%PGWj^o67i<oRZhX]G"V[IQs!Li6$%8$XsZ3__m[GbL1re.=YJAD=`#V&-V^WXR)i10mlDOrgZ\U%H=.5CF@Hn9&?]+H2)X`S>Vm[%TrkNfnSDK/\9e*_+,/U=[MEX9R2NHI:i\-EHR@SJMsX`9qJ5X9Abb5dB$h@j1NS$3Vg,HD`W"ITc4cX"Wt7V-lc16KT+UUiMJ8:9%QKN+0g\dK"SiK"/^k]LKft*Y2Z<&ODP"*m*/kV%?HTDE<NK%YM;874_&F[Wk":V00O\B5)[/t9)F$]V7&*s-3NugoA-mgfH%nWhD%+GFS]?Q.P;JhJDk1kr-&[<0Dk59K+fA,&*TNEPX]kicX$BERH\pgiN:Wce\[]?1n%qN%!apgNM$,'q_h;Ec/#0s?,/aa-aWL.h+8%:,KK9?h4879>P"0+7(67,A=[U(&-<kKkA"pD>D)>iKiEHg!'$Q2[8!Zg>cGh'iK2HR?eq6`UPYQOI;+SP!9%92P39&4l@?nZW+'J%b8n'SA+D`B8pE]`Sg[gGKhONu";CTHjtCXQ7c_iA@]_e5IbgFL)e43].a2ACla]9L%3C`7KZ!+W%;?0^'Mh=kZi#4%GoPhY"(+]L%&'["17Xh1*n0G6/H`:Emnac-aOnY"LYiAU5(\9l(HU-`sK]6cTI#\2<03-YLq1*9^na<SR!d#1(;O;4-6ZUNre5d&U!/@gc,Z&C[%jGD)BK9Q*g*i7LDj5!7$"KmXe>2U/fO9SQGYm>$pebdd*n1P)Q@l7K#P`toK,831*bcr(*_kPF3$`N6CUo]WkDONsC:mJ!qE`6uf%U)sgCiDM!gLA@XE:)DI=P[NHH1*;b=R*<gDjuSm3^;YLUNIlEG),KRt`jsSQhnU#SjEE-[+>K-;N=h41dc9VQh?jKih/Un1#G+!]%.*1)FOb[4pDO`4#bEs_n`=S`?#EO=G^&5\YFuOb=ZQ[ElH<Oeo.i?Y#ZKN6O/?C.pN@1kd2$jEWU/)gJR:XJ\\!<B]rG)CZGp^@d%!LD>Rq0bB<3SoM8CNT-k:dWq;'l^Tl`^o&IZl[X-OVU(E=L@)qHX:lOHu=S+lbf,FaaS2OPC*Fa)dUeL+eDot`<IA4^'8L(U^HQl%Z<#Lr5F29$1e;`65pE=gQ,H4Us%D6N5N5LO-VWdKWK:t9HP1+H>7btk;Z?csn]8kNEX+4-87[>W!.%0T'Jh$Y,%KK8mu`Z.Z<aDY%,$4X45#Qo*7&fQb_&gR(Bifhk'.S6):')+N3tT]a2/r>(O3#M`KX41/4).gO9R-]1r@od!9Mlp]+51X`!rTk&fI$H[$;VJjAd_]l%$oX;aSl\MWIf#"mS8-)uBdU@o$71k#Bb:He8^ige"B;@'kE#n!Pu:ER4`:B]i2qs.;+F@*7T(^I/<3[nar(!9kE`!#PG;6Z\'GNP%ZI!W=d@00Cin,N,]J0(peZ%eK$%?<G\Qp^W9GABX3Ua)^!S!"UK?rW6ePi(!3c(U^0K"/eQKGt)X2b4eEY\@=8DG4K.UYJV>mW-$%2D#qLdXh@]4?h7lGEl_/Ch7=;gTsnj=%7@;%$EH(Vp\*LbUmSgXRcPul8>7`;0WM+#0X`E4(::<"_<.Qit9a/g?<`JLHsX`(/iKZ%9#)2\R4cjd6Urk7"1Y"q?V&m&RJu(@C)qh8a''a('iX'R>F3)Ul/WnoHYTDI7Hj*FV?'Z-dKcYTgL:Nl/4kN.W63"@MIGp`C"p);%n?-2OP?B52$ajM5=l&)k.]/!>ibk)TdWTZ,Wn&p.CVm3Z4ete,%VA<(m/0^NoC2g^a,k)lP4qKcEFlX:]k6+H+5g7QqR>AHot0=I%3s,sTGWn\_kdIAG<,f<VJ?qeHT71uDE[R"_F6%s(9LZD'kO<i-<dr@U__^HL5"Q>-a!RXO99)$4VDLPd,^2RAO[@KgUC`K,[jC?E%S47K(Mu+,<'%?TB=k(jR.SR%iE\5JkHt*9+l+*jVDFTbX1X["PP.ar=[W>uVcL8UIY-aB6qct?P_\W9AL;4`uCh;'#a2V`BQu69_%#gYZ4?!i\_!qI]I.0qP3ZSAgj.Mf[V6.0VhEa[4/RuF:OnF^(eq^9.6Mq3;u"O8$qHcnDpq;%OtN4,$F28,d!1K80;c%c7fo@^2Y%D)3=lfUe0cHIJ!_o4F"hg0h(a$an9ORd+-"%V8O/duu4^+j#I"=-5Yr(=OXZK_'3L,8jZ#(AKg$]P?/;X'=YXie5#0eb&PgZN-G1%NZr6?C&!L\BPp&k'kXJ\ZEG'9l,;u\oB(S@!2ktUp,)sm\;[!]:79/8T'%>2j*h@WJa?b@Q,%._5t@*hcF?K3]EGML3Stpkp]MMq%)3`]q][%6I.2M3S8)VpdARfZTr>T1/Z8uRa1tA%T)Z.s0!0,sUD$2HoY-:;hn&SO6F\@TI#,@&<.^>TRJ[[j%m]K\qb6V03F,ldI%-QRLr47M:b4_U4?\H7IWkrb'a@oRbfm/"/;r&ICdaM21>E%I_26uT>jXP=luYtYIZ_aGUo9uDaM\TLU,+-CK1U`)gjXmb641>:hp%!hL&0eXc;nrbCt>aJ*bU<1_cVQs-U6DeCn506GJ?i,"N%8V4t.r<R'4G^>A1oYB;[n*rA>%SB,BSrAF"Qgj0,(i]fU74%)L/AZ=u%`c0,tQWb_9Eo)2fO#UY]HdpBLbb(MI`l$XqDF#O)_s5FjEkkk59F6u/3umE%60IP/pt0dR+X.G8LXA5tqi&QBO6aIG#&.UB*=e%k%HC.Zb?\\R[LH*;9jQ\QE`X7hsP-'R>^fOB;KmAoW!!sQY-2tBV:-?q*KaC(RYB2fe;&1gPf1tdN7n3RV<X%bVf1JT>&<M\6$a>Ib%9>/6<.Sh&1,;"CiQ)LF$h;`Q^/k1hRcj['c5EHW,(jit$M%EO-h),p8dWWA:Ypph,I9rqG_)6+cgO)HJ]_WrZVfF9YQ96m-+L*aq%@"gR4CiiP?Ge+_aI.)&NK@;.3B]V4?g2V;\ZTG$1=J.E2@8Z34g`eeo,ti"b&"Q23@+W%Q-!?\7(UpAL8*0(DeY?Z<FD0jCDH;$(%XZ>gE0MVUZ$VA])!^]sKREhK2oP8.r5ptGDBE6(P6.t1,-HdSBDfjjCk]&g"A8/P2Y#DeO+`'l##[CM[+!FPP28m_@ki]'Je[jZB%\QAq:hZ`6UdN.+q0HZUN9?\qk,URhPd5u7)+_:@S8/.dj9p;D"a#+Duq7,*5R@;^K""0+h'M#If'r7>cr6f,V$8N'oRPufaPG'/M%/ljj-6rn"7jY9,8ZS%^)JnB=SK.S8VEf.%I#P>7PQRdh!QfoEOG0pu_o05#<DI;'lAb"&]V(.9IB^oAgk\p^bVR:.AA3q]$8g%]$%FQ>kr&knJl8Rbd[1o-5oG;2L#X.5[t"_s0PPYsdR)79tcgF@;CS9X9ORRfBEG^rg@RbZ"s?3*$AX98VEUl:XFeVmjfk,qT;;O@Ie%p5D"u3'G`<3UY:tHB`l=9NJ\TnN@j_=%PR>K`-6hlD9C?0"aBTRhk7a-4W_MQIjWVqgOUc'0^Q_#)4)Z2m".Y3"tbL/b(J1IAI9b%C:D+c?r;d,9UYT(!4ri$(SPi&.F^<l*54&j,'nZ7`)W1N_uV0h`'?slpYlrg.LZQBlYkBA3c;+;dZ=Im2`8:2'Wl$Wi5'bkLgD?,%X<($@L2M!S+-3Kc?G.YV7WQ,.n/.B4(Q_cVW1m]%VR6WGg;o^eb_gA%RZa=Ug.*8ug_>[3@EK:Y-f&Ye0s_LJ,_@6Sh=s[efOCR&%EC"BsIB\(:.%>#jpj6J7f#Rt_2Fq@m=+PN0.tZK<,1RX,<Hd^c<6!IWY?F*@A4t^aP9_oKJ6,dnel!\JR@-D>Kj>rO**`b/'*Y/b%/:']B][eQ"-228@Xk9A:3X8>/lnThmo=cDP`\ZbYec!&CP2UT4rKiiFS0VTc`f[.CM^!L_?Kpu6:UW>?(6=lm8eh?@/2;B*17p'J%YmTBVB"3^r1gZLAqdQ=9S_L[j[)S5?:dLQpR]0?>p5YVA0'Giq#Opq2%o)^f4A7n:h(JHMRC:dDF$b7]j#lCTOgiNaOCeWkZX)@t%fJtRpXiNMQFhXf$5bFOrDfc^IQuJFR-_/c:Zj=SEQ`Z@_cYI[F+8?ePi(=C"Aj"pkWA6q#K'JJ*PBGOuop/O%36JS[(]]):Z5.:!%:\0go^'BttfN',Gj&f@eb]/IJh3C*6'oB6S]^J]e/#.r#iTc+RfE[knRb*5)UO&31=ZE?h.@T-R0NGG)?$@U<m-8e^.bX5N/\cDN%?<rE4B.?!JMMZ+',EP(`am']7-C)7"e7hZD/h%5B[jH7Q>maMoTPlhu1\\#\AmK4T2"!n.X?fb3%,!V+3l7A_lHJlFk<GrP:h&O!%;$#0.BIgb#pp_n1gr[PaLX"'>O9neI=FRBF&>)4bkdMR\:i0`V[OfecNZbH-l8:Qr/@#&2q]IoAaj6"`C0:@==\3o8m&Jrb`jXtf%5K_38ZA,g3)CVNV52=4;Bp!g"eAZ^A1THunDs=B+\b3=@>C'mZ>Squ`[!c=4erW?^05Xu`aitYGI#g*3N`6qSA7R`Y3:gOVdN"`4%0!+//!-fnQ(nZW$I)]0hdH9V@7R3u>;)=5g=S@c._soWMUqCD`TJi"hQ?_\sOYBL*jmW;Of'HE=A61a%%3hN'fpD+M@1\[t6%'Us%P8VuQVS(&=aon(bRZ9;EXdLE@DoqbFC>m0dCK%CXg$H``s0Z;*Y4K4+O$m&q$J+;Dd=hn,I`=62m4M@bm;n+8<Cb:^+UOT?)pLS;%h<_\FncD!RKR&Ng),H^tB3:&NI9AK@EOj*^m9B<>"]C<66aMZ:#_n+J13"f"]&Oh3>g!s<Gh2EimEWVSX0TQ(j)bQDEJ8%<K2Qm^%o>N*bDpLJ1[77FO/YrQ%50Yi)Vnh&f+&#k*rF7WD?Z82$Ua'Jl5-jP%7!K/clOB'-)Og3Z<F@$2o',N*B:*e?3k/mAlh]Cb[nWGp%Xspm*<n?:m/\:>57-SM@TH9r6fdC:Se%nUJlprMkpuXAdaDFVB*TUAU[=cC1X99o+<)lr&&j>0hZGZ"73&r7hOKa0-2[fEo).g*Z%7-)GaD#L=X^sD'ef"QDn@^_nk+F'A4;Z9DRShMR3c\=KLiH#`N5WS$_oCA^RYT_?<lLXO"NI`@m6dRHkm\'.7:.2f/;"Nme8Aeh3%+)I\fH;'4<&eKh#OtUZ1C%3hu3-f9t^T\`$N)(JK]Rm/D5#_&_)Im</eqm8i/[?5.L;$`aH+nV5>JQM)it:]sMg#,86eBc4?9D7t%SX1V1V:/^4H21JEH*d<o,HTe)KCR?2L.of(U(k$GKog^Ccr[@Ha_2.i='RdYWbgeC]>blMoUlHdM2p>"p8ku2n:;G#?Ao_/^gMIN%N>jie4;&J!6c/BXSM7o4?pf#Wc/N%C.Zd`&O^EGikG@T6Es-_uF%#.6<WQYR01\YYkVcn=lYSMa5QSNGM$J#8Ri-EWU=Jo7THdjQ%RjD6>Pa&%$q4Kpf\E_j*!J!-jLEXNtNj\9(Q7q&3_gGT1/`>C4m=oAdG?eMFY#gQMN3!4@<!i$M"t@/G_L,KAOsmie?%Vg]&h+&A%&W7Gbg>HH\N2]t1K]12B)!')K@3o;2\91`@EJ^EF9$qO&E\1;q6#TsR*-])3n<1<F*$u=h=k#IE&1fg/-Y(eJ06[*70aE`fUc'FK%0kZD3K,>l<]hQ!8B.'<jN('k/aAs@Gp<fOkGiI=GShuq_!MaSgYIGA3L'uu.R7T#7A<1*9CA-T@.5&_C(4c.?]p*`i6t3UK"Ko<#%o?WtrkRWclj1\t*nZ6t+EtM>?<o^%lZ(A`d8$+6I#=>icA-m@qs1dW]1ZN*apP4i.Y$Ub53C\Bq,ti"ocsDlb95>`V[[U]b:r'KA%:QDYqN=_Cl<&,C9!PUe<I[XB'\_nm4mEn>%GQr@=br-/\DH;>@8uQU=`e[.@)u&_p\iuQ#@P50*!Ti#3(4?]M0"!blfB<O@@)%bc%MI=g3p2o?8(mK5uQ:-joKW@DL2+T!olI\-cmf;U*^9:EIBWbC,C6G"Y[$23O5he+WmnLgRIckmKj/.O['?8u@q<cS8oVmi8QL$+o%mcq@-\1Co"[k'tNIEnru\u=7k1/a\%C/a"dh?"Y*[lB`m7#,JS2;=Ie,iLe!oHnF@X]b;pPV$E([Vk-LE)abEb-+NVY`Z7>n2p;;%PKb[5bgT]M*[W,M+X5dt%XEOJZZ'3(QN0kfcRY>X<5^l71"Rme3sITIO/%u[4J`VLdD@6-+cku$;GVGBkH,sp7\il@3>Fsa46b==%V#$2hH"1["ZAc_Kc_Jl<T*M@I@&=/hOJl(<^s#mg5mNjmm%u*i6H3L&a??H0`+^\fFHNZ%+[-"lCqgiH"C*V57%?F27bAn0RfQhb%]s:@[6ni=e+]l.gT3A3&dN"(%@F?#rBlNd%em<+2P(sI@Arf]OG9N?5lO".Z<dNHo*9%/K`J`t*Rm7ApRC<pD.Me<Z$`L2IL^Pj^%.cAOJKj6N?KNE1KG0Xnr)ql.K1S%79-SOK'Zmh?AG.re1%T6M>cRktSrGa><3/s*+@kD%MMq$\=/o^7*<06^OG>BA<:@A[8B^(9]%k,W$JbmnQE;DD(88$%NUM`/9$8*XT[F>SCs/*47g1n1J5a(KZ`BESW`>dD=8gM@D!=^qaA&J1f;^3u!r^3V8-S2'R*9mb10h6Uj*%?IUpf%kgFs*QqQs.mL^K-LKn]+:s7&[ttWNY,S5Mk=GmOf)RHH'7%d=cGPfSmd+ip&Z<aB_+CkuP>`L^H9Fh2F+_XY>cLf2B&+4t%4'!Hu/8'QZl-2i$L3&ot)\21k%M6:@iVJ7@g.f?bD'h&pIJ;JT/$-K;OiI1A7Bod5>P%:nA[0sq*<[kHa^IuiHI2(JTRXCX$6`I%%Hek8r<L*4#cmlFu9Ve4Y3\lSYFd3@HRQqt&%SjT<WRu6SE$/XW9,gQBR2%2h<pZ^LC[&>VK>8B^(Qff%&AoeLS@A6ZRS'`clPWS=%ES@e'6QK5$ViMQs/Zs_M4(97O-"-i'CO#_UZ#,V@,19`Cj$j(l#5>(skpJQ`l-F8CbtpO0ds),t)/8lpoVS#gY\A)llor0SDI[Zu%[g>u=CQ%AjoZdlaa>!7JVkX3`&R!5EfTVqP*i@_`>UB'/FLtT@mYf!M`bN.*fGh@Q*jYt@-cSRXE!f-p21d[2i/)M,SW>77(X@1(%>NgDL/Dqpc2E9*C=lW(DereY^,Jl4bE[OSDH^M0Cd`8iB]]4B-X."-5qB"G!nD/.<Lt8K+FQZo*[bsp+[<]438=/Ggd<bb94*L.O%7BU-Lmr=1uJ-QYT4X-E.gVqh(5HC?$s..8e;k(<uc6gR,(S]^<^\@mNUD!18/Qk)g>P<HIeP*%)]sc.IJ\:]Zo;S$9oLk)$D.dSG%;;eh\9$_\k.E5?M\I3uh[W_@MWqb6@0P7K2('a=$Y#D7CS#g[TK!_DT4oLecCutS+m/IZ@(m&0:[e]$gE?@'162#*@[m,^-H5WAd%XeqnRBBY&TL0p%U@n&9,)U7_"[Q6n!f;b`'Bh_HTEC2K'Pjl*iTGOQG?R#a#>k'g:%FKH,U#:d1cS\1S6n[iVNJ)Z0TGf4?DE73r%8!F]6:PibpLfH(g94Fl4*FsB2gqV4oO#hf0TYc@f0IlO$'i@(<QE0NurO%[G<=9Qri9Ba-n^Q'Ap&6`;IpjO\Lh`MU06"p.s(h9S%G3u4!VKM<I<2-HO0UiulJd-[GNJbQIef:5,YN9C;IkI=HD(Wn:?Ql3p*c])jSit\P]6k(j;_G/*]],'%jtdVK(`U\+H&;cUq>efX%mC8cR)'"qCCuN42ApD>uB>Z-CH&TV@4V-kkBXN=uW(jDeYT81Oo^E=9iPHc[9%X*-.)A8(VeOb1nI'Y5?EqUU[Gk<i>bO?=aH)g[%JJa,F*82'e?Of734(;/Ba(Il`M4*B)H8o=]GmQcAD"&`%[O_;"@ir?Z3<E7ni?b,\_XmAmVp+.?nBUe.O>q[XN/S:(5)p7C>2je^%!0gX/,@Ki?"M_-Rf4Ne^_I6\HBfr.[_:bop*nk=^0AU%:Rn_%^==C#t.aE*5p<>UJbVMW%P7aR8m<q+-I!M]^FBaH":>%@+PjuF2%SCn(To=7tP]2,$fIj>8T'JC1i4;6TK+d#m8aUpfaPVD<q0Yo2E4CU9K\I[$eR8u2g;Yf%q&VCcG)a#U8Zu1+[$E\8>Ym>_f(^HZR%NImhOEVM90.4W%-(6rK.$'A)\dM.scG#'U4U_6G],>C<V7"@lXR4WF[FHYl=5tIlPBMkjqaTSLS7g3Id+n>>-=Y\qW3I'QV/Tu<0%iBfN@&CtKW:tpY,eB7=TY!9BiW5jR36A9Z7Ci5ZQGk1MIk!+_aK3R?gpR$pN_r@tEn4`_UjkDFn"1EO<W`k]"f/Q+OYbgC9_SJ;;%$N:j9I,+X-'B9\.^IB?oi5=/mZ1Va7_!kW27!bNmT>1>Q>a4`/i#!,CSu,#8GI]U"GJ=+U[m0egs"aVp5Q&_)r;NVOJ,AiprS=qI%r8GEhl(<G%msk>cs8M3=rqu/Urp<L2q<aM5rQDtRlbEJahgbMfY?ubSVa(4TDu]g?J,\i%J,<UQqH&ooR^i29rpUHuofms'^WIM?hZ~>%AI9_PrivateDataEnd